<?xml version="1.0" ?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.1/graphml.xsd"><key id="typeName" for="node" attr.name="typeName" attr.type="string"></key><key id="moduleName" for="node" attr.name="moduleName" attr.type="string"></key><key id="name" for="node" attr.name="name" attr.type="string"></key><key id="comment" for="node" attr.name="comment" attr.type="string"></key><key id="nodeType" for="node" attr.name="nodeType" attr.type="string"></key><key id="moduleName" for="edge" attr.name="moduleName" attr.type="string"></key><graph id="G" edgedefault="directed"><node id="D.GenomeAnnotation.feature_quality_measure"><data key="typeName">feature_quality_measure</data><data key="name">D.GenomeAnnotation.feature_quality_measure</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Cmonkey.cmonkey_motif_id"><data key="typeName">cmonkey_motif_id</data><data key="name">D.Cmonkey.cmonkey_motif_id</data><data key="moduleName">Cmonkey</data><data key="nodeType">D</data><data key="comment">Represents WS cMonkey motif identifier
id subws Cmonkey.CmonkeyMotif</data></node><node id="M.Ontology.association_test"><data key="typeName">association_test</data><data key="name">M.Ontology.association_test</data><data key="moduleName">Ontology</data><data key="nodeType">M</data><data key="comment">Association Test
gene_list is tested against each cluster in a network typed object with test method (TestType) and p-value correction method (correction_method).
The current correction_method is either "none" or "bonferroni" and the default is "none" if it is not specified.
The current test type, by default, uses hypergeometric test. Even if you do not provide TestType, it will do hypergeometric test.</data></node><node id="D.Tree.html_file"><data key="typeName">html_file</data><data key="name">D.Tree.html_file</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">String in HTML format, used in the KBase Tree library for returning rendered trees.</data></node><node id="D.GenomeComparison.ws_genome_id"><data key="typeName">ws_genome_id</data><data key="name">D.GenomeComparison.ws_genome_id</data><data key="moduleName">GenomeComparison</data><data key="nodeType">D</data><data key="comment">A workspace ID that references a Genome data object.
@id ws KBaseGenomes.Genome</data></node><node id="M.GenomeAnnotation.run_pipeline"><data key="typeName">run_pipeline</data><data key="name">M.GenomeAnnotation.run_pipeline</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.Communities.DataHandle"><data key="typeName">DataHandle</data><data key="name">D.Communities.DataHandle</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Communities.metagenome_ref"><data key="typeName">metagenome_ref</data><data key="name">D.Communities.metagenome_ref</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment">@id ws Communities.Metagenome</data></node><node id="M.GenomeAnnotation.pipeline_batch_enumerate_batches"><data key="typeName">pipeline_batch_enumerate_batches</data><data key="name">M.GenomeAnnotation.pipeline_batch_enumerate_batches</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.Workspace.extracted_id"><data key="typeName">extracted_id</data><data key="name">D.Workspace.extracted_id</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">An id extracted from an object.</data></node><node id="D.KBaseGwasData.populationVariationUnit"><data key="typeName">populationVariationUnit</data><data key="name">D.KBaseGwasData.populationVariationUnit</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">Population - variation tuple</data></node><node id="D.KBaseExpression.RNASeqSampleMetaData"><data key="typeName">RNASeqSampleMetaData</data><data key="name">D.KBaseExpression.RNASeqSampleMetaData</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Object for the RNASeq Metadata
@optional platform source tissue condition po_id eo_id</data></node><node id="M.KBaseExpression.get_expression_samples_data_by_strain_ids"><data key="typeName">get_expression_samples_data_by_strain_ids</data><data key="name">M.KBaseExpression.get_expression_samples_data_by_strain_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a list of Strains, and a SampleType (controlled vocabulary : microarray, RNA-Seq, qPCR, or proteomics) , it returns a StrainExpressionDataSamplesMapping,  
StrainId -&gt; ExpressionSampleDataStructure {strain_id -&gt; {sample_id -&gt; expressionSampleDataStructure}}</data></node><node id="D.Tree.tree"><data key="typeName">tree</data><data key="name">D.Tree.tree</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">A string representation of a phylogenetic tree.  The format/syntax of the string is
specified by using one of the available typedefs declaring a particular format, such as 'newick_tree',
'phylo_xml_tree' or 'json_tree'.  When a format is not explictily specified, it is possible to return
trees in different formats depending on addtional parameters. Regardless of format, all leaf nodes
in trees built from MSAs are indexed to a specific MSA row.  You can use the appropriate functionality
of the API to replace these IDs with other KBase Ids instead. Internal nodes may or may not be named.
Nodes, depending on the format, may also be annotated with structured data such as bootstrap values and
distances.</data></node><node id="M.RDPTools.classifySeqs"><data key="typeName">classifySeqs</data><data key="name">M.RDPTools.classifySeqs</data><data key="moduleName">RDPTools</data><data key="nodeType">M</data><data key="comment">calling Classifier</data></node><node id="M.TaxonomyTranslation.get_tax_ids_by_name"><data key="typeName">get_tax_ids_by_name</data><data key="name">M.TaxonomyTranslation.get_tax_ids_by_name</data><data key="moduleName">TaxonomyTranslation</data><data key="nodeType">M</data><data key="comment">Returns a list of tax ids for a given name.</data></node><node id="M.InvocationService.get_file"><data key="typeName">get_file</data><data key="name">M.InvocationService.get_file</data><data key="moduleName">InvocationService</data><data key="nodeType">M</data><data key="comment">* Retrieve the contents of the given file.</data></node><node id="D.KBaseExpression.ExpressionOntologyTerm"><data key="typeName">ExpressionOntologyTerm</data><data key="name">D.KBaseExpression.ExpressionOntologyTerm</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Temporary workspace typed object for ontology.  Should be replaced by a ontology workspace typed object.
Currently supports EO, PO and ENVO ontology terms.</data></node><node id="M.KBaseTrees.get_tree"><data key="typeName">get_tree</data><data key="name">M.KBaseTrees.get_tree</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Returns the specified tree in the specified format, or an empty string if the tree does not exist.
The options hash provides a way to return the tree with different labels replaced or with different attached meta
information.  Currently, the available flags and understood options are listed below. 

    options = [
        format =&gt; 'newick',
        newick_label =&gt; 'none' || 'raw' || 'feature_id' || 'protein_sequence_id' ||
                        'contig_sequence_id' || 'best_feature_id' || 'best_genome_id',
        newick_bootstrap =&gt; 'none' || 'internal_node_labels'
        newick_distance =&gt; 'none' || 'raw'
    ];
 
The 'format' key indicates what string format the tree should be returned in.  Currently, there is only
support for 'newick'. The default value if not specified is 'newick'.

The 'newick_label' key only affects trees returned as newick format, and specifies what should be
placed in the label of each leaf.  'none' indicates that no label is added, so you get the structure
of the tree only.  'raw' indicates that the raw label mapping the leaf to an alignement row is used.
'feature_id' indicates that the label will have an examplar feature_id in each label (typically the
feature that was originally used to define the sequence). Note that exemplar feature_ids are not
defined for all trees, so this may result in an empty tree! 'protein_sequence_id' indicates that the
kbase id of the protein sequence used in the alignment is used.  'contig_sequence_id' indicates that
the contig sequence id is added.  Note that trees are typically built with protein sequences OR
contig sequences. If you select one type of sequence, but the tree was built with the other type, then
no labels will be added.  'best_feature_id' is used in the frequent case where a protein sequence has
been mapped to multiple feature ids, and an example feature_id is used.  Similarly, 'best_genome_id'
replaces the labels with the best example genome_id.  The default value if none is specified is 'raw'.

The 'newick_bootstrap' key allows control over whether bootstrap values are returned if they exist, and
how they are returned.  'none' indicates that no bootstrap values are returned. 'internal_node_labels'
indicates that bootstrap values are returned as internal node labels.  Default value is 'internal_node_labels';

The 'newick_distance' key allows control over whether distance labels are generated or not.  If set to
'none', no distances will be output. Default is 'raw', which outputs the distances exactly as they appeared
when loaded into KBase.</data></node><node id="D.KmerEval.genus_species"><data key="typeName">genus_species</data><data key="name">D.KmerEval.genus_species</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Cmonkey.cmonkey_network_id"><data key="typeName">cmonkey_network_id</data><data key="name">D.Cmonkey.cmonkey_network_id</data><data key="moduleName">Cmonkey</data><data key="nodeType">D</data><data key="comment">Represents WS cMonkey network identifier
id subws Cmonkey.CmonkeyNetwork</data></node><node id="D.KBaseNetworks.dataset_source_ref"><data key="typeName">dataset_source_ref</data><data key="name">D.KBaseNetworks.dataset_source_ref</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">D</data><data key="comment">The name of a dataset that can be accessed as a source for creating a network</data></node><node id="D.GenomeAnnotation.reconstructionTO"><data key="typeName">reconstructionTO</data><data key="name">D.GenomeAnnotation.reconstructionTO</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment">Metabolic reconstruction
represents the set of subsystems that we infer are present in this genome</data></node><node id="D.KBaseFBA.FBADeletionResult"><data key="typeName">FBADeletionResult</data><data key="name">D.KBaseFBA.FBADeletionResult</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">FBADeletionResult object</data></node><node id="M.KBaseTrees.construct_species_tree"><data key="typeName">construct_species_tree</data><data key="name">M.KBaseTrees.construct_species_tree</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Build a species tree out of a set of given genome references.</data></node><node id="D.KBaseExpression.genome_id"><data key="typeName">genome_id</data><data key="name">D.KBaseExpression.genome_id</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">KBase GenomeID 
id ws KB.Genome

"ws" may change to "to" in the future</data></node><node id="D.ExpressionServices.wild_type_only"><data key="typeName">wild_type_only</data><data key="name">D.ExpressionServices.wild_type_only</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Single integer 1= WildTypeonly, 0 means all strains ok</data></node><node id="D.Ontology.ontology_type"><data key="typeName">ontology_type</data><data key="name">D.Ontology.ontology_type</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseGenomes.ContigSet_ref"><data key="typeName">ContigSet_ref</data><data key="name">D.KBaseGenomes.ContigSet_ref</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Reference to a ContigSet object containing the contigs for this genome in the workspace
    @id ws KBaseGenomes.ContigSet</data></node><node id="D.KBaseGwasData.GwasPopulationSummary"><data key="typeName">GwasPopulationSummary</data><data key="name">D.KBaseGwasData.GwasPopulationSummary</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Workspace.ModuleInfo"><data key="typeName">ModuleInfo</data><data key="name">D.Workspace.ModuleInfo</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Information about a module.

        list&lt;username&gt; owners - the owners of the module.
        spec_version ver - the version of the module.
        typespec spec - the typespec.
        string description - the description of the module from the typespec.
        mapping&lt;type_string, jsonschema&gt; types - the types associated with this
                module and their JSON schema.
        mapping&lt;modulename, spec_version&gt; included_spec_version - names of 
                included modules associated with their versions.
        string chsum - the md5 checksum of the object.
        list&lt;func_string&gt; functions - list of names of functions registered in spec.
        boolean is_released - shows if this version of module was released (and
                hence can be seen by others).</data></node><node id="D.KBaseSearch.contig_ref"><data key="typeName">contig_ref</data><data key="name">D.KBaseSearch.contig_ref</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Reference to an individual contig in a ContigSet object
@id subws KBaseSearch.ContigSet.contigs.[].id</data></node><node id="D.KmerAnnotationByFigfam.hit"><data key="typeName">hit</data><data key="name">D.KmerAnnotationByFigfam.hit</data><data key="moduleName">KmerAnnotationByFigfam</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.KBaseExpression.compare_samples_vs_the_average"><data key="typeName">compare_samples_vs_the_average</data><data key="name">M.KBaseExpression.compare_samples_vs_the_average</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">Compares each numerator sample vs the average of all the denominator sampleIds.  Take a list of numerator sample IDs and a list of samples Ids to average for the denominator.
returns SampleComparisonMapping {numerator_sample_id-&gt;{denominator_sample_id -&gt;{feature_id -&gt; log2Ratio}}}</data></node><node id="D.KBaseGwasData.genome_id"><data key="typeName">genome_id</data><data key="name">D.KBaseGwasData.genome_id</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">reference genome id for mapping the fastq file</data></node><node id="D.Workspace.get_objectmeta_params"><data key="typeName">get_objectmeta_params</data><data key="name">D.Workspace.get_objectmeta_params</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Input parameters for the "get_objectmeta" function.

        Required arguments:
        ws_name workspace - name of the workspace containing the object for
                 which metadata is to be retrieved
        obj_name id - name of the object for which metadata is to be retrieved
        
        Optional arguments:
        int instance - Version of the object for which metadata is to be
                 retrieved, enabling retrieval of any previous version of an object
        string auth - the authentication token of the KBase account requesting
                access. Overrides the client provided authorization credentials if
                they exist.
                
        @deprecated Workspace.ObjectIdentity</data></node><node id="D.Ontology.GeneID"><data key="typeName">GeneID</data><data key="name">D.Ontology.GeneID</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">Unique identifier of a species specific Gene (aka Feature entity in KBase parlence). This ID is an external identifier that exists in the public databases such as Gramene, Ensembl, NCBI etc.</data></node><node id="D.BAMBI.BambiRunResult"><data key="typeName">BambiRunResult</data><data key="name">D.BAMBI.BambiRunResult</data><data key="moduleName">BAMBI</data><data key="nodeType">D</data><data key="comment">Represents results of a BAMBI run
string id - KBase id of BambiRunResult
string timestamp - timestamp for creation time of BambiRunResult
string version - version of BAMBI
string command_line - command line of BAMBI run 
ws_sequence_set_ref sequence_set_ref - workspace id of a SequenceSet used for motifs search
BabmbiRunParameters run_parameters - parametrs used to run BAMBI
list&lt;BambiMotif&gt; motifs - list of predicted motifs
string raw_output - section of BAMBI output text file

@optional sequence_set_ref</data></node><node id="M.Workspace.list_workspace_objects"><data key="typeName">list_workspace_objects</data><data key="name">M.Workspace.list_workspace_objects</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Lists the metadata of all objects in the specified workspace with the
specified type (or with any type). Provided for backwards compatibility.

@deprecated Workspace.list_objects</data></node><node id="D.Workspace.save_object_params"><data key="typeName">save_object_params</data><data key="name">D.Workspace.save_object_params</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Input parameters for the "save_object" function. Provided for backwards
compatibility.
        
Required arguments:
type_string type - type of the object to be saved
ws_name workspace - name of the workspace where the object is to be
        saved
obj_name id - name behind which the object will be saved in the
        workspace
UnspecifiedObject data - data to be saved in the workspace

Optional arguments:
usermeta metadata - arbitrary user-supplied metadata for the object,
        not to exceed 16kb; if the object type specifies automatic
        metadata extraction with the 'meta ws' annotation, and your
        metadata name conflicts, then your metadata will be silently
        overwritten.
string auth - the authentication token of the KBase account accessing
        the workspace. Overrides the client provided authorization
        credentials if they exist.

@deprecated</data></node><node id="D.KBaseFBA.fba_id"><data key="typeName">fba_id</data><data key="name">D.KBaseFBA.fba_id</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">KBase FBA ID
@id kb</data></node><node id="M.ERDB_Service.GetAll"><data key="typeName">GetAll</data><data key="name">M.ERDB_Service.GetAll</data><data key="moduleName">ERDB_Service</data><data key="nodeType">M</data><data key="comment">Wrapper for the GetAll function documented L&lt;here|http://pubseed.theseed.org/sapling/server.cgi?pod=ERDB#GetAll&gt;.
Note that the objectNames and fields arguments must be strings; array references are not allowed.</data></node><node id="D.KBaseTrees.CdsImportTreeParameters"><data key="typeName">CdsImportTreeParameters</data><data key="name">D.KBaseTrees.CdsImportTreeParameters</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">Parameters for importing phylogentic tree data from the Central Data Store to
the Workspace, which allows you to manipulate, edit, and use the tree data in
the narrative interface.

load_alignment_for_tree - if true, load the alignment that was used to build the tree (default = false)

default label =&gt; one of protein_md5, feature, genome, genome_species

@optional load_alignment_for_tree

@optional ws_tree_name additional_tree_ws_metadata
@optional ws_alignment_name additional_alignment_ws_metadata

@optional link_nodes_to_best_feature link_nodes_to_best_genome link_nodes_to_best_genome_name
@optional link_nodes_to_all_features link_nodes_to_all_genomes link_nodes_to_all_genome_names
@optional default_label</data></node><node id="D.KBaseTrees.html_file"><data key="typeName">html_file</data><data key="name">D.KBaseTrees.html_file</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">String in HTML format, used in the KBase Tree library for returning rendered trees.</data></node><node id="D.MEME.MemeMotif"><data key="typeName">MemeMotif</data><data key="name">D.MEME.MemeMotif</data><data key="moduleName">MEME</data><data key="nodeType">D</data><data key="comment">Represents a particular motif found by MEME
string id - KBase ID of MemeMotif
string description - name of motif or number of motif in collection or anything else
int width - width of motif
int sites - number of sites
float llr - log likelihood ratio of motif
float evalue - E-value of motif
string raw_output - part of MEME output file with data about this motif
list&lt;MemeSite&gt; sites - list of sites

@optional description width llr evalue raw_output</data></node><node id="D.KBaseExpression.ontology_definition"><data key="typeName">ontology_definition</data><data key="name">D.KBaseExpression.ontology_definition</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Kbase OntologyDefinition</data></node><node id="D.KBaseBiochem.structure_ref"><data key="typeName">structure_ref</data><data key="name">D.KBaseBiochem.structure_ref</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Reference to a reaction object in a biochemistry
@id subws KBaseBiochem.BiochemistryStructures.structures.[*].id</data></node><node id="D.Communities.FunctionalProfile"><data key="typeName">FunctionalProfile</data><data key="name">D.Communities.FunctionalProfile</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.GenomeAnnotation.create_genome"><data key="typeName">create_genome</data><data key="name">M.GenomeAnnotation.create_genome</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Create a new genome object and assign metadata.</data></node><node id="D.KBaseFBA.regmodel_ref"><data key="typeName">regmodel_ref</data><data key="name">D.KBaseFBA.regmodel_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to regulatory model
@id ws KBaseRegulation.RegModel</data></node><node id="D.Communities.BiomMetagenomeEntry"><data key="typeName">BiomMetagenomeEntry</data><data key="name">D.Communities.BiomMetagenomeEntry</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment">BiomMetagenomeEntry
A KBase object for a profile entry in the metagenome profile object
@optional name metadata metagenome
#searchable BiomMetagenomeEntry.*</data></node><node id="D.KBaseOntology.ontology_term_annotation_map"><data key="typeName">ontology_term_annotation_map</data><data key="name">D.KBaseOntology.ontology_term_annotation_map</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.GenomeAnnotation.workflow"><data key="typeName">workflow</data><data key="name">D.GenomeAnnotation.workflow</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseTrees.viz_val_float"><data key="typeName">viz_val_float</data><data key="name">D.KBaseTrees.viz_val_float</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.Inferelator.run_inferelator"><data key="typeName">run_inferelator</data><data key="name">M.Inferelator.run_inferelator</data><data key="moduleName">Inferelator</data><data key="nodeType">M</data><data key="comment">Starts cMonkey server run for a series of expression data stored in workspace and returns ID of the run result object
string ws_id - workspace id where run result would be written
InferelatorRunParameters params - run parameters 
string job_id - identifier of job object</data></node><node id="M.KBaseExpression.compare_samples"><data key="typeName">compare_samples</data><data key="name">M.KBaseExpression.compare_samples</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">Compare samples takes two data structures labelDataMapping  {sampleID or label}-&gt;{featureId or label =&gt; value}}, 
the first labelDataMapping is the numerator, the 2nd is the denominator in the comparison. returns a 
SampleComparisonMapping {numerator_sample_id(or label)-&gt;{denominator_sample_id(or label)-&gt;{feature_id(or label) -&gt; log2Ratio}}}</data></node><node id="D.Communities.Profile"><data key="typeName">Profile</data><data key="name">D.Communities.Profile</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.ExpressionServices.ontology_id"><data key="typeName">ontology_id</data><data key="name">D.ExpressionServices.ontology_id</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Kbase OntologyID</data></node><node id="D.ExpressionServices.contact_people"><data key="typeName">contact_people</data><data key="name">D.ExpressionServices.contact_people</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Mapping between key : ContactEmail and value : ContactPerson Data Structure</data></node><node id="D.Communities.Data"><data key="typeName">Data</data><data key="name">D.Communities.Data</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.UserAndJobState.job_status"><data key="typeName">job_status</data><data key="name">D.UserAndJobState.job_status</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">A job status string supplied by the reporting service. No more than
200 characters.</data></node><node id="M.UserAndJobState.list_state"><data key="typeName">list_state</data><data key="name">M.UserAndJobState.list_state</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">List all keys.</data></node><node id="D.KBaseExpression.Person"><data key="typeName">Person</data><data key="name">D.KBaseExpression.Person</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Data structure for Person  (TEMPORARY WORKSPACE TYPED OBJECT SHOULD BE HANDLED IN THE FUTURE IN WORKSPACE COMMON)

##        @searchable ws_subset email last_name institution</data></node><node id="D.AbstractHandle.NodeId"><data key="typeName">NodeId</data><data key="name">D.AbstractHandle.NodeId</data><data key="moduleName">AbstractHandle</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Ontology.EvidenceCodeList"><data key="typeName">EvidenceCodeList</data><data key="name">D.Ontology.EvidenceCodeList</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">A list of ontology term evidence codes. One ontology term can have one or more evidence codes.</data></node><node id="D.KBaseRegulation.evidence_type"><data key="typeName">evidence_type</data><data key="name">D.KBaseRegulation.evidence_type</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Type of evidence. This is going to be a controlled vocabulary descibing experimental techniques 
and computational methods to infer regulatory interactions.</data></node><node id="D.KBaseFBA.conflict_state"><data key="typeName">conflict_state</data><data key="name">D.KBaseFBA.conflict_state</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Either of two values: 
 - InactiveOn: specified as on, but turns out as inactive
 - ActiveOff: specified as off, but turns out as active</data></node><node id="M.KBaseExpression.get_expression_samples_data_by_experiment_meta_ids"><data key="typeName">get_expression_samples_data_by_experiment_meta_ids</data><data key="name">M.KBaseExpression.get_expression_samples_data_by_experiment_meta_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a list of ExperimentMetaIDs returns mapping of {experimentMetaID -&gt; {experimentalUnitId -&gt; {sample_id -&gt; expressionSampleDataStructure}}}</data></node><node id="D.KBaseSearch.feature_id"><data key="typeName">feature_id</data><data key="name">D.KBaseSearch.feature_id</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Genome feature ID
@id external</data></node><node id="D.Ontology.domain_list"><data key="typeName">domain_list</data><data key="name">D.Ontology.domain_list</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">A list of ontology domains</data></node><node id="M.AbstractHandle.upload"><data key="typeName">upload</data><data key="name">M.AbstractHandle.upload</data><data key="moduleName">AbstractHandle</data><data key="nodeType">M</data><data key="comment">The upload and download functions  provide an empty
implementation that must be provided in a client. If a concrete
implementation is not provided an error is thrown. These are
the equivelant of abstract methods, with runtime rather than
compile time inforcement.
        
[client_implemented]</data></node><node id="M.Workspace.list_module_versions"><data key="typeName">list_module_versions</data><data key="name">M.Workspace.list_module_versions</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">List typespec module versions.</data></node><node id="D.KBaseFile.PairedEndLibrary"><data key="typeName">PairedEndLibrary</data><data key="name">D.KBaseFile.PairedEndLibrary</data><data key="moduleName">KBaseFile</data><data key="nodeType">D</data><data key="comment">A library of paired end reads. If data is interleaved lib2 will be null
or absent.
      lib1 - the left reads
      lib2 - the right reads
      strain - information about the genetic source
      source - information about the source of this data
      insert_size_mean - the mean size of the genetic fragments
      insert_size_std_dev - the standard deviation of the size of the genetic
  fragments
      interleaved - whether the left and right reads are interleaved in a
  single file
      read_orientation_outward - the orientation of the reads. If false or
  absent, the read directions face each other. Otherwise, the
  sequencing occurs in in an outward direction from the primer pairs.
      sequencing_tech - the technology used to sequence the genetic information
      read_count - the number of reads in the this dataset
      read_size - the total size of the reads, in bases
      gc_content - the GC content of the reads.
      single_genome - true or missing if the reads are from a single genome.
  False if the reads are from a metagenome.

      @optional lib2
      @optional insert_size_mean insert_size_std_dev interleaved
      @optional read_orientation_outward gc_content source strain
      @optional read_size read_count single_genome
      @metadata ws strain.genus
      @metadata ws strain.species
      @metadata ws strain.strain
      @metadata ws strain.ncbi_taxid
      @metadata ws source.source
      @metadata ws source.source_id
      @metadata ws source.project_id
      @metadata ws read_count
      @metadata ws read_size
      @metadata ws gc_content
      @metadata ws sequencing_tech
      @metadata ws single_genome</data></node><node id="D.PROM.regulatory_network_id"><data key="typeName">regulatory_network_id</data><data key="name">D.PROM.regulatory_network_id</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">A workspace ID for a regulatory network object</data></node><node id="D.Workspace.ws_id"><data key="typeName">ws_id</data><data key="name">D.Workspace.ws_id</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">The unique, permanent numerical ID of a workspace.</data></node><node id="M.GenomeAnnotation.annotate_proteins_similarity"><data key="typeName">annotate_proteins_similarity</data><data key="name">M.GenomeAnnotation.annotate_proteins_similarity</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Annotate based on similarity to annotation databases.</data></node><node id="D.ProbabilisticAnnotation.reaction_id"><data key="typeName">reaction_id</data><data key="name">D.ProbabilisticAnnotation.reaction_id</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">A string identifier for a reaction object.</data></node><node id="D.TaxonomyTranslation.Tax_id"><data key="typeName">Tax_id</data><data key="name">D.TaxonomyTranslation.Tax_id</data><data key="moduleName">TaxonomyTranslation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseFBA.ReactionSensitivityAnalysis"><data key="typeName">ReactionSensitivityAnalysis</data><data key="name">D.KBaseFBA.ReactionSensitivityAnalysis</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Object for holding reaction knockout sensitivity results

        kb_id kbid - KBase ID of reaction sensitivity object
        ws_id model_wsid - Workspace reference to associated model
        string type - type of reaction KO sensitivity object
        bool deleted_noncontributing_reactions - boolean indicating if noncontributing reactions were deleted
        bool integrated_deletions_in_model - boolean indicating if deleted reactions were implemented in the model
        list&lt;ReactionSensitivityAnalysisReaction&gt; reactions - list of sensitivity data for tested reactions
        list&lt;ReactionSensitivityAnalysisCorrectedReaction&gt; corrected_reactions - list of reactions dependant upon tested reactions
        
        @searchable ws_subset id fbamodel_ref type deleted_noncontributing_reactions integrated_deletions_in_model
        @optional</data></node><node id="D.ExpressionServices.samples_float_map"><data key="typeName">samples_float_map</data><data key="name">D.ExpressionServices.samples_float_map</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Mapping between sample id and corresponding value.   Used as return for get_expression_samples_original_log2_median</data></node><node id="D.AskKB.query"><data key="typeName">query</data><data key="name">D.AskKB.query</data><data key="moduleName">AskKB</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseTrees.AbundanceParams"><data key="typeName">AbundanceParams</data><data key="name">D.KBaseTrees.AbundanceParams</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">Structure to group input parameters to the compute_abundance_profile method.

    kbase_id tree_id                - the KBase ID of the tree to compute abundances for; the tree is
                                      used to identify the set of sequences that were aligned to build
                                      the tree; each leaf node of a tree built from an alignment will
                                      be mapped to a sequence; the compute_abundance_profile method
                                      assumes that trees are built from protein sequences
    string protein_family_name      - the name of the protein family used to pull a small set of reads
                                      from a metagenomic sample; currently only COG families are supported
    string protein_family_source    - the name of the source of the protein family; currently supported
                                      protein families are: 'COG'
    string metagenomic_sample_id    - the ID of the metagenomic sample to lookup; see the KBase communities
                                      service to identifiy metagenomic samples
    int percent_identity_threshold  - the minimum acceptable percent identity for hits, provided as a percentage
                                      and not a fraction (i.e. set to 87.5 for 87.5%)
    int match_length_threshold      - the minimum acceptable length of a match to consider a hit</data></node><node id="D.KBaseBiochem.map_ref"><data key="typeName">map_ref</data><data key="name">D.KBaseBiochem.map_ref</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Reference to a metabolic map
@id ws KBaseBiochem.MetabolicMap</data></node><node id="D.UserProfile.bool"><data key="typeName">bool</data><data key="name">D.UserProfile.bool</data><data key="moduleName">UserProfile</data><data key="nodeType">D</data><data key="comment">@range [0,1]</data></node><node id="D.GenomeAnnotation.annotation"><data key="typeName">annotation</data><data key="name">D.GenomeAnnotation.annotation</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Ontology.EnrichmentList"><data key="typeName">EnrichmentList</data><data key="name">D.Ontology.EnrichmentList</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">A list of ontology enrichment objects</data></node><node id="D.Workspace.workspace_info"><data key="typeName">workspace_info</data><data key="name">D.Workspace.workspace_info</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Information about a workspace.

        ws_id id - the numerical ID of the workspace.
        ws_name workspace - name of the workspace.
        username owner - name of the user who owns (e.g. created) this workspace.
        timestamp moddate - date when the workspace was last modified.
        int objects - the approximate number of objects currently stored in
                the workspace.
        permission user_permission - permissions for the authenticated user of
                this workspace.
        permission globalread - whether this workspace is globally readable.
        lock_status lockstat - the status of the workspace lock.
        usermeta metadata - arbitrary user-supplied metadata about
                the workspace.</data></node><node id="M.GenomeAnnotation.estimate_crude_phylogenetic_position_kmer"><data key="typeName">estimate_crude_phylogenetic_position_kmer</data><data key="name">M.GenomeAnnotation.estimate_crude_phylogenetic_position_kmer</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">Determine close genomes.</data></node><node id="D.Workspace.RegisterTypespecParams"><data key="typeName">RegisterTypespecParams</data><data key="name">D.Workspace.RegisterTypespecParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Parameters for the register_typespec function.

        Required arguments:
        One of:
        typespec spec - the new typespec to register.
        modulename mod - the module to recompile with updated options (see below).
        
        Optional arguments:
        boolean dryrun - Return, but do not save, the results of compiling the 
                spec. Default true. Set to false for making permanent changes.
        list&lt;typename&gt; new_types - types in the spec to make available in the
                workspace service. When compiling a spec for the first time, if
                this argument is empty no types will be made available. Previously
                available types remain so upon recompilation of a spec or
                compilation of a new spec.
        list&lt;typename&gt; remove_types - no longer make these types available in
                the workspace service for the new version of the spec. This does
                not remove versions of types previously compiled.
        mapping&lt;modulename, spec_version&gt; dependencies - By default, the
                latest released versions of spec dependencies will be included when
                compiling a spec. Specific versions can be specified here.
        spec_version prev_ver - the id of the previous version of the typespec.
                An error will be thrown if this is set and prev_ver is not the
                most recent version of the typespec. This prevents overwriting of
                changes made since retrieving a spec and compiling an edited spec.
                This argument is ignored if a modulename is passed.</data></node><node id="D.KBaseSearch.proteinset_ref"><data key="typeName">proteinset_ref</data><data key="name">D.KBaseSearch.proteinset_ref</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Reference to a ProteinSet object containing the proteins for this genome in the workspace
@id ws KBaseSearch.ProteinSet</data></node><node id="D.Workspace.ObjectIdentity"><data key="typeName">ObjectIdentity</data><data key="name">D.Workspace.ObjectIdentity</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">An object identifier.

Select an object by either:
        One, and only one, of the numerical id or name of the workspace,
        where the name can also be a KBase ID including the numerical id,
        e.g. kb|ws.35.
                ws_id wsid - the numerical ID of the workspace.
                ws_name workspace - name of the workspace or the workspace ID
                        in KBase format, e.g. kb|ws.78.
        AND 
        One, and only one, of the numerical id or name of the object.
                obj_id objid- the numerical ID of the object.
                obj_name name - name of the object.
        OPTIONALLY
                obj_ver ver - the version of the object.
OR an object reference string:
        obj_ref ref - an object reference string.</data></node><node id="D.BAMBI.BambiMotif"><data key="typeName">BambiMotif</data><data key="name">D.BAMBI.BambiMotif</data><data key="moduleName">BAMBI</data><data key="nodeType">D</data><data key="comment">Represents a particular motif found by BAMBI
string id - KBase id of BambiMotif
string description - string representation of a motif 
int width - width of a motif
int block_width - the length of the conserved part of a half of motif (motif is symmetric) 
int gap_width - the distance between conserved blocks 
float information_content - information content of a motif
list&lt;BambiSite&gt; motif_sites - list of sites comprising a motif
list&lt;BambiSite&gt; minor_sites - list additional sites found by a motif. This list is populated if search_for_minor_sites is set to 1 in BabmbiRunParameters.</data></node><node id="D.UserAndJobState.timestamp"><data key="typeName">timestamp</data><data key="name">D.UserAndJobState.timestamp</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">A time in the format YYYY-MM-DDThh:mm:ssZ, where Z is the difference
in time to UTC in the format +/-HHMM, eg:
        2012-12-17T23:24:06-0500 (EST time)
        2013-04-03T08:56:32+0000 (UTC time)</data></node><node id="M.Workspace.get_object_provenance"><data key="typeName">get_object_provenance</data><data key="name">M.Workspace.get_object_provenance</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Get object provenance from the workspace.</data></node><node id="M.NarrativeJobService.check_app_state"><data key="typeName">check_app_state</data><data key="name">M.NarrativeJobService.check_app_state</data><data key="moduleName">NarrativeJobService</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.Cmonkey.operons_ws_ref"><data key="typeName">operons_ws_ref</data><data key="name">D.Cmonkey.operons_ws_ref</data><data key="moduleName">Cmonkey</data><data key="nodeType">D</data><data key="comment">Represents WS operome identifier
@id ws KBaseNetworks.InteractionSet</data></node><node id="M.MEME.find_motifs_with_meme_from_ws"><data key="typeName">find_motifs_with_meme_from_ws</data><data key="name">M.MEME.find_motifs_with_meme_from_ws</data><data key="moduleName">MEME</data><data key="nodeType">M</data><data key="comment">Returns kbase id of MemeRunResult object that contains results of a single MEME run
MEME will be run with -dna -text parameters
string ws_name - workspace id to save run result
MemeRunParameters params - parameters of MEME run</data></node><node id="D.KBaseExpression.series_ids"><data key="typeName">series_ids</data><data key="name">D.KBaseExpression.series_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">list of KBase Series IDs</data></node><node id="D.ExpressionServices.sample_measurement_mapping"><data key="typeName">sample_measurement_mapping</data><data key="name">D.ExpressionServices.sample_measurement_mapping</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">mapping kbase sample id as the key and a single measurement (for a specified feature id, one mapping higher) as the value</data></node><node id="M.KBaseTrees.extract_leaf_node_names"><data key="typeName">extract_leaf_node_names</data><data key="name">M.KBaseTrees.extract_leaf_node_names</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Given a tree in newick format, list the names of the leaf nodes.</data></node><node id="M.Tree.get_leaf_count"><data key="typeName">get_leaf_count</data><data key="name">M.Tree.get_leaf_count</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">Given a tree, return the total number of leaf nodes, (internal and root nodes are ignored).  When the
tree was based on a multiple sequence alignment, the number of leaves will match the number of sequences
that were aligned.</data></node><node id="D.ProbabilisticAnnotation.reaction_probability_list"><data key="typeName">reaction_probability_list</data><data key="name">D.ProbabilisticAnnotation.reaction_probability_list</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">Output for get_rxnprobs function.
It is a list of tuples convenient for output as a table.</data></node><node id="D.Tree.AlignmentMetaData"><data key="typeName">AlignmentMetaData</data><data key="name">D.Tree.AlignmentMetaData</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">Meta data associated with an alignment.

    list&lt;kbase_id&gt; tree_ids - the set of trees that were built from this alignment
    string status - set to 'active' if this is the latest alignment for a particular set of sequences
    string sequence_type - indicates what type of sequence is aligned (e.g. protein vs. dna)
    boolean is_concatenation - true if the alignment is based on the concatenation of multiple non-contiguous
                            sequences, false if each row cooresponds to exactly one sequence (possibly with gaps)
    timestamp date_created - time at which the alignment was built/loaded in seconds since the epoch
    int n_rows - number of rows in the alignment
    int n_cols - number of columns in the alignment
    string alignment_construction_method - the name of the software tool used to build the alignment
    string alignment_construction_parameters - set of non-default parameters used to construct the alignment
    string alignment_protocol - simple free-form text which may provide additional details of how the alignment was built
    string source_db - the source database where this alignment originated, if one exists
    string source_id - the id of this alignment in an external database, if one exists</data></node><node id="D.KBaseGenomes.GenomeComparisonFamily"><data key="typeName">GenomeComparisonFamily</data><data key="name">D.KBaseGenomes.GenomeComparisonFamily</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">GenomeComparisonFamily object: this object holds information about a protein family across a set of genomes</data></node><node id="D.KBaseGwasData.observation_unit_details"><data key="typeName">observation_unit_details</data><data key="name">D.KBaseGwasData.observation_unit_details</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">Observation Unit details- Details for each ecotype / germplasm in a GwasPopulation object.

       This is not an independent object in itself. It is used in gwas population

       source_id -  ecotype or germplasm id
       latitude - latitude from where ecotype was obtained
       longitude - longitude from where ecotype was obtained
       nativenames - native name of the ecotype
       region - state
       country - country
       comment - comment
       kbase_obs_unit_id - kbase registered id  of observation unit</data></node><node id="D.KBaseTrees.MSASetElement"><data key="typeName">MSASetElement</data><data key="name">D.KBaseTrees.MSASetElement</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">Type for MSA collection element. There could be mutual exclusively 
defined either ref or data field.
@optional metadata
@optional ref
@optional data</data></node><node id="D.KBaseFBA.Gapgeneration"><data key="typeName">Gapgeneration</data><data key="name">D.KBaseFBA.Gapgeneration</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">GapGeneration object holds data on formulation and solutions from gapgen analysis

@optional fba_ref totalTimeLimit timePerSolution media_ref referenceMedia_ref gprHypothesis reactionRemovalHypothesis biomassHypothesis mediaHypothesis
    @metadata ws fba_ref as FBA
    @metadata ws fbamodel_ref as Model
    @metadata ws length(gapgenSolutions) as Number solutions</data></node><node id="M.GenomeAnnotation.query_classifier_taxonomies"><data key="typeName">query_classifier_taxonomies</data><data key="name">M.GenomeAnnotation.query_classifier_taxonomies</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Query the taxonomy strings that this classifier maps.</data></node><node id="D.KBaseExpression.series_id"><data key="typeName">series_id</data><data key="name">D.KBaseExpression.series_id</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Kbase Series ID</data></node><node id="M.AuthIntegration.test_noauth"><data key="typeName">test_noauth</data><data key="name">M.AuthIntegration.test_noauth</data><data key="moduleName">AuthIntegration</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.GenomeAnnotation.bool"><data key="typeName">bool</data><data key="name">D.GenomeAnnotation.bool</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseExpression.genome_expression_sample_ids_map"><data key="typeName">genome_expression_sample_ids_map</data><data key="name">D.KBaseExpression.genome_expression_sample_ids_map</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">map between genome ids and a list of samples from that genome in this series</data></node><node id="D.KBaseNetworks.Edge"><data key="typeName">Edge</data><data key="name">D.KBaseNetworks.Edge</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">D</data><data key="comment">Represents an edge in a network.
string id - A unique  identifier of an edge 
     string name - String representation of an edge. It should be a concise but informative representation that is easy for a person to read.
     string node_id1 - Identifier of the first node (source node, if the edge is directed) connected by a given edge 
     string node_id2 - Identifier of the second node (target node, if the edge is directed) connected by a given edge
     boolean        directed - Specify whether the edge is directed or not. 1 if it is directed, 0 if it is not directed
     float confidence - Value from 0 to 1 representing a probability that the interaction represented by a given edge is a true interaction
     float strength - Value from 0 to 1 representing a strength of an interaction represented by a given edge
     string dataset_id - The identifier of a dataset that provided an interaction represented by a given edge
                mapping&lt;string,string&gt; properties - Other edge properties
     mapping&lt;string,string&gt; user_annotations - User annotations of an edge</data></node><node id="M.MEME.compare_motifs_with_tomtom_by_collection"><data key="typeName">compare_motifs_with_tomtom_by_collection</data><data key="name">M.MEME.compare_motifs_with_tomtom_by_collection</data><data key="moduleName">MEME</data><data key="nodeType">M</data><data key="comment">Returns TomtomRunResult with results of a single TOMTOM run
TOMTOM will be run with -text parameter
MemePSPMCollection query - query motifs for TOMTOM run
MemePSPMCollection target - target motifs for TOMTOM run
TomtomRunParameters params - parameters of TOMTOM run</data></node><node id="M.GenomeAnnotation.complete_workflow_template"><data key="typeName">complete_workflow_template</data><data key="name">M.GenomeAnnotation.complete_workflow_template</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Return a workflow that includes all available stages. Not meant
* (necessarily) for actual execution, but as a comprehensive list
* of parts for users to use in assembling their own workflows.</data></node><node id="D.KBaseCommunities.Table1DFloat"><data key="typeName">Table1DFloat</data><data key="name">D.KBaseCommunities.Table1DFloat</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.ProbabilisticAnnotation.username"><data key="typeName">username</data><data key="name">D.ProbabilisticAnnotation.username</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">Login name of KBase user account to which permissions for workspaces are mapped</data></node><node id="M.GenomeAnnotation.call_pyrrolysoproteins"><data key="typeName">call_pyrrolysoproteins</data><data key="name">M.GenomeAnnotation.call_pyrrolysoproteins</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBasePPI.GenomeID"><data key="typeName">GenomeID</data><data key="name">D.KBasePPI.GenomeID</data><data key="moduleName">KBasePPI</data><data key="nodeType">D</data><data key="comment">@id kb</data></node><node id="M.CoExpression.filter_genes"><data key="typeName">filter_genes</data><data key="name">M.CoExpression.filter_genes</data><data key="moduleName">CoExpression</data><data key="nodeType">M</data><data key="comment">Description of filter_genes: 
filter_genes provides the function to identify differentially expressed genes given an expression series/experiment. An expression series/experiment contains a list of expression samples. A expression sample is the measurement of mRNA abundance in a biological sample. The design of expression profiling usually includes replicates. The replicates allows us to differ the non-relevent expression variation and the relevent expression variation.
The replicate information is manully extracted by KBase developers. Only a part of samples has been assigned to a replicate group. For those samples without an assignment, the variation of its expression abundance is used directly.
filter_genes now has two methods to identify differentially expressed genes: ANOVA and lor(from limma r package). The output of this function is a list of genes</data></node><node id="D.KBaseGenomes.GenomeComparisonGenome"><data key="typeName">GenomeComparisonGenome</data><data key="name">D.KBaseGenomes.GenomeComparisonGenome</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">GenomeComparisonGenome object: this object holds information about a genome in a genome comparison</data></node><node id="M.Workspace.rename_object"><data key="typeName">rename_object</data><data key="name">M.Workspace.rename_object</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Rename an object. User meta data is always returned as null.</data></node><node id="D.KBaseGeneFamilies.domain_source"><data key="typeName">domain_source</data><data key="name">D.KBaseGeneFamilies.domain_source</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">D</data><data key="comment">enum: CDD, SMART, Pfam, etc</data></node><node id="D.Workspace.modulename"><data key="typeName">modulename</data><data key="name">D.Workspace.modulename</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">A module name defined in a KIDL typespec.</data></node><node id="D.Communities.StatMatrix"><data key="typeName">StatMatrix</data><data key="name">D.Communities.StatMatrix</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.ExpressionServices.data_sample_comparison"><data key="typeName">data_sample_comparison</data><data key="name">D.ExpressionServices.data_sample_comparison</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">mapping kbase feature id as the key and log2Ratio as the value</data></node><node id="D.MOTranslation.position"><data key="typeName">position</data><data key="name">D.MOTranslation.position</data><data key="moduleName">MOTranslation</data><data key="nodeType">D</data><data key="comment">Used to indicate a single nucleotide/residue location in a sequence</data></node><node id="D.MOTranslation.moScaffoldId"><data key="typeName">moScaffoldId</data><data key="name">D.MOTranslation.moScaffoldId</data><data key="moduleName">MOTranslation</data><data key="nodeType">D</data><data key="comment">moScaffoldId is a scaffoldId in MicrobesOnline.  It is analogous to
a contig kbId in KBase.</data></node><node id="D.IDServerAPI.kbase_id"><data key="typeName">kbase_id</data><data key="name">D.IDServerAPI.kbase_id</data><data key="moduleName">IDServerAPI</data><data key="nodeType">D</data><data key="comment">A KBase ID is string starting with the characters "kb|".

KBase IDs are typed. The types are designated using a short string. For instance,
"g" denotes a genome, "fp" denotes a feature representing a protein-encoding gene, etc.

KBase IDs may be hierarchical. If a KBase genome identifier is "kb|g.1234", a protein
within that genome may be represented as "kb|g.1234.fp.771".</data></node><node id="D.PROM.regulatory_network"><data key="typeName">regulatory_network</data><data key="name">D.PROM.regulatory_network</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">A collection of regulatory interactions that together form a regulatory network. This is an extremely
simplified data object for use in constructing a PROM model.  NOTE: this data object should be migrated to
the Regulation service, and simply imported here.</data></node><node id="D.ProbabilisticAnnotation.template_id"><data key="typeName">template_id</data><data key="name">D.ProbabilisticAnnotation.template_id</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">A string identifier for a template model object.</data></node><node id="D.MEME.MastHit"><data key="typeName">MastHit</data><data key="name">D.MEME.MastHit</data><data key="moduleName">MEME</data><data key="nodeType">D</data><data key="comment">Represents a particluar MAST hit
string seq_id - name of sequence
string strand - strand ("+" or "-")
string pspm_id - id of MemePSPM
int hit_start - start position of hit
int hit_end - end position of hit
float score - hit score
float hitPvalue - hit p-value

@optional strand hit_start hit_end score hit_pvalue</data></node><node id="M.UserAndJobState.get_job_status"><data key="typeName">get_job_status</data><data key="name">M.UserAndJobState.get_job_status</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Get the status of a job.</data></node><node id="D.PROM.source"><data key="typeName">source</data><data key="name">D.PROM.source</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">Specifies the source of a data object, e.g. KBase or MicrobesOnline</data></node><node id="D.KBaseGwasData.kbase_genome_id"><data key="typeName">kbase_genome_id</data><data key="name">D.KBaseGwasData.kbase_genome_id</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">A reference to kbase genome id in central store
     @id kb</data></node><node id="D.KBaseSearch.fasta_ref"><data key="typeName">fasta_ref</data><data key="name">D.KBaseSearch.fasta_ref</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Reference to a fasta file in shock
@id shock</data></node><node id="D.ExpressionServices.denominator_sample_comparison"><data key="typeName">denominator_sample_comparison</data><data key="name">D.ExpressionServices.denominator_sample_comparison</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">mapping ComparisonDenominatorLabel to DataSampleComparison mapping</data></node><node id="D.KBaseSearch.subsystem_data"><data key="typeName">subsystem_data</data><data key="name">D.KBaseSearch.subsystem_data</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Structure for subsystem data (from CDMI API)</data></node><node id="D.KBaseFBA.biomass_ref"><data key="typeName">biomass_ref</data><data key="name">D.KBaseFBA.biomass_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a biomass object in a model
@id subws KBaseFBA.FBAModel.biomasses.[*].id</data></node><node id="D.Cmonkey.genome_ws_ref"><data key="typeName">genome_ws_ref</data><data key="name">D.Cmonkey.genome_ws_ref</data><data key="moduleName">Cmonkey</data><data key="nodeType">D</data><data key="comment">Represents WS genome identifier
@id ws KBaseGenomes.Genome</data></node><node id="D.Workspace.get_object_params"><data key="typeName">get_object_params</data><data key="name">D.Workspace.get_object_params</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Input parameters for the "get_object" function. Provided for backwards
compatibility.
        
Required arguments:
ws_name workspace - Name of the workspace containing the object to be
        retrieved
obj_name id - Name of the object to be retrieved

Optional arguments:
int instance - Version of the object to be retrieved, enabling
        retrieval of any previous version of an object
string auth - the authentication token of the KBase account accessing
        the object. Overrides the client provided authorization
        credentials if they exist.

@deprecated Workspace.ObjectIdentity</data></node><node id="D.ExpressionServices.measurement"><data key="typeName">measurement</data><data key="name">D.ExpressionServices.measurement</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Measurement Value (Zero median normalized within a sample) for a given feature</data></node><node id="D.UserAndJobState.detailed_err"><data key="typeName">detailed_err</data><data key="name">D.UserAndJobState.detailed_err</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">Detailed information about a job error, such as a stacktrace, that will
not fit in the job_status. No more than 100K characters.</data></node><node id="D.KmerEval.id"><data key="typeName">id</data><data key="name">D.KmerEval.id</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseGwasData.VariationSamplesSet"><data key="typeName">VariationSamplesSet</data><data key="name">D.KBaseGwasData.VariationSamplesSet</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">list of VariationSamples</data></node><node id="D.Workspace.typespec"><data key="typeName">typespec</data><data key="name">D.Workspace.typespec</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">A type specification (typespec) file in the KBase Interface Description
Language (KIDL).</data></node><node id="D.KBaseSearch.CommandConfig"><data key="typeName">CommandConfig</data><data key="name">D.KBaseSearch.CommandConfig</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.IdMap.IdPair"><data key="typeName">IdPair</data><data key="name">D.IdMap.IdPair</data><data key="moduleName">IdMap</data><data key="nodeType">D</data><data key="comment">A mapping of aliases to the corresponding kbase identifier.

string source_db  - the kbase id of the source
string alias      - the identifier to be mapped to a feature id
string kbase_id - the kbase id of the feature</data></node><node id="D.KBaseBiochem.mapcompound_ref"><data key="typeName">mapcompound_ref</data><data key="name">D.KBaseBiochem.mapcompound_ref</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Reference to a compound object in a metabolic map
@id subws KBaseBiochem.MetabolicMap.compounds.[*].id</data></node><node id="D.ExpressionServices.genome_expression_sample_ids_map"><data key="typeName">genome_expression_sample_ids_map</data><data key="name">D.ExpressionServices.genome_expression_sample_ids_map</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">map between genome ids and a list of samples from that genome in this sample</data></node><node id="D.KBaseCommunities.Abundance2DTableFloat"><data key="typeName">Abundance2DTableFloat</data><data key="name">D.KBaseCommunities.Abundance2DTableFloat</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.ProteinInfo.ipr"><data key="typeName">ipr</data><data key="name">D.ProteinInfo.ipr</data><data key="moduleName">ProteinInfo</data><data key="nodeType">D</data><data key="comment">IPRs are a list of InterPro identifiers.</data></node><node id="M.InvocationService.change_directory"><data key="typeName">change_directory</data><data key="name">M.InvocationService.change_directory</data><data key="moduleName">InvocationService</data><data key="nodeType">M</data><data key="comment">* Change to the given directory. Returns the new cwd.</data></node><node id="M.Workspace.get_object_history"><data key="typeName">get_object_history</data><data key="name">M.Workspace.get_object_history</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Get an object's history. The version argument of the ObjectIdentity is
ignored.</data></node><node id="D.KBaseGwasData.GwasTopVariations"><data key="typeName">GwasTopVariations</data><data key="name">D.KBaseGwasData.GwasTopVariations</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">List of significant snps and pvalues obtained after gwas analysis

    
      source - kbase analysis/public data
      protocol - a brief protocol describing trait measurement
      originator - lab or pi
      trait_ontology_id -  trait ontology of trait
      genome - genome details
      GwasPopulation_obj_id - object id of population
      GwasPopulationVariation_obj_id - object id of the population variation data.
      trait_name - short trait name
      GwasPopulationTrait_obj_id - object id of trait data
      pvaluecutoff - pvalue cut off for snps
      GwasPopulationStructure_obj_id - object id of population structure data. optional
      GwasPopulationKinship_obj_id - object id of population kinship data. optional

      unit_of_measure: measurement units;
     Search indexing: Donot index --&gt; variations, contigs 
     @optional unit_of_measure GwasPopulationStructure_obj_id</data></node><node id="M.AuthIntegration.test_auth_optional"><data key="typeName">test_auth_optional</data><data key="name">M.AuthIntegration.test_auth_optional</data><data key="moduleName">AuthIntegration</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseSearch.reads_ref"><data key="typeName">reads_ref</data><data key="name">D.KBaseSearch.reads_ref</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Reference to a reads file in shock
@id shock</data></node><node id="D.ExpressionServices.external_source_ids"><data key="typeName">external_source_ids</data><data key="name">D.ExpressionServices.external_source_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">list of externalSourceIDs</data></node><node id="D.GenomeAnnotation.pipeline_batch_status"><data key="typeName">pipeline_batch_status</data><data key="name">D.GenomeAnnotation.pipeline_batch_status</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseFBA.ModelReactionProtein"><data key="typeName">ModelReactionProtein</data><data key="name">D.KBaseFBA.ModelReactionProtein</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">ModelReactionProtein object</data></node><node id="D.KBaseFBA.WorkspaceGenomeClassPrediction"><data key="typeName">WorkspaceGenomeClassPrediction</data><data key="name">D.KBaseFBA.WorkspaceGenomeClassPrediction</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseGenomes.source_id"><data key="typeName">source_id</data><data key="name">D.KBaseGenomes.source_id</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Reference to a source_id
@id external</data></node><node id="D.MOTranslation.moLocusId"><data key="typeName">moLocusId</data><data key="name">D.MOTranslation.moLocusId</data><data key="moduleName">MOTranslation</data><data key="nodeType">D</data><data key="comment">moLocusId is a locusId in MicrobesOnline. It is analogous to a fid
in KBase.</data></node><node id="M.GenomeAnnotation.query_classifier_groups"><data key="typeName">query_classifier_groups</data><data key="name">M.GenomeAnnotation.query_classifier_groups</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Query the groups included in the given classifier. This is a
* mapping from the group name to the list of genome IDs included
* in the group. Note that these are genome IDs native to the
* system that created the classifier; currently these are
* SEED genome IDs that may be translated using the
* source IDs on the Genome entity.</data></node><node id="M.UserAndJobState.get_job_info"><data key="typeName">get_job_info</data><data key="name">M.UserAndJobState.get_job_info</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Get information about a job.</data></node><node id="D.MEME.MemeSite"><data key="typeName">MemeSite</data><data key="name">D.MEME.MemeSite</data><data key="moduleName">MEME</data><data key="nodeType">D</data><data key="comment">Represents a particular site from MEME motif description 
string source_sequence_id - ID of sequence where the site was found
int start - position of site start 
float pvalue - site P-value
string left_flank - sequence of left flank
string sequence - sequence of site
string right_flank - sequence of right flank

@optional start pvalue left_flank right_flank</data></node><node id="D.KBaseFile.Handle"><data key="typeName">Handle</data><data key="name">D.KBaseFile.Handle</data><data key="moduleName">KBaseFile</data><data key="nodeType">D</data><data key="comment">A handle for a file stored in Shock.
hid - the id of the handle in the Handle Service that references this
   shock node
id - the id for the shock node
url - the url of the shock server
type - the type of the handle. This should always be ‚Äòshock‚Äô.
file_name - the name of the file
remote_md5 - the md5 digest of the file.
remote_sha1 - the sha1 digest of the file.
    
@optional file_name remote_md5 remote_sha1</data></node><node id="D.KBaseBiochem.modelcompartment_id"><data key="typeName">modelcompartment_id</data><data key="name">D.KBaseBiochem.modelcompartment_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Model compartment ID
@id external</data></node><node id="D.KBaseOntology.Subsystem"><data key="typeName">Subsystem</data><data key="name">D.KBaseOntology.Subsystem</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment">Subsystem object with data on functionally related groups of roles
            
@optional name
@searchable ws_subset id name class subclass type role_refs</data></node><node id="M.Workspace.register_typespec"><data key="typeName">register_typespec</data><data key="name">M.Workspace.register_typespec</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Register a new typespec or recompile a previously registered typespec
with new options.
See the documentation of RegisterTypespecParams for more details.
Also see the release_types function.</data></node><node id="D.PROM.on_off_state"><data key="typeName">on_off_state</data><data key="name">D.PROM.on_off_state</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">Indicates on/off state of a gene, 1=on, -1=off, 0=unknown</data></node><node id="M.Tree.merge_zero_distance_leaves"><data key="typeName">merge_zero_distance_leaves</data><data key="name">M.Tree.merge_zero_distance_leaves</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">Some KBase trees keep information on canonical feature ids, even if they have the same protien sequence
in an alignment.  In these cases, some leaves with identical sequences will have zero distance so that
information on canonical features is maintained.  Often this information is not useful, and a single
example feature or genome is sufficient.  This method will accept a tree in newick format (with distances)
and merge all leaves that have zero distance between them (due to identical sequences), and keep arbitrarily
only one of these leaves.</data></node><node id="M.KBaseExpression.get_expression_samples_titles"><data key="typeName">get_expression_samples_titles</data><data key="name">M.KBaseExpression.get_expression_samples_titles</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a List of SampleIDs, returns a Hash (key : SampleID, value: Title of Sample)</data></node><node id="M.GenomeAnnotation.find_close_neighbors"><data key="typeName">find_close_neighbors</data><data key="name">M.GenomeAnnotation.find_close_neighbors</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.UserProfile.lookup_globus_user"><data key="typeName">lookup_globus_user</data><data key="name">M.UserProfile.lookup_globus_user</data><data key="moduleName">UserProfile</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.ExpressionServices.get_expression_series_designs"><data key="typeName">get_expression_series_designs</data><data key="name">M.ExpressionServices.get_expression_series_designs</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a List of SeriesIDs, returns a Hash (key : SeriesID, value: Design of Series)</data></node><node id="D.KBaseTrees.object_info"><data key="typeName">object_info</data><data key="name">D.KBaseTrees.object_info</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">Information about an object, including user provided metadata.

        obj_id objid - the numerical id of the object.
        obj_name name - the name of the object.
        type_string type - the type of the object.
        timestamp save_date - the save date of the object.
        obj_ver ver - the version of the object.
        username saved_by - the user that saved or copied the object.
        ws_id wsid - the workspace containing the object.
        ws_name workspace - the workspace containing the object.
        string chsum - the md5 checksum of the object.
        int size - the size of the object in bytes.
        usermeta meta - arbitrary user-supplied metadata about
                the object.</data></node><node id="M.UserProfile.filter_users"><data key="typeName">filter_users</data><data key="name">M.UserProfile.filter_users</data><data key="moduleName">UserProfile</data><data key="nodeType">M</data><data key="comment">Returns a list of users matching the filter.  If the 'filter' field
is empty or null, then this will return all Users.  The filter will
match substrings in usernames and realnames.</data></node><node id="D.KBaseTrees.tree"><data key="typeName">tree</data><data key="name">D.KBaseTrees.tree</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">A string representation of a phylogenetic tree.  The format/syntax of the string is
specified by using one of the available typedefs declaring a particular format, such as 'newick_tree',
'phylo_xml_tree' or 'json_tree'.  When a format is not explictily specified, it is possible to return
trees in different formats depending on addtional parameters. Regardless of format, all leaf nodes
in trees built from MSAs are indexed to a specific MSA row.  You can use the appropriate functionality
of the API to replace these IDs with other KBase Ids instead. Internal nodes may or may not be named.
Nodes, depending on the format, may also be annotated with structured data such as bootstrap values and
distances.</data></node><node id="M.GenomeAnnotation.call_features_pyrrolysoprotein"><data key="typeName">call_features_pyrrolysoprotein</data><data key="name">M.GenomeAnnotation.call_features_pyrrolysoprotein</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Given a genome typed object, call pyrrolysoprotein features.</data></node><node id="D.GenomeAnnotation.pipeline_stage"><data key="typeName">pipeline_stage</data><data key="name">D.GenomeAnnotation.pipeline_stage</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseExpression.experimental_unit_ids"><data key="typeName">experimental_unit_ids</data><data key="name">D.KBaseExpression.experimental_unit_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">list of KBase ExperimentalUnit IDs</data></node><node id="D.KmerEval.sequence"><data key="typeName">sequence</data><data key="name">D.KmerEval.sequence</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.ServiceRegistry.get_expiration_interval"><data key="typeName">get_expiration_interval</data><data key="name">M.ServiceRegistry.get_expiration_interval</data><data key="moduleName">ServiceRegistry</data><data key="nodeType">M</data><data key="comment">Get the seconds remaining until the service registration expires.</data></node><node id="D.Workspace.SetWorkspaceDescriptionParams"><data key="typeName">SetWorkspaceDescriptionParams</data><data key="name">D.Workspace.SetWorkspaceDescriptionParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Input parameters for the "set_workspace_description" function.

        One, and only one, of the following is required:
        ws_id id - the numerical ID of the workspace.
        ws_name workspace - name of the workspace or the workspace ID in KBase
                format, e.g. kb|ws.78.
        
        Optional arguments:
        string description - A free-text description of the workspace, 1000
                characters max. Longer strings will be mercilessly and brutally
                truncated. If omitted, the description is set to null.</data></node><node id="D.KBasePhenotypes.phenotypeset_ref"><data key="typeName">phenotypeset_ref</data><data key="name">D.KBasePhenotypes.phenotypeset_ref</data><data key="moduleName">KBasePhenotypes</data><data key="nodeType">D</data><data key="comment">Reference to a PhenotypeSet object
@id ws KBasePhenotypes.PhenotypeSet</data></node><node id="D.UserAndJobState.authed"><data key="typeName">authed</data><data key="name">D.UserAndJobState.authed</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">Specifies whether results returned should be from key/value pairs
set with service authentication (true) or without (false).</data></node><node id="D.ProbabilisticAnnotation.object_type"><data key="typeName">object_type</data><data key="name">D.ProbabilisticAnnotation.object_type</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">A string indicating the type of an object stored in a workspace.</data></node><node id="D.Empty.AHandle"><data key="typeName">AHandle</data><data key="name">D.Empty.AHandle</data><data key="moduleName">Empty</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.NarrativeJobService.boolean"><data key="typeName">boolean</data><data key="name">D.NarrativeJobService.boolean</data><data key="moduleName">NarrativeJobService</data><data key="nodeType">D</data><data key="comment">@range [0,1]</data></node><node id="D.UserAndJobState.Results"><data key="typeName">Results</data><data key="name">D.UserAndJobState.Results</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">A pointer to job results. All arguments are optional. Applications
should use the default shock and workspace urls if omitted.
list&lt;string&gt; shocknodes - the shocknode(s) where the results can be
        found. No more than 1000 characters.
string shockurl - the url of the shock service where the data was
        saved.  No more than 1000 characters.
list&lt;string&gt; workspaceids - the workspace ids where the results can be
        found. No more than 1000 characters.
string workspaceurl - the url of the workspace service where the data
        was saved.  No more than 1000 characters.
list&lt;Result&gt; - a set of job results. This format allows for specifying
        results at multiple server locations and providing a free text
        description of the result.</data></node><node id="D.KBaseFBA.ModelTemplate"><data key="typeName">ModelTemplate</data><data key="name">D.KBaseFBA.ModelTemplate</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">ModelTemplate object holds data on how a model is constructed from an annotation
            
@optional name
@searchable ws_subset id name modelType domain mapping_ref</data></node><node id="M.ERDB_Service.runSQL"><data key="typeName">runSQL</data><data key="name">M.ERDB_Service.runSQL</data><data key="moduleName">ERDB_Service</data><data key="nodeType">M</data><data key="comment">WARNING: this is a function of last resort. Try to do what you need to do with the CDMI client or the
GetAll function first.
Runs a standard SQL query via the ERDB DB hook. Be sure not to code inputs into the SQL string - put them
in the parameter list and use ? placeholders in the SQL. Otherwise you risk SQL injection. If you don't
understand this paragraph, do not use this function.
Note that most likely, the account for this server only has select privileges and cannot modify the
database.</data></node><node id="D.NarrativeJobService.app_state"><data key="typeName">app_state</data><data key="name">D.NarrativeJobService.app_state</data><data key="moduleName">NarrativeJobService</data><data key="nodeType">D</data><data key="comment">job_id - id of job running app
job_state - 'queued', 'running', 'completed', or 'error'
running_step_id - id of step currently running
step_outputs - mapping step_id to stdout text produced by step, only for completed or errored steps
step_outputs - mapping step_id to stderr text produced by step, only for completed or errored steps
step_job_ids - mapping from step_id to job_id.</data></node><node id="D.KBaseOntology.role_id"><data key="typeName">role_id</data><data key="name">D.KBaseOntology.role_id</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment">ID of role object
@id external</data></node><node id="D.KBaseSearch.contigset_ref"><data key="typeName">contigset_ref</data><data key="name">D.KBaseSearch.contigset_ref</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Reference to a ContigSet object containing the contigs for this genome in the workspace
    @id ws KBaseSearch.ContigSet</data></node><node id="D.KBaseTrees.phylo_xml_tree"><data key="typeName">phylo_xml_tree</data><data key="name">D.KBaseTrees.phylo_xml_tree</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">Trees are represented in KBase by default in newick format (http://en.wikipedia.org/wiki/Newick_format),
but can optionally be converted to the more verbose phyloXML format, which is useful for compatibility or
when additional information/annotations decorate the tree.</data></node><node id="D.KBaseRegulation.regulome_id"><data key="typeName">regulome_id</data><data key="name">D.KBaseRegulation.regulome_id</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents regulome identifier</data></node><node id="D.ERDB_Service.fieldValue"><data key="typeName">fieldValue</data><data key="name">D.ERDB_Service.fieldValue</data><data key="moduleName">ERDB_Service</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Cmonkey.CmonkeyMotif"><data key="typeName">CmonkeyMotif</data><data key="name">D.Cmonkey.CmonkeyMotif</data><data key="moduleName">Cmonkey</data><data key="nodeType">D</data><data key="comment">Represents motif generated by cMonkey with a list of hits in upstream sequences
string id - identifier of MotifCmonkey
string seq_type - type of sequence
int pssm_id - number of motif
float evalue - motif e-value
list&lt;list&lt;float&gt;&gt; pssm_rows - PSSM 
list&lt;MEME.HitMast&gt; hits - hits (motif annotations)
list&lt;MEME.SiteMeme&gt; sites - training set

@optional seq_type pssm_id evalue pssm_rows hits sites</data></node><node id="D.KBaseGenomes.subsystem_data"><data key="typeName">subsystem_data</data><data key="name">D.KBaseGenomes.subsystem_data</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Structure for subsystem data (from CDMI API)</data></node><node id="D.UserAndJobState.job_info"><data key="typeName">job_info</data><data key="name">D.UserAndJobState.job_info</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">Information about a job.</data></node><node id="D.Workspace.ListAllTypesParams"><data key="typeName">ListAllTypesParams</data><data key="name">D.Workspace.ListAllTypesParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Parameters for list_all_types function.

Optional arguments:
boolean with_empty_modules - include empty module names, optional flag,
        default value is false.</data></node><node id="M.RDPTools.classify_check"><data key="typeName">classify_check</data><data key="name">M.RDPTools.classify_check</data><data key="moduleName">RDPTools</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.GWAS.genelist_to_networks"><data key="typeName">genelist_to_networks</data><data key="name">M.GWAS.genelist_to_networks</data><data key="moduleName">GWAS</data><data key="nodeType">M</data><data key="comment">list of genes to Network</data></node><node id="D.AskKB.answer"><data key="typeName">answer</data><data key="name">D.AskKB.answer</data><data key="moduleName">AskKB</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.KmerAnnotationByFigfam.annotate_proteins"><data key="typeName">annotate_proteins</data><data key="name">M.KmerAnnotationByFigfam.annotate_proteins</data><data key="moduleName">KmerAnnotationByFigfam</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseRegulation.Genome"><data key="typeName">Genome</data><data key="name">D.KBaseRegulation.Genome</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents a genome
genome_id genome_id - genome identifier
genome_ref genome_ref - workspace reference of a genome object                 
string genome_name - genome name
int ncbi_taxonomy_id - NCBI taxonomy id

@optional genome_id genome_ref ncbi_taxonomy_id</data></node><node id="D.KBaseGenomes.ProteinFamily"><data key="typeName">ProteinFamily</data><data key="name">D.KBaseGenomes.ProteinFamily</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Structure for a protein family
        @optional query_begin query_end subject_begin subject_end score evalue subject_description release_version</data></node><node id="D.MAK.MAKParameters"><data key="typeName">MAKParameters</data><data key="name">D.MAK.MAKParameters</data><data key="moduleName">MAK</data><data key="nodeType">D</data><data key="comment">MAK algorithm and discovery strategy parameters 
string taxon - taxonomy id
string genome_id - kbase genome id
genome_ws_ref genome_ref - ws genome object reference
float min_raw_bicluster_score - minimum raw bicluster score
float max_bicluster_overlap - maximum allowed bicluster overlap
float max_enrich_pvalue - maximum allowed enrichment p-value
            int rounds - number of rounds in discovery strategy
            list&lt;string&gt; rounds_move_sequences - 
            int refine - refinement y/n 
            string linkage - complete, single, mean etc.
            string null_data_path - path to null distribution files
            string Rcodepath - path to R code (Miner.R)
            string Rdatapath - path to Rdata object
            inputdata_ws_ref input_ref - reference to FloatDataTable
            list&lt;MAKInputData&gt; inputs - objects for MAK input data

@optional input_ref

            @searchable ws_subset</data></node><node id="D.KBaseExpression.sample_id"><data key="typeName">sample_id</data><data key="name">D.KBaseExpression.sample_id</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">KBase Sample ID for the sample</data></node><node id="M.UserAndJobState.set_state"><data key="typeName">set_state</data><data key="name">M.UserAndJobState.set_state</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Set the state of a key for a service without service authentication.</data></node><node id="M.GenomeAnnotation.call_features_rRNA_SEED"><data key="typeName">call_features_rRNA_SEED</data><data key="name">M.GenomeAnnotation.call_features_rRNA_SEED</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Given a genome typed object, find instances of ribosomal RNAs in
* the genome.
*
* The types parameter is used to select the types of RNAs to
* call. It is a list of strings where each value is one of
*
*    "5S"
*    "SSU"
*    "LSU"
*
* or "ALL" to choose all available rRNA types.</data></node><node id="M.ServiceRegistry.is_alive"><data key="typeName">is_alive</data><data key="name">M.ServiceRegistry.is_alive</data><data key="moduleName">ServiceRegistry</data><data key="nodeType">M</data><data key="comment">Is the service alive. The is_alive function will only verify that
the end-point can be reached over the WAN. The service_url must include
the port (protocol://hosthame:port). If no protocol is provided, then
http is assumed.</data></node><node id="M.ExpressionServices.get_expression_samples_original_log2_medians"><data key="typeName">get_expression_samples_original_log2_medians</data><data key="name">M.ExpressionServices.get_expression_samples_original_log2_medians</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a List of SampleIDs, returns a Hash (key : SampleID, value: OriginalLog2Median of Sample)</data></node><node id="D.KBaseGenomes.Contig_id"><data key="typeName">Contig_id</data><data key="name">D.KBaseGenomes.Contig_id</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">ContigSet contig ID
@id external</data></node><node id="D.MOTranslation.result"><data key="typeName">result</data><data key="name">D.MOTranslation.result</data><data key="moduleName">MOTranslation</data><data key="nodeType">D</data><data key="comment">A simple structure which returns the best matching FID to a given query (see query_sequence) and attaches
a short status string indicating how the match was made, or which consoles you after a match could not
be made.

        fid best_match - the feature ID of a KBase feature that offers the best mapping to your query
        status status  - a short note explaining how the match was made</data></node><node id="D.KBaseExpression.Strain"><data key="typeName">Strain</data><data key="name">D.KBaseExpression.Strain</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Data structure for Strain  (TEMPORARY WORKSPACE TYPED OBJECT SHOULD BE HANDLED IN THE FUTURE IN WORKSPACE COMMON)</data></node><node id="M.GenomeAnnotation.enumerate_special_protein_databases"><data key="typeName">enumerate_special_protein_databases</data><data key="name">M.GenomeAnnotation.enumerate_special_protein_databases</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseFBA.ClassifierTrainingSet"><data key="typeName">ClassifierTrainingSet</data><data key="name">D.KBaseFBA.ClassifierTrainingSet</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">@optional attribute_type source description</data></node><node id="D.Ontology.GoDesc"><data key="typeName">GoDesc</data><data key="name">D.Ontology.GoDesc</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">GoDesc : Human readable text description of the corresponding GO term</data></node><node id="D.ProbabilisticAnnotation.RxnProbs"><data key="typeName">RxnProbs</data><data key="name">D.ProbabilisticAnnotation.RxnProbs</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">Object to hold reaction probabilities for a genome.

        genome_id genome - ID of the genome the reaction probabilities was built for
        list&lt;reaction_probability&gt; reaction_probabilities - list of reaction probabilities</data></node><node id="D.KBaseGwasData.GwasPopulationKinship_obj_id"><data key="typeName">GwasPopulationKinship_obj_id</data><data key="name">D.KBaseGwasData.GwasPopulationKinship_obj_id</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">A reference to GWAS population kinship object
     @id ws  KBaseGwasData.GwasPopulationKinship</data></node><node id="M.KBaseExpression.get_top_changers"><data key="typeName">get_top_changers</data><data key="name">M.KBaseExpression.get_top_changers</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">Takes in comparison results. Direction must equal 'up', 'down', or 'both'.  Count is the number of changers returned in each direction.
returns SampleComparisonMapping {numerator_sample_id(or label)-&gt;{denominator_sample_id(or label)-&gt;{feature_id(or label) -&gt; log2Ratio (note that the features listed will be limited to the top changers)}}}</data></node><node id="D.KBaseTrees.ws_alignment_id"><data key="typeName">ws_alignment_id</data><data key="name">D.KBaseTrees.ws_alignment_id</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">###  KBaseTrees.ConcatMSA KBaseTrees.MS
        @id ws KBaseTrees.MSA</data></node><node id="D.ProbabilisticAnnotation.AnnotateParams"><data key="typeName">AnnotateParams</data><data key="name">D.ProbabilisticAnnotation.AnnotateParams</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">Input parameters for the "annotate" function.

       genome_id genome - ID of Genome object
       workspace_id genome_workspace - ID of workspace where Genome object is stored
       probanno_id probanno - ID of ProbAnno object
       workspace_id probanno_workspace - ID workspace where ProbAnno object is saved
       bool overwrite - True to overwrite existing ProbAnno object with same name
           bool verbose - True to print verbose messages</data></node><node id="D.KBaseGenomes.OrthologFamily"><data key="typeName">OrthologFamily</data><data key="name">D.KBaseGenomes.OrthologFamily</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">OrthologFamily object: this object holds all data for a single ortholog family in a metagenome

@optional type function md5 protein_translation</data></node><node id="D.KBaseTrees.ConstructTreeForAlignmentParams"><data key="typeName">ConstructTreeForAlignmentParams</data><data key="name">D.KBaseTrees.ConstructTreeForAlignmentParams</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">Input data type for construct_tree_for_alignment method. Method produces object of Tree type.

msa_ref - (required) reference to MSA input object.
        tree_method - (optional) tree construction program, one of 'Clustal' (Neighbor-joining approach) or 
'FastTree' (where Maximum likelihood is used), (default is 'Clustal').
        min_nongap_percentage_for_trim - (optional) minimum percentage of non-gapped positions in alignment column,
if you define this parameter in 50, then columns having less than half non-gapped letters are trimmed
(default value is 0 - it means no trimming at all). 
        out_workspace - (required) the workspace to deposit the completed tree
        out_tree_id - (optional) the name of the newly constructed tree (will be random if not present or null)</data></node><node id="D.KBaseCommunities.Table2DFloat"><data key="typeName">Table2DFloat</data><data key="name">D.KBaseCommunities.Table2DFloat</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.IdMap.longest_cds_from_locus"><data key="typeName">longest_cds_from_locus</data><data key="name">M.IdMap.longest_cds_from_locus</data><data key="moduleName">IdMap</data><data key="nodeType">M</data><data key="comment">Returns a mapping of locus feature id to cds feature id.</data></node><node id="D.MAK.StringDataTableContainer"><data key="typeName">StringDataTableContainer</data><data key="name">D.MAK.StringDataTableContainer</data><data key="moduleName">MAK</data><data key="nodeType">D</data><data key="comment">Represents a list of data tables in a container
string id - identifier for container
string name - name or title to display in a plot etc.
list&lt;StringDataTable&gt; - data table array
map&lt;string, string&gt; id_index - map of table ids to array positions

@optional id
@optional name
@optional id_index</data></node><node id="D.Communities.Collection"><data key="typeName">Collection</data><data key="name">D.Communities.Collection</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.UserAndJobState.username"><data key="typeName">username</data><data key="name">D.UserAndJobState.username</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">Login name of a KBase user account.</data></node><node id="D.KBaseTrees.tree_node_id"><data key="typeName">tree_node_id</data><data key="name">D.KBaseTrees.tree_node_id</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.ProbabilisticAnnotation.function_probability"><data key="typeName">function_probability</data><data key="name">D.ProbabilisticAnnotation.function_probability</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">A function_probability is a (annotation, probability) pair associated with a gene
An annotation is a "///"-delimited list of roles that could be associated with that gene.</data></node><node id="D.MEME.MastRunParameters"><data key="typeName">MastRunParameters</data><data key="name">D.MEME.MastRunParameters</data><data key="moduleName">MEME</data><data key="nodeType">D</data><data key="comment">Contains parameters of a MAST run
meme_pspm_collection_ref query_ref - query motifs for MAST run
sequence_set_ref target_ref - target sequences for MAST run
string pspm_id - KBase ID of a MemePSPM from the query collection that will be used. When empty string provided, all motifs in the query collection will be used
float mt - value of mt parameter for MAST run

@optional query_ref target_ref pspm_id mt</data></node><node id="D.KBaseExpression.shock_url"><data key="typeName">shock_url</data><data key="name">D.KBaseExpression.shock_url</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">A reference to RNASeq fastq  object on shock</data></node><node id="M.KmerAnnotationByFigfam.estimate_closest_genomes"><data key="typeName">estimate_closest_genomes</data><data key="name">M.KmerAnnotationByFigfam.estimate_closest_genomes</data><data key="moduleName">KmerAnnotationByFigfam</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.MEME.MastRunResult"><data key="typeName">MastRunResult</data><data key="name">D.MEME.MastRunResult</data><data key="moduleName">MEME</data><data key="nodeType">D</data><data key="comment">Represents result of a single MAST run
string id - KBase ID of MastRunResult
string timestamp - timestamp for creation time of MastRunResult
MastRunParameters params - run parameters
list&lt;MastHit&gt; hits - A list of all hits found by MAST

@optional timestamp hits</data></node><node id="D.ExpressionServices.log2_ratio"><data key="typeName">log2_ratio</data><data key="name">D.ExpressionServices.log2_ratio</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Log2Ratio Log2Level of sample over log2Level of another sample for a given feature.  
Note if the Ratio is consumed by On Off Call function it will have 1(on), 0(unknown), -1(off) for its values</data></node><node id="M.InvocationService.get_tutorial_text"><data key="typeName">get_tutorial_text</data><data key="name">M.InvocationService.get_tutorial_text</data><data key="moduleName">InvocationService</data><data key="nodeType">M</data><data key="comment">* Retrieve the tutorial text for the given tutorial step, along with the
* the step numbers for the previous and next steps in the tutorial.</data></node><node id="D.KBaseExpression.ontology_id"><data key="typeName">ontology_id</data><data key="name">D.KBaseExpression.ontology_id</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Kbase OntologyID</data></node><node id="D.Communities.StatsQC"><data key="typeName">StatsQC</data><data key="name">D.Communities.StatsQC</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.ExpressionServices.get_expression_data_by_feature_ids"><data key="typeName">get_expression_data_by_feature_ids</data><data key="name">M.ExpressionServices.get_expression_data_by_feature_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a list of FeatureIDs, a SampleType ( controlled vocabulary : microarray, RNA-Seq, qPCR, or proteomics) 
and an int indicating WildType Only (1 = true, 0 = false) returns a FeatureSampleMeasurementMapping: {featureID-&gt;{sample_id-&gt;measurement}}</data></node><node id="M.GenomeAnnotation.set_metadata"><data key="typeName">set_metadata</data><data key="name">M.GenomeAnnotation.set_metadata</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Modify genome metadata.</data></node><node id="D.KBasePhenotypes.phenotype_ref"><data key="typeName">phenotype_ref</data><data key="name">D.KBasePhenotypes.phenotype_ref</data><data key="moduleName">KBasePhenotypes</data><data key="nodeType">D</data><data key="comment">Reference to a PhenotypeSet object
@id subws KBasePhenotypes.PhenotypeSet.phenotypes.[*].id</data></node><node id="D.KBaseBiochem.MetabolicMap"><data key="typeName">MetabolicMap</data><data key="name">D.KBaseBiochem.MetabolicMap</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">MetabolicMap object

@optional description link
@metadata ws source_id as Source ID
    @metadata ws source as Source
    @metadata ws name as Name
    @metadata ws length(reactions) as Number reactions
    @metadata ws length(compounds) as Number compounds</data></node><node id="D.KBaseGwasData.traitUnit"><data key="typeName">traitUnit</data><data key="name">D.KBaseGwasData.traitUnit</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">Trait Unit</data></node><node id="D.KBaseAssembly.SingleEndLibrary"><data key="typeName">SingleEndLibrary</data><data key="name">D.KBaseAssembly.SingleEndLibrary</data><data key="moduleName">KBaseAssembly</data><data key="nodeType">D</data><data key="comment">@metadata ws handle.file_name
@metadata ws handle.type</data></node><node id="D.KBaseBiochem.MapCompound"><data key="typeName">MapCompound</data><data key="name">D.KBaseBiochem.MapCompound</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">MapCompound object

@optional link label_x label_y</data></node><node id="D.KBaseGwasData.shock_property"><data key="typeName">shock_property</data><data key="name">D.KBaseGwasData.shock_property</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">shock_property for large datasets that need not be indexed eg. variation but needed for gwas analysis or landing pages are kept in shock.

     shock_url - shock ip address along with port eg. http://140.221.84.236:8000
     shock_id - shock id of the data</data></node><node id="D.Ontology.GoID"><data key="typeName">GoID</data><data key="name">D.Ontology.GoID</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">GoID : Unique GO term id (Source: external Gene Ontology database - http://www.geneontology.org/)</data></node><node id="M.MOTranslation.proteins_to_moLocusIds"><data key="typeName">proteins_to_moLocusIds</data><data key="name">M.MOTranslation.proteins_to_moLocusIds</data><data key="moduleName">MOTranslation</data><data key="nodeType">M</data><data key="comment">proteins_to_moLocusIds translates a list of proteins (MD5s) into
MicrobesOnline locusIds.</data></node><node id="M.UserAndJobState.unshare_job"><data key="typeName">unshare_job</data><data key="name">M.UserAndJobState.unshare_job</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Stop sharing a job. Removing sharing from a user that the job is not
shared with or the job owner has no effect.</data></node><node id="D.KBaseExpression.ExpressionPlatform"><data key="typeName">ExpressionPlatform</data><data key="name">D.KBaseExpression.ExpressionPlatform</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Data structure for the workspace expression platform.  The ExpressionPlatform typed object.
source_id defaults to id if not set, but typically referes to a GPL if the data is from GEO.

@optional strain

@searchable ws_subset source_id id genome_id title technology
@searchable ws_subset strain.genome_id  strain.reference_strain strain.wild_type</data></node><node id="M.PROM.get_expression_data_by_genome"><data key="typeName">get_expression_data_by_genome</data><data key="name">M.PROM.get_expression_data_by_genome</data><data key="moduleName">PROM</data><data key="nodeType">M</data><data key="comment">This method fetches all gene expression data available in the CDS that is associated with the given genome id.  It then
constructs an expression_data_collection object in the specified workspace.  The method returns the ID of the expression
data collection in the workspace, along with a status message that provides details on what was retrieved and if anything
failed.  If the method does fail, or if there is no data for the given genome, then no expression data collection is
created and no ID is returned.

Note 1: this method currently can take a long time to complete if there are many expression data sets in the CDS
Note 2: the current implementation relies on on/off calls stored in the CDM (correct as of 1/2013).  This will almost
certainly change, at which point logic for making on/off calls will be required as input
Note 3: this method should be migrated to the expression service, which currently does not exist
Note 4: this method should use the type compiler auth, but for simplicity  we now just pass an auth token directly.</data></node><node id="M.MOTranslation.moTaxonomyId_to_genomes"><data key="typeName">moTaxonomyId_to_genomes</data><data key="name">M.MOTranslation.moTaxonomyId_to_genomes</data><data key="moduleName">MOTranslation</data><data key="nodeType">M</data><data key="comment">A method to map a MicrobesOnline genome (identified by taxonomy Id) to the set of identical kbase genomes based on an MD5 checksum
of the contig sequences.  If you already know your MD5 value for your genome (computed in the KBase way), then you should avoid this
method and directly query the CDS using the CDMI API, which includes a method 'md5s_to_genomes'.</data></node><node id="D.KBaseRegulation.operon_id"><data key="typeName">operon_id</data><data key="name">D.KBaseRegulation.operon_id</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents operon identifier</data></node><node id="D.GenomeAnnotation.kmer_v2_parameters"><data key="typeName">kmer_v2_parameters</data><data key="name">D.GenomeAnnotation.kmer_v2_parameters</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseSearch.evidence_code"><data key="typeName">evidence_code</data><data key="name">D.KBaseSearch.evidence_code</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">An evidence code is a string (in the future, from a controlled vocabulary)</data></node><node id="D.MOTranslation.protein_id"><data key="typeName">protein_id</data><data key="name">D.MOTranslation.protein_id</data><data key="moduleName">MOTranslation</data><data key="nodeType">D</data><data key="comment">internally consistant and unique id of a protein (could just be integers 0..n), necessary
for returning results</data></node><node id="M.GenomeAnnotation.update_functions"><data key="typeName">update_functions</data><data key="name">M.GenomeAnnotation.update_functions</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.MOTranslation.moTaxonomyId"><data key="typeName">moTaxonomyId</data><data key="name">D.MOTranslation.moTaxonomyId</data><data key="moduleName">MOTranslation</data><data key="nodeType">D</data><data key="comment">moTaxonomyId is a taxonomyId in MicrobesOnline.  It is somewhat analogous
to a genome kbId in KBase.  It generally stores the NCBI taxonomy ID,
though sometimes can store an internal identifier instead.</data></node><node id="D.KBasePhenotypes.compound_ref"><data key="typeName">compound_ref</data><data key="name">D.KBasePhenotypes.compound_ref</data><data key="moduleName">KBasePhenotypes</data><data key="nodeType">D</data><data key="comment">Reference to a compound object
@id subws KBaseBiochem.Biochemistry.compounds.[*].id</data></node><node id="M.InvocationService.put_file"><data key="typeName">put_file</data><data key="name">M.InvocationService.put_file</data><data key="moduleName">InvocationService</data><data key="nodeType">M</data><data key="comment">* Write contents to the given file.</data></node><node id="D.ExpressionServices.GenomeDataGSM"><data key="typeName">GenomeDataGSM</data><data key="name">D.ExpressionServices.GenomeDataGSM</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Data structure that has the GSM data, warnings, errors and originalLog2Median for that GSM and Genome ID combination</data></node><node id="D.KBaseExpression.genome_ids"><data key="typeName">genome_ids</data><data key="name">D.KBaseExpression.genome_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">list of KBase GenomeIDs</data></node><node id="M.NarrativeJobService.suspend_app"><data key="typeName">suspend_app</data><data key="name">M.NarrativeJobService.suspend_app</data><data key="moduleName">NarrativeJobService</data><data key="nodeType">M</data><data key="comment">status - 'success' or 'failure' of action</data></node><node id="D.KBaseCommon.SourceInfo"><data key="typeName">SourceInfo</data><data key="name">D.KBaseCommon.SourceInfo</data><data key="moduleName">KBaseCommon</data><data key="nodeType">D</data><data key="comment">Information about the source of a piece of data.
source - the name of the source (e.g. NCBI, JGI, Swiss-Prot)
source_id - the ID of the data at the source
project_id - the ID of a project encompassing the data at the source

@optional source source_id project_id</data></node><node id="D.KBaseExpression.FloatDataTable"><data key="typeName">FloatDataTable</data><data key="name">D.KBaseExpression.FloatDataTable</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Represents data for a single data table, convention is biological features on y-axis and samples etc. on x
string id - identifier for data table
string name - name or title to display in a plot etc.
list&lt;string&gt; row_ids - kb ids for the objects
list&lt;string&gt; row_labels - label text to display
list&lt;string&gt; row_groups - group labels for row
list&lt;string&gt; row_groups_ids - kb ids for group objects
list&lt;string&gt; column_ids - kb ids for the objects
list&lt;string&gt; column_labels - label text to display
list&lt;string&gt; column_groups - group labels for columns
list&lt;string&gt; column_groups_ids - kb ids for group objects
list&lt;list&lt;float&gt;&gt; data - a list of rows of floats, non-numeric values represented as 'null'
@optional id
@optional name
@optional row_ids
@optional row_groups
@optional row_groups_ids
@optional column_ids
@optional column_groups
@optional column_groups_ids</data></node><node id="D.KBasePPI.InteractionDatasetID"><data key="typeName">InteractionDatasetID</data><data key="name">D.KBasePPI.InteractionDatasetID</data><data key="moduleName">KBasePPI</data><data key="nodeType">D</data><data key="comment">@id kb</data></node><node id="D.KBaseFBA.FBACompoundVariable"><data key="typeName">FBACompoundVariable</data><data key="name">D.KBaseFBA.FBACompoundVariable</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">FBACompoundVariable object</data></node><node id="M.NarrativeJobService.resume_app"><data key="typeName">resume_app</data><data key="name">M.NarrativeJobService.resume_app</data><data key="moduleName">NarrativeJobService</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.KBaseDataImport.ver"><data key="typeName">ver</data><data key="name">M.KBaseDataImport.ver</data><data key="moduleName">KBaseDataImport</data><data key="nodeType">M</data><data key="comment">Returns the current running version of the NarrativeMethodStore.</data></node><node id="D.GWAS.GeneList2NetworksParams"><data key="typeName">GeneList2NetworksParams</data><data key="name">D.GWAS.GeneList2NetworksParams</data><data key="moduleName">GWAS</data><data key="nodeType">D</data><data key="comment">inobj_id is the list of kb feature ids comma separated</data></node><node id="D.Ontology.evidence_code"><data key="typeName">evidence_code</data><data key="name">D.Ontology.evidence_code</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">Evidence code indicates how the annotation to a particular term is supported. 
The list of evidence codes includes Experimental, Computational Analysis, Author statement, Curator statement, Automatically assigned and Obsolete evidence codes. This list will be useful in selecting the correct evidence code for an annotation. The details are given below: 

+  Experimental Evidence Codes
EXP: Inferred from Experiment
IDA: Inferred from Direct Assay
IPI: Inferred from Physical Interaction
IMP: Inferred from Mutant Phenotype
IGI: Inferred from Genetic Interaction
IEP: Inferred from Expression Pattern
    
+ Computational Analysis Evidence Codes
ISS: Inferred from Sequence or Structural Similarity
ISO: Inferred from Sequence Orthology
ISA: Inferred from Sequence Alignment
ISM: Inferred from Sequence Model
IGC: Inferred from Genomic Context
IBA: Inferred from Biological aspect of Ancestor
IBD: Inferred from Biological aspect of Descendant
IKR: Inferred from Key Residues
IRD: Inferred from Rapid Divergence
RCA: inferred from Reviewed Computational Analysis
    
+ Author Statement Evidence Codes
TAS: Traceable Author Statement
NAS: Non-traceable Author Statement
    
+ Curator Statement Evidence Codes
IC: Inferred by Curator
ND: No biological Data available
    
+ Automatically-assigned Evidence Codes
IEA: Inferred from Electronic Annotation
    
+ Obsolete Evidence Codes
NR: Not Recorded</data></node><node id="D.KBaseGwasData.kinshipUnit"><data key="typeName">kinshipUnit</data><data key="name">D.KBaseGwasData.kinshipUnit</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Ontology.GoTermInfoList"><data key="typeName">GoTermInfoList</data><data key="name">D.Ontology.GoTermInfoList</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.GenomeAnnotation.genome_ids_to_genomes"><data key="typeName">genome_ids_to_genomes</data><data key="name">M.GenomeAnnotation.genome_ids_to_genomes</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Given one or more Central Store genome IDs, convert them into genome objects.</data></node><node id="D.ProteinInfo.Hit"><data key="typeName">Hit</data><data key="name">D.ProteinInfo.Hit</data><data key="moduleName">ProteinInfo</data><data key="nodeType">D</data><data key="comment">A Hit is a description of a match to another object (a fid,
a gene family, an HMM).  It is a structure with the following
fields:
        id: the common identifier of the object (e.g., a fid, an HMM accession)
        subject_db: the source database of the original hit (e.g., KBase for fids, TIGRFam, Pfam, COG)
        description: a human-readable textual description of the object (might be empty)
        query_begin: the start of the hit in the input gene sequence
        query_end: the end of the hit in the input gene sequence
        subject_begin: the start of the hit in the object gene sequence
        subject_end: the end of the hit in the object gene sequence
        score: the score (if provided) of the hit to the object
        evalue: the evalue (if provided) of the hit to the object</data></node><node id="M.Tree.get_alignment_data"><data key="typeName">get_alignment_data</data><data key="name">M.Tree.get_alignment_data</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">Get meta data associated with each of the trees indicated in the list by tree id.  Note that some meta
data may not be available for trees which are not built from alignments.  Also note that this method
computes the number of nodes and leaves for each tree, so may be slow for very large trees or very long
lists.  If you do not need this full meta information structure, it may be faster to directly query the
CDS for just the field you need using the CDMI.</data></node><node id="D.ExpressionServices.ExpressionPlatform"><data key="typeName">ExpressionPlatform</data><data key="name">D.ExpressionServices.ExpressionPlatform</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Data structure for the workspace expression platform.  The ExpressionPlatform typed object.
source_id defaults to id if not set, but typically referes to a GPL if the data is from GEO.

@optional strain

@searchable ws_subset source_id id genome_id title technology
@searchable ws_subset strain.genome_id  strain.reference_strain strain.wild_type</data></node><node id="M.GenomeAnnotation.genomeTO_to_reconstructionTO"><data key="typeName">genomeTO_to_reconstructionTO</data><data key="name">M.GenomeAnnotation.genomeTO_to_reconstructionTO</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseCommon.source_id"><data key="typeName">source_id</data><data key="name">D.KBaseCommon.source_id</data><data key="moduleName">KBaseCommon</data><data key="nodeType">D</data><data key="comment">An ID used for a piece of data at its source.
@id external</data></node><node id="D.KBaseRegulation.Regulon"><data key="typeName">Regulon</data><data key="name">D.KBaseRegulation.Regulon</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents regulon
regulon_id regulon_id - identifier of regulon
Regulator regulator - provides general information about orthologous group of transcription factor or RNA regualtory element controlling genes of this regulon 
list&lt;Effector&gt; effectors - list of effectors                
list&lt;TranscriptionFactor&gt; tfs - transcription factors controlling genes of this regulon
list&lt;RegulatedOperon&gt; operons - list of regulated operons
list&lt;Evidence&gt; evidesnces - list of evidences for the regulon


@optional tfs regulator effectors evidesnces</data></node><node id="D.KBaseFBA.ETC"><data key="typeName">ETC</data><data key="name">D.KBaseFBA.ETC</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">ElectronTransportChains (ETC) object</data></node><node id="M.KBaseTrees.merge_zero_distance_leaves"><data key="typeName">merge_zero_distance_leaves</data><data key="name">M.KBaseTrees.merge_zero_distance_leaves</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Some KBase trees keep information on canonical feature ids, even if they have the same protien sequence
in an alignment.  In these cases, some leaves with identical sequences will have zero distance so that
information on canonical features is maintained.  Often this information is not useful, and a single
example feature or genome is sufficient.  This method will accept a tree in newick format (with distances)
and merge all leaves that have zero distance between them (due to identical sequences), and keep arbitrarily
only one of these leaves.</data></node><node id="D.KBaseRegulation.Regulog"><data key="typeName">Regulog</data><data key="name">D.KBaseRegulation.Regulog</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents regulog - collection of regulons controlled by orthologous regulators, typically in a tight taxonomic group
regulog_id regulog_id - identifier of a regulog
Regulator regulator - provides general information about orthologous group of transcription factor or RNA regualtory element controlling genes of regulons comprising this regulog
list&lt;regulon_ref&gt; regulon_refs - workspace references to regulons</data></node><node id="D.Cmonkey.CmonkeyCluster"><data key="typeName">CmonkeyCluster</data><data key="name">D.Cmonkey.CmonkeyCluster</data><data key="moduleName">Cmonkey</data><data key="nodeType">D</data><data key="comment">Represents bicluster generated by cMonkey
string id - identifier of bicluster
float residual - residual
list&lt;expression_sample_ws_id&gt; sample_ws_ids - list of experimental conditions 
list&lt;gene_id&gt; gene_ids - list of genes from bicluster
list&lt;CmonkeyMotif&gt; motifs - list of motifs identified for the bicluster, converted to MEME format

@optional motifs</data></node><node id="D.KBaseBiochem.maplink_ref"><data key="typeName">maplink_ref</data><data key="name">D.KBaseBiochem.maplink_ref</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Reference to a compound object in a metabolic map
@id subws KBaseBiochem.MetabolicMap.linkedmaps.[*].id</data></node><node id="M.TaxonomyTranslation.get_all_names_by_name"><data key="typeName">get_all_names_by_name</data><data key="name">M.TaxonomyTranslation.get_all_names_by_name</data><data key="moduleName">TaxonomyTranslation</data><data key="nodeType">M</data><data key="comment">Returns a mapping between tax_id and a list of all associated names for a given name.</data></node><node id="M.GenomeAnnotation.call_RNAs"><data key="typeName">call_RNAs</data><data key="name">M.GenomeAnnotation.call_RNAs</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Given a genome typed object, find instances of all RNAs we currently
* have support for detecting.</data></node><node id="D.KBaseFBA.ModelGapgen"><data key="typeName">ModelGapgen</data><data key="name">D.KBaseFBA.ModelGapgen</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">ModelGapgen object

@optional integrated_solution
@optional fba_ref
@optional gapgen_ref</data></node><node id="D.KBaseAssembly.HandleId"><data key="typeName">HandleId</data><data key="name">D.KBaseAssembly.HandleId</data><data key="moduleName">KBaseAssembly</data><data key="nodeType">D</data><data key="comment">@id handle</data></node><node id="D.KBaseSearch.feature_type"><data key="typeName">feature_type</data><data key="name">D.KBaseSearch.feature_type</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Type of a genome feature with possible values peg, rna</data></node><node id="D.GenomeAnnotation.contig"><data key="typeName">contig</data><data key="name">D.GenomeAnnotation.contig</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment">Data for DNA contig</data></node><node id="D.BAMBI.BambiSite"><data key="typeName">BambiSite</data><data key="name">D.BAMBI.BambiSite</data><data key="moduleName">BAMBI</data><data key="nodeType">D</data><data key="comment">Represents a particular site from BAMBI motif prediction 
string source_sequence_id - ID of sequence where the site was found
int start - position of site start 
string left_flank - sequence of left flank
string right_flank - sequence of right flank
string sequence - sequence of site

@optional left_flank right_flank</data></node><node id="M.UserProfile.update_user_profile"><data key="typeName">update_user_profile</data><data key="name">M.UserProfile.update_user_profile</data><data key="moduleName">UserProfile</data><data key="nodeType">M</data><data key="comment">Update the UserProfile for the user indicated in the User field of the UserProfile
object.  This operation can only be performed if authenticated as the user in
the UserProfile or as the admin account of this service.

If the profile does not exist, one will be created.  If it does already exist,
then the specified top-level fields in profile will be updated.

todo: add some way to remove fields.  Fields in profile can only be modified or added.</data></node><node id="D.KBaseExpression.contact_people"><data key="typeName">contact_people</data><data key="name">D.KBaseExpression.contact_people</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Mapping between key : ContactEmail and value : ContactPerson Data Structure</data></node><node id="D.KBasePhenotypes.compound_id"><data key="typeName">compound_id</data><data key="name">D.KBasePhenotypes.compound_id</data><data key="moduleName">KBasePhenotypes</data><data key="nodeType">D</data><data key="comment">Model compound ID
@id external</data></node><node id="D.Communities.Metadata"><data key="typeName">Metadata</data><data key="name">D.Communities.Metadata</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment">Metadata fields, for e.g metageome
@optional type</data></node><node id="D.KBaseExpression.gse_errors"><data key="typeName">gse_errors</data><data key="name">D.KBaseExpression.gse_errors</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">List of GSE level errors</data></node><node id="D.KBaseOntology.genome_id"><data key="typeName">genome_id</data><data key="name">D.KBaseOntology.genome_id</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment">A genome_id is a string (usually kb|g.NNNN, but can be free-form)</data></node><node id="D.ExpressionServices.gse_warnings"><data key="typeName">gse_warnings</data><data key="name">D.ExpressionServices.gse_warnings</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">List of GSE level warnings</data></node><node id="D.KmerEval.otu_data"><data key="typeName">otu_data</data><data key="name">D.KmerEval.otu_data</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseExpression.denominator_sample_comparison"><data key="typeName">denominator_sample_comparison</data><data key="name">D.KBaseExpression.denominator_sample_comparison</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">mapping ComparisonDenominatorLabel to DataSampleComparison mapping</data></node><node id="D.KBaseFBA.PromConstraint"><data key="typeName">PromConstraint</data><data key="name">D.KBaseFBA.PromConstraint</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">An object that encapsulates the information necessary to apply PROM-based constraints to an FBA model. This
includes a regulatory network consisting of a set of regulatory interactions (implied by the set of TFtoTGmap
objects) and interaction probabilities as defined in each TargetGeneProbabilities object.  A link the the annotation
object is required in order to properly link to an FBA model object.  A reference to the expression_data_collection
used to compute the interaction probabilities is provided for future reference.

    string id                                         - the id of this prom_constraints object in a
                                                                    workspace
    genome_ref                                                                        
                                                                    which specfies how TFs and targets are named
    list&lt;TFtoTGmap&gt; transcriptionFactorMaps                                     - the list of TFMaps which specifies both the
                                                                    regulatory network and interaction probabilities
                                                                    between TF and target genes
    expression_series_ref expression_series_ref   - the id of the expresion_data_collection object in
                                                                    the workspace which was used to compute the
                                                                    regulatory interaction probabilities</data></node><node id="M.KBaseTrees.get_node_count"><data key="typeName">get_node_count</data><data key="name">M.KBaseTrees.get_node_count</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Given a tree, return the total number of nodes, including internal nodes and the root node.</data></node><node id="D.KBaseRegulation.regulon_ref"><data key="typeName">regulon_ref</data><data key="name">D.KBaseRegulation.regulon_ref</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents WS reference to a genome object
id ws Regulation.Regulon</data></node><node id="D.KBaseTrees.ws_genome_id"><data key="typeName">ws_genome_id</data><data key="name">D.KBaseTrees.ws_genome_id</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">A workspace ID that references a Genome data object.
@id ws KBaseGenomes.Genome</data></node><node id="D.KBaseFBA.probanno_ref"><data key="typeName">probanno_ref</data><data key="name">D.KBaseFBA.probanno_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to probabilistic annotation
@id ws KBaseProbabilisticAnnotation.ProbAnno</data></node><node id="D.Workspace.SetPermissionsParams"><data key="typeName">SetPermissionsParams</data><data key="name">D.Workspace.SetPermissionsParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Input parameters for the "set_permissions" function.

        One, and only one, of the following is required:
        ws_id id - the numerical ID of the workspace.
        ws_name workspace - name of the workspace or the workspace ID in KBase
                format, e.g. kb|ws.78.
        
        Required arguments:
        permission new_permission - the permission to assign to the users.
        list&lt;username&gt; users - the users whose permissions will be altered.</data></node><node id="D.KBaseGenomes.GenomeDomainData"><data key="typeName">GenomeDomainData</data><data key="name">D.KBaseGenomes.GenomeDomainData</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">GenomeDomainData object: this object holds all data regarding protein domains in a genome in KBase

    @optional genome_ref
@searchable ws_subset id genome_id scientific_name genome_ref num_domains num_features</data></node><node id="D.Workspace.FuncInfo"><data key="typeName">FuncInfo</data><data key="name">D.Workspace.FuncInfo</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Information about a function

        func_string func_def - resolved func definition id.
        string description - the description of the function from spec file.
        string spec_def - reconstruction of function definition from spec file.
        string parsing_structure - json document describing parsing structure of function 
                in spec file including types of arguments.
        list&lt;spec_version&gt; module_vers - versions of spec files containing
                given func version.
        list&lt;spec_version&gt; released_module_vers - released versions of spec files 
                containing given func version.
        list&lt;func_string&gt; func_vers - all versions of function with given type
                name.
        list&lt;func_string&gt; released_func_vers - all released versions of function 
                with given type name.
        list&lt;type_string&gt; used_type_defs - list of types (with versions) 
                referred to from this function version.</data></node><node id="D.KBaseGeneFamilies.domain_library_id"><data key="typeName">domain_library_id</data><data key="name">D.KBaseGeneFamilies.domain_library_id</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.GenomeComparison.ProteomeComparison"><data key="typeName">ProteomeComparison</data><data key="name">D.GenomeComparison.ProteomeComparison</data><data key="moduleName">GenomeComparison</data><data key="nodeType">D</data><data key="comment">string genome1ws - workspace of genome1 (depricated, use genome1ref instead)
string genome1id - id of genome1 (depricated, use genome1ref instead)
ws_genome_id genome1ref - reference to genome1
string genome2ws - workspace of genome2 (depricated, use genome2ref instead)
string genome2id - id of genome2 (depricated, use genome2ref instead)
ws_genome_id genome2ref - reference to genome2
float sub_bbh_percent - optional parameter, minimum percent of bit score compared to best bit score, default is 90
string max_evalue -  optional parameter, maximum evalue, default is 1e-10
list&lt;string&gt; proteome1names - names of genes of genome1
mapping&lt;string, int&gt; proteome1map - map from genes of genome1 to their positions
list&lt;string&gt; proteome2names - names of genes of genome2
mapping&lt;string, int&gt; proteome2map - map from genes of genome2 to their positions
list&lt;list&lt;hit&gt;&gt; data1 - outer list iterates over positions of genome1 gene names, inner list iterates over hits from given gene1 to genome2
list&lt;list&lt;hit&gt;&gt; data2 - outer list iterates over positions of genome2 gene names, inner list iterates over hits from given gene2 to genome1
@optional genome1ws
@optional genome1id
@optional genome1ref
@optional genome2ws
@optional genome2id
@optional genome2ref</data></node><node id="M.Workspace.set_global_permission"><data key="typeName">set_global_permission</data><data key="name">M.Workspace.set_global_permission</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Set the global permission for a workspace.</data></node><node id="M.UpstartIntegration.is_running"><data key="typeName">is_running</data><data key="name">M.UpstartIntegration.is_running</data><data key="moduleName">UpstartIntegration</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.ExpressionServices.get_expression_data_by_samples_and_features"><data key="typeName">get_expression_data_by_samples_and_features</data><data key="name">M.ExpressionServices.get_expression_data_by_samples_and_features</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a list of sample ids and feature ids it returns a LabelDataMapping {sampleID}-&gt;{featureId =&gt; value}}.  
If feature list is an empty array [], all features with measurment values will be returned.</data></node><node id="M.GenomeAnnotation.annotate_genome"><data key="typeName">annotate_genome</data><data key="name">M.GenomeAnnotation.annotate_genome</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.Workspace.obj_ver"><data key="typeName">obj_ver</data><data key="name">D.Workspace.obj_ver</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">An object version.
The version of the object, starting at 1.</data></node><node id="D.Ontology.string_list"><data key="typeName">string_list</data><data key="name">D.Ontology.string_list</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.UserAndJobState.share_job"><data key="typeName">share_job</data><data key="name">M.UserAndJobState.share_job</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Share a job. Sharing a job to the same user twice or with the job owner
has no effect.</data></node><node id="D.KBaseFile.AnnotationFile"><data key="typeName">AnnotationFile</data><data key="name">D.KBaseFile.AnnotationFile</data><data key="moduleName">KBaseFile</data><data key="nodeType">D</data><data key="comment">A file containing annotation data.
Note it is *strongly* recommended to include the assembly id, but the
field is optional since for some data sources the mapping is not
maintained.

annotation_file - the annotation file
strain - information about the genetic source
source - information about the source of this data
features_by_type - the count of features by the type of the feature
assembly_id - a reference to the assembly used to construct this
    annotation.

@optional source
@optional assembly
@optional features_by_type
@metadata ws strain.genus
@metadata ws strain.species
@metadata ws strain.strain
@metadata ws strain.ncbi_taxid
@metadata ws source.source
@metadata ws source.source_id
@metadata ws source.project_id</data></node><node id="D.GenomeAnnotation.location"><data key="typeName">location</data><data key="name">D.GenomeAnnotation.location</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment">a "location" refers to a sequence of regions</data></node><node id="M.Workspace.register_typespec_copy"><data key="typeName">register_typespec_copy</data><data key="name">M.Workspace.register_typespec_copy</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Register a copy of new typespec or refresh an existing typespec which is
loaded from another workspace for synchronization. Method returns new
version of module in current workspace.

Also see the release_types function.</data></node><node id="D.KBaseFBA.gapfill_ref"><data key="typeName">gapfill_ref</data><data key="name">D.KBaseFBA.gapfill_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a gapfilling object
@id ws KBaseFBA.Gapfilling</data></node><node id="D.KBaseRegulation.Gene"><data key="typeName">Gene</data><data key="name">D.KBaseRegulation.Gene</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents a regulated gene
gene_id gene_id - gene identifier 
string locus_tag - locus tag of a gene
string name - gene name

@optional locus_tag name</data></node><node id="D.MEME.MemeRunResult"><data key="typeName">MemeRunResult</data><data key="name">D.MEME.MemeRunResult</data><data key="moduleName">MEME</data><data key="nodeType">D</data><data key="comment">Represents results of a single MEME run
string id - KBase ID of MemeRunResult
string source_ref - WS reference to source SequenceSet object
string source_id - id of source SequenceSet object
string timestamp - timestamp for creation time of collection
string version - version of MEME like "MEME version 4.9.0 (Release date: Wed Oct  3 11:07:26 EST 2012)"
string input_file_name - name of input file, DATAFILE field of MEME output
string alphabet - ALPHABET field of MEME output (like "ACGT")
string training_set - strings from TRAINING SET section, except DATAFILE and ALPHABET fields
string command_line - command line of MEME run 
string mod - value of mod parameter of MEME run
int nmotifs - value of nmotifs parameter of MEME run
string evt - value of evt parameter of MEME run
string object_function - value of object function parameter of MEME run
int minw - value of minw parameter of MEME run
int maxw - value of maxw parameter of MEME run
float minic - value of minic parameter of MEME run
int wg - value of wg parameter of MEME run
int ws - value of wc parameter of MEME run
string endgaps - value of endgaps parameter of MEME run
int minsites - value of minsites parameter of MEME run
int maxsites - value of maxsites parameter of MEME run
float wnsites - value of wnsites parameter of MEME run
int prob - value of prob parameter of MEME run
string spmap - value of spmsp parameter of MEME run
float spfuzz - value of spfuzz parameter of MEME run
string substring - value of substring parameter of MEME run
string branching - value of branching parameter of MEME run
string wbranch - value of wbranch parameter of MEME run
string prior - value of prior parameter of MEME run
float b - value of b parameter of MEME run
int maxiter - value of maxiter parameter of MEME run
float distance - value of distance parameter of MEME run
int n - value of n parameter of MEME run
int n_cap - value of N parameter of MEME run
string strands - value of strands parameter of MEME run
int seed - value of seed parameter of MEME run
int seqfrac - value of seqfrac parameter of MEME run
string letter_freq - letter frequencies in dataset
string bg_freq - background letter frequencies
list&lt;MemeMotif&gt; motifs - A list of all motifs in a collection
string raw_output - section of MEME output text file (all before motif data)
MemeRunParameters params

@optional source_ref source_id timestamp meme_version input_file_name alphabet training_set command_line mod nmotifs evt object_function minw maxw minic wg ws endgaps minsites maxsites wnsites prob spmap spfuzz substring branching wbranch prior b maxiter distance n n_cap strands seed seqfrac letter_freq bg_freq motifs raw_output</data></node><node id="D.KBaseGenomes.feature_type"><data key="typeName">feature_type</data><data key="name">D.KBaseGenomes.feature_type</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Type of a genome feature with possible values peg, rna</data></node><node id="M.Tree.get_alignment_ids_by_protein_sequence"><data key="typeName">get_alignment_ids_by_protein_sequence</data><data key="name">M.Tree.get_alignment_ids_by_protein_sequence</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">Given a list of kbase ids of a protein sequences (their MD5s), retrieve the alignment ids of trees that
were built based on these sequences.</data></node><node id="D.KBaseNetworks.node_type"><data key="typeName">node_type</data><data key="name">D.KBaseNetworks.node_type</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">D</data><data key="comment">Type of node in a network</data></node><node id="D.MOTranslation.kbaseId"><data key="typeName">kbaseId</data><data key="name">D.MOTranslation.kbaseId</data><data key="moduleName">MOTranslation</data><data key="nodeType">D</data><data key="comment">kbaseId can represent any object with a KBase identifier. 
In the future this may be used to translate between other data
types, such as contig or genome.</data></node><node id="D.KBaseNetworks.Interaction"><data key="typeName">Interaction</data><data key="name">D.KBaseNetworks.Interaction</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">D</data><data key="comment">Represents a single entity-entity interaction
string id - id of interaction
               string entity1_id - entity1 identifier
               string entity2_id - entity2 identifier
string type          - type of interaction
float strength          - strength of interaction
float confidence  - confidence of interaction

mapping&lt;string,float&gt; scores - various types of scores. 
        Known score types: 

                GENE_DISTANCE - distance between genes on a chromosome 
                CONSERVATION_SCORE - conservation, ranging from 0 (not conserved) to 1 (100% conserved)
                GO_SCORE - Smallest shared GO category, as a fraction of the genome, or missing if one of the genes is not characterized
                STRING_SCORE - STRING score
                COG_SIM        - whether the genes share (1) a COG category or not (0)
                EXPR_SIM - correlation of expression patterns
                SAME_OPERON - whether the pair is predicted to lie (1) in the same operon or not (0)
                SAME_OPERON_PROB - estimated probability that the pair is in the same operon. Values near 1 or 0 are confident predictions of being in the same operon or not, while values near 0.5 are low-confidence predictions.



               @optional id type strength confidence scores</data></node><node id="M.Tree.get_alignment"><data key="typeName">get_alignment</data><data key="name">M.Tree.get_alignment</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">Returns the specified alignment in the specified format, or an empty string if the alignment does not exist.
The options hash provides a way to return the alignment with different labels replaced or with different attached meta
information.  Currently, the available flags and understood options are listed below. 

    options = [
        format =&gt; 'fasta',
        sequence_label =&gt; 'none' || 'raw' || 'feature_id' || 'protein_sequence_id' || 'contig_sequence_id',
    ];
 
The 'format' key indicates what string format the alignment should be returned in.  Currently, there is only
support for 'fasta'. The default value if not specified is 'fasta'.

The 'sequence_label' specifies what should be placed in the label of each sequence.  'none' indicates that
no label is added, so you get the sequence only.  'raw' indicates that the raw label of the alignement row
is used. 'feature_id' indicates that the label will have an examplar feature_id in each label (typically the
feature that was originally used to define the sequence). Note that exemplar feature_ids are not
defined for all alignments, so this may result in an unlabeled alignment.  'protein_sequence_id' indicates
that the kbase id of the protein sequence used in the alignment is used.  'contig_sequence_id' indicates that
the contig sequence id is used.  Note that trees are typically built with protein sequences OR
contig sequences. If you select one type of sequence, but the alignment was built with the other type, then
no labels will be added.  The default value if none is specified is 'raw'.</data></node><node id="D.KBaseSearch.gene_id"><data key="typeName">gene_id</data><data key="name">D.KBaseSearch.gene_id</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">A gene_id is a string (usually kb.g.NNNN.CCC.NNNN, but can be free-form)</data></node><node id="D.KBaseGwasData.GwasPopulationStructure_obj_id"><data key="typeName">GwasPopulationStructure_obj_id</data><data key="name">D.KBaseGwasData.GwasPopulationStructure_obj_id</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">A reference to GWAS population kinship object
     @id ws  KBaseGwasData.GwasPopulationStructure</data></node><node id="D.KBasePhenotypes.reaction_id"><data key="typeName">reaction_id</data><data key="name">D.KBasePhenotypes.reaction_id</data><data key="moduleName">KBasePhenotypes</data><data key="nodeType">D</data><data key="comment">Model reaction ID
@id external</data></node><node id="D.KBaseOntology.gene_id"><data key="typeName">gene_id</data><data key="name">D.KBaseOntology.gene_id</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment">A gene_id is a string (usually kb.g.NNNN.CCC.NNNN, but can be free-form)</data></node><node id="D.UserAndJobState.job_stage"><data key="typeName">job_stage</data><data key="name">D.UserAndJobState.job_stage</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">A string that describes the stage of processing of the job.
One of 'created', 'started', 'completed', or 'error'.</data></node><node id="D.ERDB_Service.objectNames"><data key="typeName">objectNames</data><data key="name">D.ERDB_Service.objectNames</data><data key="moduleName">ERDB_Service</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseExpression.gsm_data_set"><data key="typeName">gsm_data_set</data><data key="name">D.KBaseExpression.gsm_data_set</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">mapping kbase feature id as the key and FullMeasurement Structure as the value</data></node><node id="D.KBaseGenomes.Analysis_event_id"><data key="typeName">Analysis_event_id</data><data key="name">D.KBaseGenomes.Analysis_event_id</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Tree.fasta"><data key="typeName">fasta</data><data key="name">D.Tree.fasta</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">String representation of a sequence or set of sequences in FASTA format.  The precise alphabet used is
not yet specified, but will be similar to sequences stored in KBase with '-' to denote gaps in alignments.</data></node><node id="D.Workspace.RemoveModuleOwnershipParams"><data key="typeName">RemoveModuleOwnershipParams</data><data key="name">D.Workspace.RemoveModuleOwnershipParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Parameters for the remove_module_ownership function.

Required arguments:
modulename mod - the module to modify.
username old_owner - the user to remove from the module's list of
        owners.</data></node><node id="D.Inferelator.InferelatorRunParameters"><data key="typeName">InferelatorRunParameters</data><data key="name">D.Inferelator.InferelatorRunParameters</data><data key="moduleName">Inferelator</data><data key="nodeType">D</data><data key="comment">Contains parameters of Inferelator run
gene_list_ref tf_list_ws_ref - ref to transcription factor ids list
cmonkey_run_result_ref cmonkey_run_result_ws_ref - ref to cMonkey run result
expression_series_ref expression_series_ws_ref - ref to expression data series</data></node><node id="D.KBaseBiochem.mediacompound_ref"><data key="typeName">mediacompound_ref</data><data key="name">D.KBaseBiochem.mediacompound_ref</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Reference to a compound object in a biochemistry
@id subws KBaseBiochem.Media.mediacompounds.[*].id</data></node><node id="D.KBaseNarrative.Narrative"><data key="typeName">Narrative</data><data key="name">D.KBaseNarrative.Narrative</data><data key="moduleName">KBaseNarrative</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.UserProfile.FilterParams"><data key="typeName">FilterParams</data><data key="name">D.UserProfile.FilterParams</data><data key="moduleName">UserProfile</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseExpression.RNASeqSampleAlignment"><data key="typeName">RNASeqSampleAlignment</data><data key="name">D.KBaseExpression.RNASeqSampleAlignment</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Object for the RNASeq Alignment bam file</data></node><node id="M.KBaseDataImport.upload"><data key="typeName">upload</data><data key="name">M.KBaseDataImport.upload</data><data key="moduleName">KBaseDataImport</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.GWAS.PrepareVariationParams"><data key="typeName">PrepareVariationParams</data><data key="name">D.GWAS.PrepareVariationParams</data><data key="moduleName">GWAS</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.AssemblyInputHandle.PairedEndLibrary"><data key="typeName">PairedEndLibrary</data><data key="name">D.AssemblyInputHandle.PairedEndLibrary</data><data key="moduleName">AssemblyInputHandle</data><data key="nodeType">D</data><data key="comment">Represents a handle to a paired end library.
handle pair      - represents the set of paired end
                   read files, and is required.
insert_size_mean - is optional.
insert_size_std  - is optional.
read_orientation_outward - if set to true indicates
                   the library is a jumping library.</data></node><node id="D.KBaseTrees.alignment"><data key="typeName">alignment</data><data key="name">D.KBaseTrees.alignment</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">String representation of a sequence alignment, the format of which may be different depending on
input options for retrieving the alignment.</data></node><node id="M.GenomeAnnotation.reconstructionTO_to_roles"><data key="typeName">reconstructionTO_to_roles</data><data key="name">M.GenomeAnnotation.reconstructionTO_to_roles</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseTrees.node_id"><data key="typeName">node_id</data><data key="name">D.KBaseTrees.node_id</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.ExpressionServices.get_expression_samples_types"><data key="typeName">get_expression_samples_types</data><data key="name">M.ExpressionServices.get_expression_samples_types</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a List of SampleIDs, returns a Hash (key : SampleID, value: Type of Sample)</data></node><node id="M.GenomeAnnotation.reconstructionTO_to_subsystems"><data key="typeName">reconstructionTO_to_subsystems</data><data key="name">M.GenomeAnnotation.reconstructionTO_to_subsystems</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseFile.FileRef"><data key="typeName">FileRef</data><data key="name">D.KBaseFile.FileRef</data><data key="moduleName">KBaseFile</data><data key="nodeType">D</data><data key="comment">A reference to a file stored in Shock.
file - the location of and information about a file stored in Shock
encoding - the encoding of the file (e.g. UTF8)
type - the file type (e.g. XML, FASTA, GFF)
size - the file size in bytes.
description - a description of the file

@optional description
@metadata ws encoding
@metadata ws description
@metadata ws size
@metadata ws type</data></node><node id="D.KBaseFBA.GapfillingSolution"><data key="typeName">GapfillingSolution</data><data key="name">D.KBaseFBA.GapfillingSolution</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">GapFillingSolution object holds data on a solution generated by gapfilling analysis

@optional objective gfscore actscore rejscore candscore rejectedCandidates activatedReactions failedReaction_refs

@searchable ws_subset id suboptimal integrated solutionCost koRestore_refs biomassRemoval_refs mediaSupplement_refs</data></node><node id="D.PROM.RegulatoryTarget"><data key="typeName">RegulatoryTarget</data><data key="name">D.PROM.RegulatoryTarget</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">Object required by the prom_constraints object which defines the computed probabilities for a target gene.  The
TF regulating this target can be deduced based on the tfMap object.

    string target_uuid        - id of the target gene in the annotation object namespace
    float tfOffProbability    - PROB(target=ON|TF=OFF)
                                the probability that the transcriptional target is ON, given that the
                                transcription factor is not expressed, as defined in Candrasekarana &amp;
                                Price, PNAS 2010 and used to predict cumulative effects of multiple
                                regulatory interactions with a single target.  Set to null or empty if
                                this probability has not been calculated yet.
    float probTTonGivenTFon   - PROB(target=ON|TF=ON)
                                the probability that the transcriptional target is ON, given that the
                                transcription factor is expressed.    Set to null or empty if
                                this probability has not been calculated yet.
@deprecated</data></node><node id="D.KBaseOntology.Mapping"><data key="typeName">Mapping</data><data key="name">D.KBaseOntology.Mapping</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment">Mapping object holds data on subsystems and complexes
            
@optional name
@searchable ws_subset id name role_aliases complex_aliases subsystem_aliases
@searchable ws_subset roles.[*].(id,name,seedfeature) 
@searchable ws_subset subsystems.[*].(id,name,class,subclass,type,role_refs) 
@searchable ws_subset complexes.[*].(id,name,complexroles.[*].(role_ref,type,optionalRole,triggering))</data></node><node id="D.BAMBI.workspace_id"><data key="typeName">workspace_id</data><data key="name">D.BAMBI.workspace_id</data><data key="moduleName">BAMBI</data><data key="nodeType">D</data><data key="comment">Workspace identifier</data></node><node id="D.ProteinInfo.neighbor"><data key="typeName">neighbor</data><data key="name">D.ProteinInfo.neighbor</data><data key="moduleName">ProteinInfo</data><data key="nodeType">D</data><data key="comment">Neighbor is a hash of fids to a neighbor score</data></node><node id="D.KBaseExpression.label_data_mapping"><data key="typeName">label_data_mapping</data><data key="name">D.KBaseExpression.label_data_mapping</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Mapping from Label (often a sample id, but free text to identify} to DataExpressionLevelsForSample</data></node><node id="D.Tree.AbundanceParams"><data key="typeName">AbundanceParams</data><data key="name">D.Tree.AbundanceParams</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">Structure to group input parameters to the compute_abundance_profile method.

    kbase_id tree_id                - the KBase ID of the tree to compute abundances for; the tree is
                                      used to identify the set of sequences that were aligned to build
                                      the tree; each leaf node of a tree built from an alignment will
                                      be mapped to a sequence; the compute_abundance_profile method
                                      assumes that trees are built from protein sequences
    string protein_family_name      - the name of the protein family used to pull a small set of reads
                                      from a metagenomic sample; currently only COG families are supported
    string protein_family_source    - the name of the source of the protein family; currently supported
                                      protein families are: 'COG'
    string metagenomic_sample_id    - the ID of the metagenomic sample to lookup; see the KBase communities
                                      service to identifiy metagenomic samples
    int percent_identity_threshold  - the minimum acceptable percent identity for hits, provided as a percentage
                                      and not a fraction (i.e. set to 87.5 for 87.5%)
    int match_length_threshold      - the minimum acceptable length of a match to consider a hit</data></node><node id="M.Workspace.get_module_info"><data key="typeName">get_module_info</data><data key="name">M.Workspace.get_module_info</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseExpression.feature_id"><data key="typeName">feature_id</data><data key="name">D.KBaseExpression.feature_id</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">KBase Feature ID for a feature, typically CDS/PEG
id ws KB.Feature 

"ws" may change to "to" in the future</data></node><node id="D.KBaseTrees.ws_obj_id"><data key="typeName">ws_obj_id</data><data key="name">D.KBaseTrees.ws_obj_id</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">@id ws</data></node><node id="D.KBaseTrees.start_pos_in_parent"><data key="typeName">start_pos_in_parent</data><data key="name">D.KBaseTrees.start_pos_in_parent</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.InvocationService.list_files"><data key="typeName">list_files</data><data key="name">M.InvocationService.list_files</data><data key="moduleName">InvocationService</data><data key="nodeType">M</data><data key="comment">* Enumerate the files in the session, assuming the current working
* directory is cwd, and the filename to be listed is d. Think of this
* as the equivalent of "cd $cwd; ls $d".</data></node><node id="D.ServiceRegistry.ServiceInfo"><data key="typeName">ServiceInfo</data><data key="name">D.ServiceRegistry.ServiceInfo</data><data key="moduleName">ServiceRegistry</data><data key="nodeType">D</data><data key="comment">Information about a service such as its name and its 
namespace are captured in the ServiceInfo structure.
The keys and values in the structure are:
     service_name - holds a string that is the service name.
     namespace - holds a string that is an enumeration of the
                             different types of deployments, such as
                             prod, dev, test, etc.
     hostname  - is the name of the host (or ip adress) that the 
                     service is running on.
     port      - is the port number that the service is listening on.
     ip_allows - is a list of IP addresses that should be allowed
                     to connect to this service. The default is all.</data></node><node id="M.KBaseTrees.remove_node_names_and_simplify"><data key="typeName">remove_node_names_and_simplify</data><data key="name">M.KBaseTrees.remove_node_names_and_simplify</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Given a tree in newick format, remove the nodes with the given names indicated in the list, and
simplify the tree.  Simplifying a tree involves removing unnamed internal nodes that have only one
child, and removing unnamed leaf nodes.  During the removal process, edge lengths (if they exist) are
conserved so that the summed end to end distance between any two nodes left in the tree will remain the same.</data></node><node id="D.ExpressionServices.persons"><data key="typeName">persons</data><data key="name">D.ExpressionServices.persons</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">list of Persons</data></node><node id="D.KBaseFBA.mapping_ref"><data key="typeName">mapping_ref</data><data key="name">D.KBaseFBA.mapping_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a mapping object
@id ws KBaseOntology.Mapping</data></node><node id="D.Communities.FileType"><data key="typeName">FileType</data><data key="name">D.Communities.FileType</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseCommunities.Table1DString"><data key="typeName">Table1DString</data><data key="name">D.KBaseCommunities.Table1DString</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.Workspace.get_workspace_description"><data key="typeName">get_workspace_description</data><data key="name">M.Workspace.get_workspace_description</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Get a workspace's description.</data></node><node id="D.KBaseFBA.promconstraint_ref"><data key="typeName">promconstraint_ref</data><data key="name">D.KBaseFBA.promconstraint_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to PROM constraints
@id ws KBaseFBA.PromConstraint</data></node><node id="D.KBaseProteinStructure.PDBMatch"><data key="typeName">PDBMatch</data><data key="name">D.KBaseProteinStructure.PDBMatch</data><data key="moduleName">KBaseProteinStructure</data><data key="nodeType">D</data><data key="comment">returned data from match</data></node><node id="M.Tree.get_node_count"><data key="typeName">get_node_count</data><data key="name">M.Tree.get_node_count</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">Given a tree, return the total number of nodes, including internal nodes and the root node.</data></node><node id="D.MOTranslation.protein"><data key="typeName">protein</data><data key="name">D.MOTranslation.protein</data><data key="moduleName">MOTranslation</data><data key="nodeType">D</data><data key="comment">protein is an MD5 in KBase. It is the primary lookup between
KBase fids and MicrobesOnline locusIds.</data></node><node id="D.KBaseSearch.search_feature_ref"><data key="typeName">search_feature_ref</data><data key="name">D.KBaseSearch.search_feature_ref</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Reference to a Feature object in the workspace
@id ws KBaseSearch.Feature</data></node><node id="D.KBaseGenomes.Protcomp_ref"><data key="typeName">Protcomp_ref</data><data key="name">D.KBaseGenomes.Protcomp_ref</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Reference to a Proteome Comparison object in the workspace
@id ws GenomeComparison.ProteomeComparison</data></node><node id="M.KBaseGeneFamilies.search_domains"><data key="typeName">search_domains</data><data key="name">M.KBaseGeneFamilies.search_domains</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.ProbabilisticAnnotation.workspace_id"><data key="typeName">workspace_id</data><data key="name">D.ProbabilisticAnnotation.workspace_id</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">A string identifier for a workspace. Any string consisting of alphanumeric characters and "-" is acceptable.</data></node><node id="D.KBaseSearch.contig_id"><data key="typeName">contig_id</data><data key="name">D.KBaseSearch.contig_id</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">ContigSet contig ID
@id external</data></node><node id="M.GenomeAnnotation.call_features_crispr"><data key="typeName">call_features_crispr</data><data key="name">M.GenomeAnnotation.call_features_crispr</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseGwasData.shock_url"><data key="typeName">shock_url</data><data key="name">D.KBaseGwasData.shock_url</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">A reference to Variation fastq  object on shock</data></node><node id="M.PROM.change_expression_data_namespace"><data key="typeName">change_expression_data_namespace</data><data key="name">M.PROM.change_expression_data_namespace</data><data key="moduleName">PROM</data><data key="nodeType">M</data><data key="comment">Maps the expression data collection stored in a workspace in one genome namespace to an alternate genome namespace.  This is useful,
for instance, if expression data is available for one genome, but you intend to use it for a related genome or a genome with different
gene calls.  If a gene in the original expression data cannot be found in the translation mapping, then it is ignored and left as is
so that the number of features in the expression data set is not altered.  NOTE!: this is different from the default behavior of
change_regulatory_network_namespace, which will drop all genes that are not found in the mapping.  If successful, this method
returns the expression collection ID of the newly created expression data colleion.  This method also returns a status message indicating
what happened or what went wrong.

The mapping&lt;string,string&gt; new_features_names should be defined so that existing IDs are the key and the replacement IDs are the
values stored.</data></node><node id="D.UserAndJobState.service_token"><data key="typeName">service_token</data><data key="name">D.UserAndJobState.service_token</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">A globus ID token that validates that the service really is said
service.</data></node><node id="M.Workspace.get_object_subset"><data key="typeName">get_object_subset</data><data key="name">M.Workspace.get_object_subset</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Get portions of objects from the workspace.

When selecting a subset of an array in an object, the returned
array is compressed to the size of the subset, but the ordering of
the array is maintained. For example, if the array stored at the
'feature' key of a Genome object has 4000 entries, and the object paths
provided are:
        /feature/7
        /feature/3015
        /feature/700
The returned feature array will be of length three and the entries will
consist, in order, of the 7th, 700th, and 3015th entries of the
original array.</data></node><node id="M.CoExpression.const_coex_net_clust"><data key="typeName">const_coex_net_clust</data><data key="name">M.CoExpression.const_coex_net_clust</data><data key="moduleName">CoExpression</data><data key="nodeType">M</data><data key="comment">Description of const_coex_net_clust
const_coex_net_clust provides the function to build coexpression network and identify the functional modules among it.
A functional module is a network cluster with enrichment of certain biological function. const_coex_net_clust first construct coexpression network. Then, it identifys the clusters among the network. Finally, it identifys the GeneOntology enrichment for the genes in each cluster.</data></node><node id="M.Workspace.release_module"><data key="typeName">release_module</data><data key="name">M.Workspace.release_module</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Release a module for general use of its types.

Releases the most recent version of a module. Releasing a module does
two things to the module's types:
1) If a type's major version is 0, it is changed to 1. A major
        version of 0 implies that the type is in development and may have
        backwards incompatible changes from minor version to minor version.
        Once a type is released, backwards incompatible changes always
        cause a major version increment.
2) This version of the type becomes the default version, and if a 
        specific version is not supplied in a function call, this version
        will be used. This means that newer, unreleased versions of the
        type may be skipped.</data></node><node id="D.Cmonkey.expression_sample_ws_ref"><data key="typeName">expression_sample_ws_ref</data><data key="name">D.Cmonkey.expression_sample_ws_ref</data><data key="moduleName">Cmonkey</data><data key="nodeType">D</data><data key="comment">Represents WS expression data sample identifier
id ws KBaseExpression.ExpressionSample</data></node><node id="D.KBaseGenomes.ProteinSet"><data key="typeName">ProteinSet</data><data key="name">D.KBaseGenomes.ProteinSet</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Type spec for the "ProteinSet" object

                proteinset_id id - unique kbase ID of the protein set
                string name - name of the protein set
                string type - type of the protein set (values are: Organism,Environment,Collection)
                source_id source_id - source ID of the protein set
                string source - source of the protein set
                list&lt;Protein&gt; proteins - list of proteins in the protein set
                fasta_ref fasta_ref - reference to fasta file from which contig set were read

                @optional name type fasta_ref
            @searchable ws_subset proteins.[*].(id,md5,function,length,aliases) md5 id name source_id source type</data></node><node id="D.ExpressionServices.ContactPerson"><data key="typeName">ContactPerson</data><data key="name">D.ExpressionServices.ContactPerson</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Data structure for GSM ContactPerson</data></node><node id="D.HandleMngr.HandleId"><data key="typeName">HandleId</data><data key="name">D.HandleMngr.HandleId</data><data key="moduleName">HandleMngr</data><data key="nodeType">D</data><data key="comment">The add_read_acl functions will update the acl of the shock
node that the handle references. The function is only accessible to a 
specific list of users specified at startup time. The underlying
shock node will be made readable to the user requested.</data></node><node id="D.KBaseOntology.subsystem_id"><data key="typeName">subsystem_id</data><data key="name">D.KBaseOntology.subsystem_id</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment">ID of subsystem object
@id external</data></node><node id="D.Communities.BiomAnnotationEntry"><data key="typeName">BiomAnnotationEntry</data><data key="name">D.Communities.BiomAnnotationEntry</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment">BiomAnnotationEntry
A KBase object for a profile entry in the metagenome profile object
@optional name metadata
searchable BiomAnnotationEntry.*</data></node><node id="M.Sim.sims"><data key="typeName">sims</data><data key="name">M.Sim.sims</data><data key="moduleName">Sim</data><data key="nodeType">M</data><data key="comment">Retrieve precomputed protein similarities given a list of identifiers.

The options parameter allows simple configuration of the call. The following
values in the structure are interpreted:

 kb_only        Only return KBase identifiers (not raw MD5 or other external IDs).
 kb_function2   For KB identifiers, return the function mapped to id2.
 evalue_cutoff  Return similarities with an e-value better than this value.
 max_sims       Return at most this many similarities. The number of values
                may exceed this due to multiple identifiers mapping to the same sequence.

Each similarity returned is encapsulated in a sim_vec tuple. This tuple
contains the similar protein identifiers, as well as the columns as seen in the
blastall -m8 output..

The return is a list of tuples representing the similarity values. The indexes in the
tuple are defined as follows:

  0   id1        query sequence id
  1   id2        subject sequence id
  2   iden       percentage sequence identity
  3   ali_ln     alignment length
  4   mismatches  number of mismatch
  5   gaps       number of gaps
  6   b1         query seq match start
  7   e1         query seq match end
  8   b2         subject seq match start
  9   e2         subject seq match end
 10   psc        match e-value
 11   bsc        bit score
 12   ln1        query sequence length
 13   ln2        subject sequence length
 14   tool       tool used to produce similarities

All following fields may vary by tool:

 15   loc1       query seq locations string (b1-e1,b2-e2,b3-e3)
 16   loc2       subject seq locations string (b1-e1,b2-e2,b3-e3)
 17   dist       tree distance

We also return this column for any lookups when the kb_function2 flag
is enabled.

 18  function2   The function associated with id2 in the KBase.</data></node><node id="D.KBaseBiochem.gapfill_id"><data key="typeName">gapfill_id</data><data key="name">D.KBaseBiochem.gapfill_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Gapfill ID
@id kb</data></node><node id="D.KBaseGenomes.coexpressed_fid"><data key="typeName">coexpressed_fid</data><data key="name">D.KBaseGenomes.coexpressed_fid</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Structure for coexpressed fids (from CDMI API)</data></node><node id="M.MOTranslation.fids_to_moLocusIds"><data key="typeName">fids_to_moLocusIds</data><data key="name">M.MOTranslation.fids_to_moLocusIds</data><data key="moduleName">MOTranslation</data><data key="nodeType">M</data><data key="comment">fids_to_moLocusIds translates a list of fids into MicrobesOnline
locusIds. It uses proteins_to_moLocusIds internally.</data></node><node id="D.Ontology.GoDescList"><data key="typeName">GoDescList</data><data key="name">D.Ontology.GoDescList</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">a list of GO terms description</data></node><node id="M.MOTranslation.map_to_fid"><data key="typeName">map_to_fid</data><data key="name">M.MOTranslation.map_to_fid</data><data key="moduleName">MOTranslation</data><data key="nodeType">M</data><data key="comment">A general method to lookup the best matching feature id in a specific genome for a given protein sequence.

NOTE: currently the intended use of this method is to map identical genomes with different gene calls, although it still
can work for fairly similar genomes.  But be warned!!  It may produce incorrect results for genomes that differ!

This method operates by first checking the MD5 and position of each sequence and determining if there is an exact match,
(or an exact MD5 match +- 30bp).  If none are found, then a simple blast search is performed.  Currently the blast search
is completely overkill as it is used simply to look for 50% overlap of genes. Blast was chosen, however, because it is
anticipated that this, or a very similar implementation of this method, will be used more generally for mapping features
on roughly similar genomes.  Keep very much in mind that this method is not designed to be a general homology search, which
should be done with more advanced methods.  Rather, this method is designed more for bookkeeping purposes when data based on
one genome with a set of gene calls needs to be applied to a genome with a second set of gene calls.

see also the cooresponds method of the CDMI.</data></node><node id="D.KBaseProteinStructure.percent_id_t"><data key="typeName">percent_id_t</data><data key="name">D.KBaseProteinStructure.percent_id_t</data><data key="moduleName">KBaseProteinStructure</data><data key="nodeType">D</data><data key="comment">% identity from BLASTP matches</data></node><node id="D.KBaseGwasData.variationKinshipUnit"><data key="typeName">variationKinshipUnit</data><data key="name">D.KBaseGwasData.variationKinshipUnit</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.GenomeAnnotation.contig_id"><data key="typeName">contig_id</data><data key="name">D.GenomeAnnotation.contig_id</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.KBaseNetworks.entity2datasets"><data key="typeName">entity2datasets</data><data key="name">M.KBaseNetworks.entity2datasets</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">M</data><data key="comment">Returns a list of all datasets that have at least one interaction for a given  entity</data></node><node id="D.KBaseRegulation.regulation_type"><data key="typeName">regulation_type</data><data key="name">D.KBaseRegulation.regulation_type</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Type of regulation. The value can be one of the following: 
        
        TF - for regulation by transcription factor
        RNA - for regulation by RNA regulatory element (e.g. riboswitch)</data></node><node id="D.KBaseExpression.RNASeqSample"><data key="typeName">RNASeqSample</data><data key="name">D.KBaseExpression.RNASeqSample</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">RNASeq fastq  object</data></node><node id="D.KBaseCommunities.Sample"><data key="typeName">Sample</data><data key="name">D.KBaseCommunities.Sample</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment">sample_id and sample_name are required, everything else optional
to be indexed for search: everything, except sample_url, version
need to unfold metadata properly
@optional version env_package_type feature biome material location country latitude longitude created collection_date sample_url metadata</data></node><node id="D.GenomeAnnotation.fid_function_pair"><data key="typeName">fid_function_pair</data><data key="name">D.GenomeAnnotation.fid_function_pair</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.GWAS.Variations2GenesParams"><data key="typeName">Variations2GenesParams</data><data key="name">D.GWAS.Variations2GenesParams</data><data key="moduleName">GWAS</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.GenomeAnnotation.enumerate_classifiers"><data key="typeName">enumerate_classifiers</data><data key="name">M.GenomeAnnotation.enumerate_classifiers</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Enumerate the available classifiers. Returns the list of identifiers for
* the classifiers.</data></node><node id="M.HandleMngr.add_read_acl"><data key="typeName">add_read_acl</data><data key="name">M.HandleMngr.add_read_acl</data><data key="moduleName">HandleMngr</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseSearch.IndividualFeature"><data key="typeName">IndividualFeature</data><data key="name">D.KBaseSearch.IndividualFeature</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Type definition for an IndividualFeature
IndividualFeatures can either be a  Feature structure
(contained in the data field) or a reference to a
Feature object (contained in the ref field)
(Technically it could be both; not sure how to handle that yet)

@optional data ref</data></node><node id="D.KBaseFBA.QuantitativeOptimizationSolution"><data key="typeName">QuantitativeOptimizationSolution</data><data key="name">D.KBaseFBA.QuantitativeOptimizationSolution</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseRegulation.regulatory_mechanism"><data key="typeName">regulatory_mechanism</data><data key="name">D.KBaseRegulation.regulatory_mechanism</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">The regualtory mechanism. The value of regulatory_mechanism can be: 
        
        activation - activates the transcription
        repression - represses the transcription</data></node><node id="D.KBaseExpression.samples_float_map"><data key="typeName">samples_float_map</data><data key="name">D.KBaseExpression.samples_float_map</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Mapping between sample id and corresponding value.   Used as return for get_expression_samples_original_log2_median</data></node><node id="D.KBaseGeneFamilies.domain_accession"><data key="typeName">domain_accession</data><data key="name">D.KBaseGeneFamilies.domain_accession</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseExpression.strain_expression_data_samples_mapping"><data key="typeName">strain_expression_data_samples_mapping</data><data key="name">D.KBaseExpression.strain_expression_data_samples_mapping</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">mapping between strainIDs and all Samples it contains</data></node><node id="M.GenomeAnnotation.call_features_selenoprotein"><data key="typeName">call_features_selenoprotein</data><data key="name">M.GenomeAnnotation.call_features_selenoprotein</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Given a genome typed object, call selenoprotein features.</data></node><node id="D.Workspace.TypeInfo"><data key="typeName">TypeInfo</data><data key="name">D.Workspace.TypeInfo</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Information about a type

        type_string type_def - resolved type definition id.
        string description - the description of the type from spec file.
        string spec_def - reconstruction of type definition from spec file.
        jsonschema json_schema - JSON schema of this type.
        string parsing_structure - json document describing parsing structure of type 
                in spec file including involved sub-types.
        list&lt;spec_version&gt; module_vers - versions of spec-files containing
                given type version.
        list&lt;spec_version&gt; released_module_vers - versions of released spec-files 
                containing given type version.
        list&lt;type_string&gt; type_vers - all versions of type with given type name.
        list&lt;type_string&gt; released_type_vers - all released versions of type with 
                given type name.
        list&lt;func_string&gt; using_func_defs - list of functions (with versions)
                referring to this type version.
        list&lt;type_string&gt; using_type_defs - list of types (with versions)
                referring to this type version.
        list&lt;type_string&gt; used_type_defs - list of types (with versions) 
                referred from this type version.</data></node><node id="M.KBaseNetworks.dataset_source2datasets"><data key="typeName">dataset_source2datasets</data><data key="name">M.KBaseNetworks.dataset_source2datasets</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">M</data><data key="comment">Returns a list of all datasets from a given dataset source                   
           dataset_source_ref datasetSourceRef - A reference to a dataset source</data></node><node id="D.Ontology.GoIDList"><data key="typeName">GoIDList</data><data key="name">D.Ontology.GoIDList</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">A list of ontology identifiers</data></node><node id="D.PROM.kbase_id"><data key="typeName">kbase_id</data><data key="name">D.PROM.kbase_id</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">A KBase ID is a string starting with the characters "kb|".  KBase IDs are typed. The types are
designated using a short string.  KBase IDs may be hierarchical.  See the standard KBase documentation
for more information.</data></node><node id="D.PROM.BooleanGeneExpressionDataCollection"><data key="typeName">BooleanGeneExpressionDataCollection</data><data key="name">D.PROM.BooleanGeneExpressionDataCollection</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">A collection of gene expression data for a single genome under a range of conditions.  This data is returned
as a list of IDs for boolean gene expression data objects in the workspace.  This is a simple object for creating
a PROM Model. NOTE: this data object should be migrated to the Expression Data service, and simply imported here.</data></node><node id="D.KBaseAssembly.AssemblyInput"><data key="typeName">AssemblyInput</data><data key="name">D.KBaseAssembly.AssemblyInput</data><data key="moduleName">KBaseAssembly</data><data key="nodeType">D</data><data key="comment">@optional paired_end_libs single_end_libs references expected_coverage expected_coverage estimated_genome_size dataset_prefix dataset_description
@metadata ws dataset_description</data></node><node id="D.KBaseExpression.data_expression_levels_for_sample"><data key="typeName">data_expression_levels_for_sample</data><data key="name">D.KBaseExpression.data_expression_levels_for_sample</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">mapping kbase feature id as the key and measurement as the value</data></node><node id="D.Ontology.gene_id_list"><data key="typeName">gene_id_list</data><data key="name">D.Ontology.gene_id_list</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">A list of gene identifiers from same species</data></node><node id="M.GenomeAnnotation.default_workflow"><data key="typeName">default_workflow</data><data key="name">M.GenomeAnnotation.default_workflow</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.Ontology.get_go_annotation"><data key="typeName">get_go_annotation</data><data key="name">M.Ontology.get_go_annotation</data><data key="moduleName">Ontology</data><data key="nodeType">M</data><data key="comment">Returns the precomputed annotation with validation GO terms</data></node><node id="D.Workspace.obj_ref"><data key="typeName">obj_ref</data><data key="name">D.Workspace.obj_ref</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">A string that uniquely identifies an object in the workspace service.

        There are two ways to uniquely identify an object in one string:
        "[ws_name or id]/[obj_name or id]/[obj_ver]" - for example,
                "MyFirstWorkspace/MyFirstObject/3" would identify the third version
                of an object called MyFirstObject in the workspace called
                MyFirstWorkspace. 42/Panic/1 would identify the first version of
                the object name Panic in workspace with id 42. Towel/1/6 would
                identify the 6th version of the object with id 1 in the Towel
                workspace. 
        "kb|ws.[ws_id].obj.[obj_id].ver.[obj_ver]" - for example, 
                "kb|ws.23.obj.567.ver.2" would identify the second version of an
                object with id 567 in a workspace with id 23.
        In all cases, if the version number is omitted, the latest version of
        the object is assumed.</data></node><node id="D.KBaseExpression.expression_sample_ids"><data key="typeName">expression_sample_ids</data><data key="name">D.KBaseExpression.expression_sample_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">list of expression sample ids</data></node><node id="M.Workspace.translate_to_MD5_types"><data key="typeName">translate_to_MD5_types</data><data key="name">M.Workspace.translate_to_MD5_types</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Translation from types qualified with semantic versions to their MD5'ed versions</data></node><node id="D.KBaseGwasData.variationUnit"><data key="typeName">variationUnit</data><data key="name">D.KBaseGwasData.variationUnit</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseNetworks.edge_type"><data key="typeName">edge_type</data><data key="name">D.KBaseNetworks.edge_type</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">D</data><data key="comment">Type of edge in a network</data></node><node id="D.KBaseTrees.tree_branch_id"><data key="typeName">tree_branch_id</data><data key="name">D.KBaseTrees.tree_branch_id</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseFBA.FBAModel"><data key="typeName">FBAModel</data><data key="name">D.KBaseFBA.FBAModel</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">FBAModel object

@optional metagenome_otu_ref metagenome_ref genome_ref template_refs ATPSynthaseStoichiometry ATPMaintenance quantopts
    @metadata ws source_id as Source ID
    @metadata ws source as Source
    @metadata ws name as Name
    @metadata ws type as Type
    @metadata ws genome_ref as Genome
    @metadata ws length(biomasses) as Number biomasses
    @metadata ws length(modelcompartments) as Number compartments
    @metadata ws length(modelcompounds) as Number compounds
    @metadata ws length(modelreactions) as Number reactions
    @metadata ws length(gapgens) as Number gapgens
    @metadata ws length(gapfillings) as Number gapfills</data></node><node id="D.PROM.RegulatoryInteraction"><data key="typeName">RegulatoryInteraction</data><data key="name">D.PROM.RegulatoryInteraction</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">A simplified representation of a regulatory interaction that also stores the probability of the interaction
(specificially, as the probability the target is on given that the regulator is off), which is necessary for PROM
to construct FBA constraints.  NOTE: this data object should be migrated to the Regulation service, and simply
imported here. NOTE 2: feature_id may actually be a more general ID, as models can potentially be loaded that
are not in the kbase namespace. In this case everything, including expression data and the fba model must be in
the same namespace.

    feature_id TF            - the genome feature that is the regulator
    feature_id target        - the genome feature that is the target of regulation

@deprecated</data></node><node id="D.KBaseFile.pairedlib_id"><data key="typeName">pairedlib_id</data><data key="name">D.KBaseFile.pairedlib_id</data><data key="moduleName">KBaseFile</data><data key="nodeType">D</data><data key="comment">A workspace id for a paired end library.
@id ws KBaseFile.PairedEndLibrary</data></node><node id="D.KBaseAssembly.PairedEndLibrary"><data key="typeName">PairedEndLibrary</data><data key="name">D.KBaseAssembly.PairedEndLibrary</data><data key="moduleName">KBaseAssembly</data><data key="nodeType">D</data><data key="comment">@optional handle_2 insert_size_mean insert_size_std_dev interleaved read_orientation_outward
@metadata ws handle_1.file_name
@metadata ws handle_1.type
@metadata ws handle_2.file_name
@metadata ws handle_2.type
@metadata ws insert_size_mean
@metadata ws insert_size_std_dev
@metadata ws interleaved
@metadata ws read_orientation_outward</data></node><node id="M.KBaseNetworks.build_first_neighbor_network_limted_by_strength"><data key="typeName">build_first_neighbor_network_limted_by_strength</data><data key="name">M.KBaseNetworks.build_first_neighbor_network_limted_by_strength</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">M</data><data key="comment">Returns a "first-neighbor" network constructed basing on a given list of datasets. First-neighbor network contains 
"source" nodes and all other nodes that have at least one interaction with the "source" nodes. 
Only interactions of given types are considered. Additional cutOff parameter allows setting a threshold
on the strength of edges to be considered.   
          list&lt;string&gt; dataset_ids - List of dataset identifiers to be used for building a network
       list&lt;string&gt; entity_ids - List of entity identifiers to be used as source nodes
          list&lt;edge_type&gt; edge_types - List of possible edge types to be considered for building a network
          float cutOff - The threshold on the strength of edges to be considered for building a network</data></node><node id="D.KBaseCommunities.Table1DInt"><data key="typeName">Table1DInt</data><data key="name">D.KBaseCommunities.Table1DInt</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment">typedef structure {
    GenomeSet genomes;
    FBAModelSet models;
    FBAModel community_model;

    MetagenomeSet source_material;         
    Abundance2DTableFloat abundance;
 } Community;</data></node><node id="D.KBaseTrees.newick_tree"><data key="typeName">newick_tree</data><data key="name">D.KBaseTrees.newick_tree</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">Trees are represented in KBase by default in newick format (http://en.wikipedia.org/wiki/Newick_format)
and are returned to you in this format by default.</data></node><node id="M.GenomeAnnotation.classify_into_bins"><data key="typeName">classify_into_bins</data><data key="name">M.GenomeAnnotation.classify_into_bins</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Classify a dataset, returning only the binned output.</data></node><node id="D.Ontology.domain"><data key="typeName">domain</data><data key="name">D.Ontology.domain</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">Captures which branch of knowledge the GO terms refers to e.g. "biological_process", "molecular_function", "cellular_component" etc.</data></node><node id="D.GenomeAnnotation.feature_type"><data key="typeName">feature_type</data><data key="name">D.GenomeAnnotation.feature_type</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.InvocationService.start_session"><data key="typeName">start_session</data><data key="name">M.InvocationService.start_session</data><data key="moduleName">InvocationService</data><data key="nodeType">M</data><data key="comment">* Begin a new session. A session_id is an uninterpreted string that
* identifies a workspace with in the Invocation Service, and serves to
* scope the data stored in that workspace.
*
* If start_session is invoked with valid authentication (via the standard
* KBase authentication mechanisms), the session_id is ignored, and an
* empty session_id returned. Throughout this service interface, if
* any call is made using authentication the given session_id will be ignored.</data></node><node id="M.UserProfile.set_user_profile"><data key="typeName">set_user_profile</data><data key="name">M.UserProfile.set_user_profile</data><data key="moduleName">UserProfile</data><data key="nodeType">M</data><data key="comment">Set the UserProfile for the user indicated in the User field of the UserProfile
object.  This operation can only be performed if authenticated as the user in
the UserProfile or as the admin account of this service.

If the profile does not exist, one will be created.  If it does already exist,
then the entire user profile will be replaced with the new profile.</data></node><node id="D.KBaseGwasData.filetypes"><data key="typeName">filetypes</data><data key="name">D.KBaseGwasData.filetypes</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">@optional emmax_format_hapmap_shock_id tassel_format_hapmap_shock_id 

vcf_shock_id - vcf_shock_id
emmax_format_hapmap_shock_id - emmax_hapmap_shock_id
tassel_format_hapmap_shock_id - tassel_hapmap_shock_id</data></node><node id="D.KBaseExpression.ontology_expression_data_sample_mapping"><data key="typeName">ontology_expression_data_sample_mapping</data><data key="name">D.KBaseExpression.ontology_expression_data_sample_mapping</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">mapping between ontologyIDs (concatenated if searched for with the and operator) and all the Samples that match that term(s)</data></node><node id="D.ProteinInfo.go"><data key="typeName">go</data><data key="name">D.ProteinInfo.go</data><data key="moduleName">ProteinInfo</data><data key="nodeType">D</data><data key="comment">GOs are a list of Gene Ontology identifiers.</data></node><node id="D.KBaseExpression.feature_ids"><data key="typeName">feature_ids</data><data key="name">D.KBaseExpression.feature_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">KBase list of Feature IDs , typically CDS/PEG</data></node><node id="D.KBaseExpression.ontology_name"><data key="typeName">ontology_name</data><data key="name">D.KBaseExpression.ontology_name</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Kbase OntologyName</data></node><node id="D.KBaseCommunities.contact_information"><data key="typeName">contact_information</data><data key="name">D.KBaseCommunities.contact_information</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.UserAndJobState.has_state"><data key="typeName">has_state</data><data key="name">M.UserAndJobState.has_state</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Determine if a key exists for a service.</data></node><node id="D.KBaseFBA.GapgenerationSolution"><data key="typeName">GapgenerationSolution</data><data key="name">D.KBaseFBA.GapgenerationSolution</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">GapGenerationSolution object holds data on a solution proposed by the gapgeneration command</data></node><node id="M.ProteinInfo.fids_to_operons"><data key="typeName">fids_to_operons</data><data key="name">M.ProteinInfo.fids_to_operons</data><data key="moduleName">ProteinInfo</data><data key="nodeType">M</data><data key="comment">fids_to_operons takes as input a list of feature
ids and returns a mapping of each fid to the operon
in which it is found. The list of fids in the operon
is not necessarily in the order that the fids are found
on the genome.  (fids_to_operons is currently not properly
implemented.)</data></node><node id="M.AbstractHandle.download"><data key="typeName">download</data><data key="name">M.AbstractHandle.download</data><data key="moduleName">AbstractHandle</data><data key="nodeType">M</data><data key="comment">The upload and download functions  provide an empty
implementation that must be provided in a client. If a concrete
implementation is not provided an error is thrown. These are
the equivelant of abstract methods, with runtime rather than
compile time inforcement.

[client_implemented]</data></node><node id="D.KBaseExpression.ExpressionReplicateGroup"><data key="typeName">ExpressionReplicateGroup</data><data key="name">D.KBaseExpression.ExpressionReplicateGroup</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Simple Grouping of Samples that belong to the same replicate group.  ExpressionReplicateGroup typed object.
@searchable ws_subset id expression_sample_ids</data></node><node id="D.ExpressionServices.gsm_data_errors"><data key="typeName">gsm_data_errors</data><data key="name">D.ExpressionServices.gsm_data_errors</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">List of GSM Data level errors</data></node><node id="D.KBaseOntology.Complex"><data key="typeName">Complex</data><data key="name">D.KBaseOntology.Complex</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment">Complex object combines multiple subunit roles in a single biological function
            
@optional name
@searchable ws_subset id name
@searchable ws_subset complexroles.[*].(role_ref,type,optionalRole,triggering)</data></node><node id="M.KBaseTrees.import_tree_from_cds"><data key="typeName">import_tree_from_cds</data><data key="name">M.KBaseTrees.import_tree_from_cds</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.Workspace.ObjectData"><data key="typeName">ObjectData</data><data key="name">D.Workspace.ObjectData</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">The data and supplemental info for an object.

        UnspecifiedObject data - the object's data or subset data.
        object_info info - information about the object.
        list&lt;ProvenanceAction&gt; provenance - the object's provenance.
        username creator - the user that first saved the object to the
                workspace.
        timestamp created - the date the object was first saved to the
                workspace.
        list&lt;obj_ref&gt; - the references contained within the object.
        obj_ref copied - the reference of the source object if this object is
                a copy and the copy source exists and is accessible.
                null otherwise.
        boolean copy_source_inaccessible - true if the object was copied from
                another object, but that object is no longer accessible to the
                user. False otherwise.
        mapping&lt;id_type, list&lt;extracted_id&gt;&gt; extracted_ids - any ids extracted
                from the object.
        string handle_error - if an error occurs while setting ACLs on
                embedded handle IDs, it will be reported here.
        string handle_stacktrace - the stacktrace for handle_error.</data></node><node id="D.Communities.MetagenomeSetElement"><data key="typeName">MetagenomeSetElement</data><data key="name">D.Communities.MetagenomeSetElement</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment">This type represents an element of a MetagenomeSet.
Either ref or data is defined for an element, but not both.
@optional metadata
@optional ref
@optional data</data></node><node id="M.Workspace.copy_object"><data key="typeName">copy_object</data><data key="name">M.Workspace.copy_object</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Copy an object. Returns the object_info for the newest version.</data></node><node id="M.KBaseExpression.get_expression_samples_data_by_ontology_ids"><data key="typeName">get_expression_samples_data_by_ontology_ids</data><data key="name">M.KBaseExpression.get_expression_samples_data_by_ontology_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a list of ontologyIDs, AndOr operator (and requires sample to have all ontology IDs, or sample has to have any of the terms), GenomeId, 
SampleType ( controlled vocabulary : microarray, RNA-Seq, qPCR, or proteomics), wildTypeOnly returns OntologyID(concatenated if Anded) -&gt; ExpressionDataSample</data></node><node id="D.NarrativeJobService.script_method"><data key="typeName">script_method</data><data key="name">D.NarrativeJobService.script_method</data><data key="moduleName">NarrativeJobService</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBasePPI.Date"><data key="typeName">Date</data><data key="name">D.KBasePPI.Date</data><data key="moduleName">KBasePPI</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.KBaseExpression.get_expression_series_ids_by_series_external_source_ids"><data key="typeName">get_expression_series_ids_by_series_external_source_ids</data><data key="name">M.KBaseExpression.get_expression_series_ids_by_series_external_source_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">get series ids by the series's external source id : Takes a list of series external source ids, and returns a list of series ids</data></node><node id="D.Workspace.ObjectSaveData"><data key="typeName">ObjectSaveData</data><data key="name">D.Workspace.ObjectSaveData</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">An object and associated data required for saving.

        Required arguments:
        type_string type - the type of the object. Omit the version information
                to use the latest version.
        UnspecifiedObject data - the object data.
        
        Optional arguments:
        One of an object name or id. If no name or id is provided the name
                will be set to 'auto' with the object id appended as a string,
                possibly with -\d+ appended if that object id already exists as a
                name.
        obj_name name - the name of the object.
        obj_id objid - the id of the object to save over.
        usermeta meta - arbitrary user-supplied metadata for the object,
                not to exceed 16kb; if the object type specifies automatic
                metadata extraction with the 'meta ws' annotation, and your
                metadata name conflicts, then your metadata will be silently
                overwritten.
        list&lt;ProvenanceAction&gt; provenance - provenance data for the object.
        boolean hidden - true if this object should not be listed when listing
                workspace objects.</data></node><node id="D.KBaseFBA.ModelGapfill"><data key="typeName">ModelGapfill</data><data key="name">D.KBaseFBA.ModelGapfill</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">ModelGapfill object
 
@optional integrated_solution
@optional fba_ref
@optional gapfill_ref</data></node><node id="D.KBaseFBA.expression_sample_ref"><data key="typeName">expression_sample_ref</data><data key="name">D.KBaseFBA.expression_sample_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to expression data
@id ws KBaseExpression.ExpressionSample</data></node><node id="M.KBaseDataImport.import_ncbi_genome"><data key="typeName">import_ncbi_genome</data><data key="name">M.KBaseDataImport.import_ncbi_genome</data><data key="moduleName">KBaseDataImport</data><data key="nodeType">M</data><data key="comment">Import genome from NCBI FTP 'ftp://ftp.ncbi.nih.gov/genomes/Bacteria/' into worspace object</data></node><node id="D.PROM.PromConstraint"><data key="typeName">PromConstraint</data><data key="name">D.PROM.PromConstraint</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">An object that encapsulates the information necessary to apply PROM-based constraints to an FBA model. This
includes a regulatory network consisting of a set of regulatory interactions (implied by the set of TFMap
objects) and interaction probabilities as defined in each regulatory_target object.  A link the the annotation
object is required in order to properly link to an FBA model object.  A reference to the expression_data_collection
used to compute the interaction probabilities is provided for future reference.

    prom_constraints_id id                                         - the id of this prom_constraints object in a
                                                                    workspace
    annotation_uuid annotation_uuid                               - the id of the annotation object in the workspace
                                                                    which specfies how TFs and targets are named
    list &lt;TFMap&gt; transcriptionFactorMaps                          - the list of TFMaps which specifies both the
                                                                    regulatory network and interaction probabilities
                                                                    between TF and target genes
    expression_data_collection_id expression_data_collection_id   - the id of the expresion_data_collection object in
                                                                    the workspace which was used to compute the
                                                                    regulatory interaction probabilities

@deprecated</data></node><node id="D.KBaseBiochem.genome_id"><data key="typeName">genome_id</data><data key="name">D.KBaseBiochem.genome_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">KBase genome ID
@id kb</data></node><node id="M.Transform.version"><data key="typeName">version</data><data key="name">M.Transform.version</data><data key="moduleName">Transform</data><data key="nodeType">M</data><data key="comment">Returns the service version string.</data></node><node id="D.ExpressionServices.expression_platform_id"><data key="typeName">expression_platform_id</data><data key="name">D.ExpressionServices.expression_platform_id</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">id for the expression platform

@id ws ExpressionServices.ExpressionPlatform

"ws" may go to "to" in the future</data></node><node id="D.AskKB.cwd"><data key="typeName">cwd</data><data key="name">D.AskKB.cwd</data><data key="moduleName">AskKB</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.GenomeAnnotation.fid"><data key="typeName">fid</data><data key="name">D.GenomeAnnotation.fid</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseGenomes.Contig"><data key="typeName">Contig</data><data key="name">D.KBaseGenomes.Contig</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Type spec for a "Contig" subobject in the "ContigSet" object

                Contig_id id - ID of contig in contigset
                string md5 - unique hash of contig sequence
                string sequence - sequence of the contig
                string description - Description of the contig (e.g. everything after the ID in a FASTA file)

                @optional length md5 genetic_code cell_compartment replicon_geometry replicon_type name description complete</data></node><node id="D.ExpressionServices.strain_id"><data key="typeName">strain_id</data><data key="name">D.ExpressionServices.strain_id</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">KBase StrainID</data></node><node id="D.KBaseExpression.ExpressionDataSample"><data key="typeName">ExpressionDataSample</data><data key="name">D.KBaseExpression.ExpressionDataSample</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Data structure for all the top level metadata and value data for an expression sample.  Essentially a expression Sample object.</data></node><node id="D.KBaseNetworks.Dataset"><data key="typeName">Dataset</data><data key="name">D.KBaseNetworks.Dataset</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">D</data><data key="comment">Represents a particular dataset.
string id - A unique  identifier of a dataset 
        string name - The name of a dataset
        string description - Description of a dataset
        network_type networkType - Type of network that can be generated from a given dataset
dataset_source_ref sourceReference - Reference to a dataset source
list&lt;taxon&gt; taxons - A list of NCBI taxonomy ids of all organisms for which genomic features (genes, proteins, etc) are used in a given dataset 
        mapping&lt;string,string&gt; properties - Other properties</data></node><node id="D.GenomeAnnotation.close_genome"><data key="typeName">close_genome</data><data key="name">D.GenomeAnnotation.close_genome</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseBiochem.media_id"><data key="typeName">media_id</data><data key="name">D.KBaseBiochem.media_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Media ID
@id kb</data></node><node id="D.KBaseFBA.gapgen_id"><data key="typeName">gapgen_id</data><data key="name">D.KBaseFBA.gapgen_id</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Gapgen ID
@id kb</data></node><node id="D.KBaseExpression.external_source_ids"><data key="typeName">external_source_ids</data><data key="name">D.KBaseExpression.external_source_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">list of externalSourceIDs</data></node><node id="D.KBaseBiochem.ReactionGroup"><data key="typeName">ReactionGroup</data><data key="name">D.KBaseBiochem.ReactionGroup</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">ReactionGroup object

@optional substrate_path product_path spline dasharray</data></node><node id="M.Workspace.create_workspace"><data key="typeName">create_workspace</data><data key="name">M.Workspace.create_workspace</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Creates a new workspace.</data></node><node id="D.KBaseBiochem.Compound"><data key="typeName">Compound</data><data key="name">D.KBaseBiochem.Compound</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Compound object

@optional md5 formula unchargedFormula mass deltaG deltaGErr abstractCompound_ref comprisedOfCompound_refs structure_ref cues pkas pkbs
    @searchable ws_subset id isCofactor name abbreviation md5 formula unchargedFormula mass defaultCharge deltaG abstractCompound_ref comprisedOfCompound_refs structure_ref cues</data></node><node id="D.Tree.phylo_xml_tree"><data key="typeName">phylo_xml_tree</data><data key="name">D.Tree.phylo_xml_tree</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">Trees are represented in KBase by default in newick format (http://en.wikipedia.org/wiki/Newick_format),
but can optionally be converted to the more verbose phyloXML format, which is useful for compatibility or
when additional information/annotations decorate the tree.</data></node><node id="D.KBaseTrees.job_id"><data key="typeName">job_id</data><data key="name">D.KBaseTrees.job_id</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">A string representing a job id for manipulating trees. This is an id for a job that is
registered with the User and Job State service.</data></node><node id="M.Transform.upload"><data key="typeName">upload</data><data key="name">M.Transform.upload</data><data key="moduleName">Transform</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseTrees.viz_val_string"><data key="typeName">viz_val_string</data><data key="name">D.KBaseTrees.viz_val_string</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Communities.StatList"><data key="typeName">StatList</data><data key="name">D.Communities.StatList</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseGenomes.region_of_dna"><data key="typeName">region_of_dna</data><data key="name">D.KBaseGenomes.region_of_dna</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">A region of DNA is maintained as a tuple of four components:

                the contig
                the beginning position (from 1)
                the strand
                the length

           We often speak of "a region".  By "location", we mean a sequence
           of regions from the same genome (perhaps from distinct contigs).</data></node><node id="D.KBaseTrees.tree_leaf_id"><data key="typeName">tree_leaf_id</data><data key="name">D.KBaseTrees.tree_leaf_id</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseOntology.GeneOntologyAnnotation"><data key="typeName">GeneOntologyAnnotation</data><data key="name">D.KBaseOntology.GeneOntologyAnnotation</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment">Structure for GeneOntologyAnnotations
@optional source</data></node><node id="M.AbstractHandle.persist_handle"><data key="typeName">persist_handle</data><data key="name">M.AbstractHandle.persist_handle</data><data key="moduleName">AbstractHandle</data><data key="nodeType">M</data><data key="comment">The persist_handle writes the handle to a persistent store
that can be later retrieved using the list_handles
function.</data></node><node id="D.KBaseProteinStructure.chains_t"><data key="typeName">chains_t</data><data key="name">D.KBaseProteinStructure.chains_t</data><data key="moduleName">KBaseProteinStructure</data><data key="nodeType">D</data><data key="comment">subchains of a match, i.e. "(A,C,D)"</data></node><node id="D.Workspace.jsonschema"><data key="typeName">jsonschema</data><data key="name">D.Workspace.jsonschema</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">The JSON Schema (v4) representation of a type definition.</data></node><node id="D.KBaseFBA.Biomass"><data key="typeName">Biomass</data><data key="name">D.KBaseFBA.Biomass</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Biomass object</data></node><node id="D.KBaseGwasData.topVariationUnit"><data key="typeName">topVariationUnit</data><data key="name">D.KBaseGwasData.topVariationUnit</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">TopVariation Unit</data></node><node id="D.KBaseExpression.strain_ids"><data key="typeName">strain_ids</data><data key="name">D.KBaseExpression.strain_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">list of KBase StrainIDs</data></node><node id="D.ExpressionServices.experimental_unit_ids"><data key="typeName">experimental_unit_ids</data><data key="name">D.ExpressionServices.experimental_unit_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">list of KBase ExperimentalUnit IDs</data></node><node id="D.GenomeAnnotation.variant_of_subsystem"><data key="typeName">variant_of_subsystem</data><data key="name">D.GenomeAnnotation.variant_of_subsystem</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Ontology.GoIDMap2GoTermInfo"><data key="typeName">GoIDMap2GoTermInfo</data><data key="name">D.Ontology.GoIDMap2GoTermInfo</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseFBA.GapfillingReaction"><data key="typeName">GapfillingReaction</data><data key="name">D.KBaseFBA.GapfillingReaction</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">GapFillingReaction object holds data on a reaction added by gapfilling analysis

@optional compartmentIndex round</data></node><node id="M.KBaseTrees.construct_tree_for_alignment"><data key="typeName">construct_tree_for_alignment</data><data key="name">M.KBaseTrees.construct_tree_for_alignment</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Build a tree based on MSA object.</data></node><node id="D.KBaseGwasData.VariationSamplesMetaData"><data key="typeName">VariationSamplesMetaData</data><data key="name">D.KBaseGwasData.VariationSamplesMetaData</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">Complete List of Variation MetaData</data></node><node id="D.KBaseExpression.contact_email"><data key="typeName">contact_email</data><data key="name">D.KBaseExpression.contact_email</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Email for the GSM contact person</data></node><node id="D.KBaseGenomes.Genome_ref"><data key="typeName">Genome_ref</data><data key="name">D.KBaseGenomes.Genome_ref</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Reference to a Genome object in the workspace
@id ws KBaseGenomes.Genome</data></node><node id="D.ExpressionServices.gsm_errors"><data key="typeName">gsm_errors</data><data key="name">D.ExpressionServices.gsm_errors</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">List of GSM level errors</data></node><node id="D.KBaseGwasData.variation_details"><data key="typeName">variation_details</data><data key="name">D.KBaseGwasData.variation_details</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">Details of significant variations

       id - id of contig
       position - base position of snp
       pvalue - pvalue of association in GWAS analysis 
       minus_log_pvalue - kept for consistency with widgets</data></node><node id="M.GenomeAnnotation.annotate_proteins"><data key="typeName">annotate_proteins</data><data key="name">M.GenomeAnnotation.annotate_proteins</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.Ontology.ontology_annotation_list"><data key="typeName">ontology_annotation_list</data><data key="name">D.Ontology.ontology_annotation_list</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseOntology.role_ref"><data key="typeName">role_ref</data><data key="name">D.KBaseOntology.role_ref</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment">Reference to a role
@id subws KBaseOntology.Mapping.roles.[*].id</data></node><node id="D.Communities.FunctionalMatrix"><data key="typeName">FunctionalMatrix</data><data key="name">D.Communities.FunctionalMatrix</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseGenomes.location"><data key="typeName">location</data><data key="name">D.KBaseGenomes.location</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">a "location" refers to a list of regions of DNA on contigs</data></node><node id="M.Workspace.get_object_info_new"><data key="typeName">get_object_info_new</data><data key="name">M.Workspace.get_object_info_new</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Get information about objects from the workspace.</data></node><node id="D.GenomeAnnotation.fid_function_pairs"><data key="typeName">fid_function_pairs</data><data key="name">D.GenomeAnnotation.fid_function_pairs</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseRegulation.RegulatorySite"><data key="typeName">RegulatorySite</data><data key="name">D.KBaseRegulation.RegulatorySite</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents a regulatory site. For instance it can be transcription factor binding site, or RNA regulatory element
regulatory_site_id regulatory_site_id - site identifier  
string sequence - DNA sequence of regulatory site
int position - position of site relative to the regulated gene
float score - strength of the site (similarity to TFBS motif, or RNA profile)        
list&lt;Evidence&gt; evidesnces - evidences of the regualtory site

@optional position score evidesnces regulatory_mechanism</data></node><node id="M.KBaseExpression.get_expression_samples_data_by_experimental_unit_ids"><data key="typeName">get_expression_samples_data_by_experimental_unit_ids</data><data key="name">M.KBaseExpression.get_expression_samples_data_by_experimental_unit_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a list of ExperimentalUnitIDs returns mapping of ExperimentalUnitID to expressionDataSamples : {experimental_unit_id -&gt; {sample_id -&gt; expressionSampleDataStructure}}</data></node><node id="D.KBaseExpression.gse_warnings"><data key="typeName">gse_warnings</data><data key="name">D.KBaseExpression.gse_warnings</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">List of GSE level warnings</data></node><node id="D.KBaseExpression.sample_type"><data key="typeName">sample_type</data><data key="name">D.KBaseExpression.sample_type</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Sample type controlled vocabulary : microarray, RNA-Seq, qPCR, or proteomics</data></node><node id="D.GenomeAnnotation.resolve_overlapping_features_parameters"><data key="typeName">resolve_overlapping_features_parameters</data><data key="name">D.GenomeAnnotation.resolve_overlapping_features_parameters</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseBiochem.Cue"><data key="typeName">Cue</data><data key="name">D.KBaseBiochem.Cue</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Cue object

@optional mass deltaGErr deltaG defaultCharge structure_key structure_data structure_type
    @searchable ws_subset structure_key id name abbreviation formula unchargedFormula mass defaultCharge deltaG smallMolecule priority structure_key structure_data</data></node><node id="D.KBasePPI.InteractionID"><data key="typeName">InteractionID</data><data key="name">D.KBasePPI.InteractionID</data><data key="moduleName">KBasePPI</data><data key="nodeType">D</data><data key="comment">@id kb</data></node><node id="M.Workspace.delete_workspace"><data key="typeName">delete_workspace</data><data key="name">M.Workspace.delete_workspace</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Delete a workspace. All objects contained in the workspace are deleted.</data></node><node id="M.GenomeAnnotation.call_features_CDS_prodigal"><data key="typeName">call_features_CDS_prodigal</data><data key="name">M.GenomeAnnotation.call_features_CDS_prodigal</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseGeneFamilies.SearchDomainsParams"><data key="typeName">SearchDomainsParams</data><data key="name">D.KBaseGeneFamilies.SearchDomainsParams</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">D</data><data key="comment">genome_ref genome - genome for domain annotation process
dms_ref dms_ref - set of domain models that will be searched in defined genome
string out_workspace - output workspace
string out_result_id - id of resulting object of type DomainAnnotation</data></node><node id="D.ProteinInfo.operon"><data key="typeName">operon</data><data key="name">D.ProteinInfo.operon</data><data key="moduleName">ProteinInfo</data><data key="nodeType">D</data><data key="comment">An operon is represented by a list of fids
which make up that operon.  The order within the list is not
defined; the fids_to_locations method can report on the
order of the fids in the operon.</data></node><node id="M.Tree.get_leaf_to_feature_map"><data key="typeName">get_leaf_to_feature_map</data><data key="name">M.Tree.get_leaf_to_feature_map</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">Given a tree id, this method returns a mapping from a tree's unique internal ID to
a KBase feature ID if and only if a cannonical feature id exists.</data></node><node id="D.MAK.StringDataTable"><data key="typeName">StringDataTable</data><data key="name">D.MAK.StringDataTable</data><data key="moduleName">MAK</data><data key="nodeType">D</data><data key="comment">Represents data for a single data table, convention is biological features on y-axis and samples etc. on x
string id - identifier for data table
string name - name or title to display in a plot etc.
list&lt;string&gt; row_ids - kb ids for the row objects
list&lt;string&gt; row_labels - label text to display
list&lt;string&gt; row_groups - group labels for rows
list&lt;string&gt; column_groups_ids - kb ids for group objects
list&lt;string&gt; column_ids - kb ids for the column objects
list&lt;string&gt; column_labels - label text to display
list&lt;string&gt; column_groups - group labels for columns
list&lt;string&gt; column_groups_ids - kb ids for group objects
list&lt;list&lt;string&gt;&gt; data - a list of rows of strings, non-numeric values represented as 'null'

@optional id
@optional name
@optional row_ids
@optional row_groups
@optional column_ids
@optional column_groups</data></node><node id="D.KBaseFBA.FBA"><data key="typeName">FBA</data><data key="name">D.KBaseFBA.FBA</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">FBA object holds the formulation and results of a flux balance analysis study

@optional gapfillingSolutions QuantitativeOptimizationSolutions quantitativeOptimization minimize_reactions minimize_reaction_costs FBATintleResults FBAMinimalReactionsResults PROMKappa phenotypesimulationset_ref objectiveValue phenotypeset_ref promconstraint_ref regulome_ref tintlesample_ref tintleW tintleKappa
@metadata ws maximizeObjective as Maximized
    @metadata ws comboDeletions as Combination deletions
    @metadata ws minimize_reactions as Minimize reactions
    @metadata ws regulome_ref as Regulome
    @metadata ws fbamodel_ref as Model
    @metadata ws promconstraint_ref as PromConstraint
    @metadata ws media_ref as Media
    @metadata ws objectiveValue as Objective
    @metadata ws length(biomassflux_objterms) as Number biomass objectives
    @metadata ws length(geneKO_refs) as Number gene KO
    @metadata ws length(reactionKO_refs) as Number reaction KO
    @metadata ws length(additionalCpd_refs) as Number additional compounds
    @metadata ws length(FBAConstraints) as Number constraints
    @metadata ws length(FBAReactionBounds) as Number reaction bounds
    @metadata ws length(FBACompoundBounds) as Number compound bounds
    @metadata ws length(FBACompoundVariables) as Number compound variables
    @metadata ws length(FBAReactionVariables) as Number reaction variables</data></node><node id="D.KBaseNetworks.network_type"><data key="typeName">network_type</data><data key="name">D.KBaseNetworks.network_type</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">D</data><data key="comment">Type of network that can be created from a dataset</data></node><node id="D.UserProfile.username"><data key="typeName">username</data><data key="name">D.UserProfile.username</data><data key="moduleName">UserProfile</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.Workspace.get_all_func_info"><data key="typeName">get_all_func_info</data><data key="name">M.Workspace.get_all_func_info</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseFBA.source_id"><data key="typeName">source_id</data><data key="name">D.KBaseFBA.source_id</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Source ID
@id external</data></node><node id="D.KBaseFBA.ExternalGenomeClassPrediction"><data key="typeName">ExternalGenomeClassPrediction</data><data key="name">D.KBaseFBA.ExternalGenomeClassPrediction</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.KBaseExpression.get_expression_samples_data_by_genome_ids"><data key="typeName">get_expression_samples_data_by_genome_ids</data><data key="name">M.KBaseExpression.get_expression_samples_data_by_genome_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a list of Genomes, a SampleType ( controlled vocabulary : microarray, RNA-Seq, qPCR, or proteomics) 
and a int indicating WildTypeOnly (1 = true, 0 = false) , it returns a GenomeExpressionDataSamplesMapping   ,  
GenomeId -&gt; StrainId -&gt; ExpressionDataSample.  StrainId -&gt; ExpressionSampleDataStructure {genome_id -&gt; {strain_id -&gt; {sample_id -&gt; expressionSampleDataStructure}}}</data></node><node id="M.InvocationService.valid_commands"><data key="typeName">valid_commands</data><data key="name">M.InvocationService.valid_commands</data><data key="moduleName">InvocationService</data><data key="nodeType">M</data><data key="comment">* Retrieve the set of valid commands.
*
* Note that this does not require authentication or a valid session, and thus
* may be used to set up a graphical interface before a login is done.</data></node><node id="D.MAK.MAKInputData"><data key="typeName">MAKInputData</data><data key="name">D.MAK.MAKInputData</data><data key="moduleName">MAK</data><data key="nodeType">D</data><data key="comment">MAK dataset source 

        string taxon - NCBI taxonomy id
        string genome_id - kbase id of genome
        genome_ws_ref genome_ref - ws genome object reference
        string id - kbase id
        string ws_id - reference to workspace id of FloatDataTable object for input data
        string data_type - type of data: "expression", "fitness"
        string description - description
        string dataPath - path to data
    int num_rows - number of rows
    int num_columns - number of columns
                  
    @optional id
    @optional dataPath
    @optional num_rows
    @optional num_cols
        @searchable ws_subset taxon id description</data></node><node id="D.Workspace.RegisterTypespecCopyParams"><data key="typeName">RegisterTypespecCopyParams</data><data key="name">D.Workspace.RegisterTypespecCopyParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Parameters for the register_typespec_copy function.

        Required arguments:
        string external_workspace_url - the URL of the  workspace server from
                which to copy a typespec.
        modulename mod - the name of the module in the workspace server
        
        Optional arguments:
        spec_version version - the version of the module in the workspace
                server</data></node><node id="M.ExpressionServices.get_expression_sample_ids_by_series_ids"><data key="typeName">get_expression_sample_ids_by_series_ids</data><data key="name">M.ExpressionServices.get_expression_sample_ids_by_series_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a list of SeriesIDs returns a list of Sample IDs</data></node><node id="M.KBaseExpression.get_on_off_calls"><data key="typeName">get_on_off_calls</data><data key="name">M.KBaseExpression.get_on_off_calls</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">Takes in comparison results.  If the value is &gt;= on_threshold it is deemed on (1), if &lt;= off_threshold it is off(-1), meets none then 0.  Thresholds normally set to zero.
returns SampleComparisonMapping {numerator_sample_id(or label)-&gt;{denominator_sample_id(or label)-&gt;{feature_id(or label) -&gt; on_off_call (possible values 0,-1,1)}}}</data></node><node id="M.MOTranslation.moLocusIds_to_fid_in_genome_fast"><data key="typeName">moLocusIds_to_fid_in_genome_fast</data><data key="name">M.MOTranslation.moLocusIds_to_fid_in_genome_fast</data><data key="moduleName">MOTranslation</data><data key="nodeType">M</data><data key="comment">Performs the same function as moLocusIds_to_fid_in_genome, but does not retrieve protein sequences for the locus Ids - it simply
uses md5 information and start/stop positions to identify matches.  It is therefore faster, but will not work if genomes are not
identical.</data></node><node id="D.AskKB.session_id"><data key="typeName">session_id</data><data key="name">D.AskKB.session_id</data><data key="moduleName">AskKB</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Inferelator.InferelatorRunResult"><data key="typeName">InferelatorRunResult</data><data key="name">D.Inferelator.InferelatorRunResult</data><data key="moduleName">Inferelator</data><data key="nodeType">D</data><data key="comment">Represents data from a single run of Inferelator
string id - identifier of Inferelator run result
string organism - organism name
InferelatorRunParameters params - run parameters
list &lt;InferelatorHit&gt; hits - list of hits

@optional organism hits</data></node><node id="D.KBaseRegulation.EffectorCollection"><data key="typeName">EffectorCollection</data><data key="name">D.KBaseRegulation.EffectorCollection</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents collection of effectors (curated vocabulary)
string name - collection name
string description - collection description
list&lt;Effector&gt; effectors - list of effectors</data></node><node id="D.AskKB.rows"><data key="typeName">rows</data><data key="name">D.AskKB.rows</data><data key="moduleName">AskKB</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.UserProfile.User"><data key="typeName">User</data><data key="name">D.UserProfile.User</data><data key="moduleName">UserProfile</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseBiochem.MediaReagent"><data key="typeName">MediaReagent</data><data key="name">D.KBaseBiochem.MediaReagent</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">MediaReagent object

@optional molecular_weight concentration_units concentration associated_compounds</data></node><node id="D.KBaseSearch.transcriptset_ref"><data key="typeName">transcriptset_ref</data><data key="name">D.KBaseSearch.transcriptset_ref</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Reference to a TranscriptSet object containing the transcripts for this genome in the workspace
@id ws KBaseSearch.TranscriptSet</data></node><node id="D.GenomeAnnotation.fid_role_pairs"><data key="typeName">fid_role_pairs</data><data key="name">D.GenomeAnnotation.fid_role_pairs</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseGenomes.Genome_quality_measure"><data key="typeName">Genome_quality_measure</data><data key="name">D.KBaseGenomes.Genome_quality_measure</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">@optional frameshift_error_rate sequence_error_rate</data></node><node id="D.KBaseGenomes.FeatureDomainData"><data key="typeName">FeatureDomainData</data><data key="name">D.KBaseGenomes.FeatureDomainData</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">FeatureDomain - a subobject holding information on how a domain appears in a gene
string id - numerical ID assigned by KBase
string source_id - assession ID from CDD database;
string type - type of CDD, possible values are cd, pfam, smart, COG, PRK, CHL
string name - name of CDD
string description - description of CDD

@optional feature_ref domains</data></node><node id="D.KBaseExpression.meta_data_only"><data key="typeName">meta_data_only</data><data key="name">D.KBaseExpression.meta_data_only</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Single integer 1= metaDataOnly, 0 means returns data</data></node><node id="M.KBaseExpression.get_expression_data_by_samples_and_features"><data key="typeName">get_expression_data_by_samples_and_features</data><data key="name">M.KBaseExpression.get_expression_data_by_samples_and_features</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a list of sample ids and feature ids and the string of what type of numerical interpretation it returns a LabelDataMapping {sampleID}-&gt;{featureId =&gt; value}}. 
If sample id list is an empty array [], all samples with that feature measurment values will be returned.
If feature list is an empty array [], all features with measurment values will be returned. 
Both sample id list and feature list can not be empty, one of them must have a value.
Numerical_interpretation options : 'FPKM', 'Log2 level intensities', 'Log2 level ratios' or 'Log2 level ratios genomic DNA control'</data></node><node id="M.Tree.extract_leaf_node_names"><data key="typeName">extract_leaf_node_names</data><data key="name">M.Tree.extract_leaf_node_names</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">Given a tree in newick format, list the names of the leaf nodes.</data></node><node id="D.KBaseCommunities.Abundance1DTableInt"><data key="typeName">Abundance1DTableInt</data><data key="name">D.KBaseCommunities.Abundance1DTableInt</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment">TaxonomicProfile, FunctionalProfile</data></node><node id="M.ServiceRegistry.update_nginx"><data key="typeName">update_nginx</data><data key="name">M.ServiceRegistry.update_nginx</data><data key="moduleName">ServiceRegistry</data><data key="nodeType">M</data><data key="comment">Update the nginx conf file. This function should be considered
private in so far as it would only be called from the 
register_service and deregister_service.</data></node><node id="D.KBaseExpression.external_source_id"><data key="typeName">external_source_id</data><data key="name">D.KBaseExpression.external_source_id</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">externalSourceId (could be for Platform, Sample or Series)(typically maps to a GPL, GSM or GSE from GEO)</data></node><node id="D.KBaseExpression.expression_sample_id"><data key="typeName">expression_sample_id</data><data key="name">D.KBaseExpression.expression_sample_id</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">id for the expression sample

@id ws KBaseExpression.ExpressionSample</data></node><node id="D.GenomeAnnotation.kmer_v1_parameters"><data key="typeName">kmer_v1_parameters</data><data key="name">D.GenomeAnnotation.kmer_v1_parameters</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseGwasData.contig_details"><data key="typeName">contig_details</data><data key="name">D.KBaseGwasData.contig_details</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">Details of contigs</data></node><node id="D.KBaseNetworks.boolean"><data key="typeName">boolean</data><data key="name">D.KBaseNetworks.boolean</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">D</data><data key="comment">A boolean. 0 = false, other = true.</data></node><node id="M.KBaseExpression.get_expression_sample_ids_by_series_ids"><data key="typeName">get_expression_sample_ids_by_series_ids</data><data key="name">M.KBaseExpression.get_expression_sample_ids_by_series_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a list of SeriesIDs returns a list of Sample IDs</data></node><node id="M.Transform.download"><data key="typeName">download</data><data key="name">M.Transform.download</data><data key="moduleName">Transform</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.UserAndJobState.progress_type"><data key="typeName">progress_type</data><data key="name">D.UserAndJobState.progress_type</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">The type of progress that is being tracked. One of:
'none' - no numerical progress tracking
'task' - Task based tracking, e.g. 3/24
'percent' - percentage based tracking, e.g. 5/100%</data></node><node id="M.KmerAnnotationByFigfam.get_dataset_names"><data key="typeName">get_dataset_names</data><data key="name">M.KmerAnnotationByFigfam.get_dataset_names</data><data key="moduleName">KmerAnnotationByFigfam</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseNetworks.Node"><data key="typeName">Node</data><data key="name">D.KBaseNetworks.Node</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">D</data><data key="comment">Represents a node in a network.
string id - A unique  identifier of a node 
                string name - String representation of a node. It should be a concise but informative representation that is easy for a person to read.
     string entity_id - The identifier of a  entity represented by a given node 
                node_type type - The type of a node
     mapping&lt;string,string&gt; properties - Other properties of a node
     mapping&lt;string,string&gt; user_annotations - User annotations of a node</data></node><node id="D.Communities.Drisee"><data key="typeName">Drisee</data><data key="name">D.Communities.Drisee</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.ExpressionServices.get_expression_sample_ids_by_strain_ids"><data key="typeName">get_expression_sample_ids_by_strain_ids</data><data key="name">M.ExpressionServices.get_expression_sample_ids_by_strain_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a list of Strains, and a SampleType, it returns a list of Sample IDs</data></node><node id="D.GenomeAnnotation.feature_id"><data key="typeName">feature_id</data><data key="name">D.GenomeAnnotation.feature_id</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.GenomeAnnotation.create_genome_from_SEED"><data key="typeName">create_genome_from_SEED</data><data key="name">M.GenomeAnnotation.create_genome_from_SEED</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Create a new genome object based on data from the SEED project.</data></node><node id="M.MEME.find_sites_with_mast_by_collection"><data key="typeName">find_sites_with_mast_by_collection</data><data key="name">M.MEME.find_sites_with_mast_by_collection</data><data key="moduleName">MEME</data><data key="nodeType">M</data><data key="comment">Returns MastRunResult containing list of MAST hits
MAST will be run with -hit_list parameter
MemePSPMCollection query - query motifs for MAST run
SequenceSet target - target sequences for MAST run
MastRunParameters params - parameters of MAST run</data></node><node id="D.NarrativeJobService.step"><data key="typeName">step</data><data key="name">D.NarrativeJobService.step</data><data key="moduleName">NarrativeJobService</data><data key="nodeType">D</data><data key="comment">type - 'service' or 'script'.
job_id_output_field - this field is used only in case this step is long running job and
    output of service method is structure with field having name coded in 
    'job_id_output_field' rather than just output string with job id.</data></node><node id="D.PROM.feature_id"><data key="typeName">feature_id</data><data key="name">D.PROM.feature_id</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">A KBase ID for a genome feature</data></node><node id="M.Workspace.list_workspaces"><data key="typeName">list_workspaces</data><data key="name">M.Workspace.list_workspaces</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Lists the metadata of all workspaces a user has access to. Provided for
backwards compatibility - to be replaced by the functionality of
list_workspace_info

@deprecated Workspace.list_workspace_info</data></node><node id="D.KBaseTrees.TreeDecoration"><data key="typeName">TreeDecoration</data><data key="name">D.KBaseTrees.TreeDecoration</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">something looks strange with this field:  it was removed so we can compile
 mapping&lt;tree_leaf_id tree_leaf_id, tuple&lt;string substructure_label, string&gt; substructure_by_leaf;</data></node><node id="M.RDPTools.seqmatch_check"><data key="typeName">seqmatch_check</data><data key="name">M.RDPTools.seqmatch_check</data><data key="moduleName">RDPTools</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.ExpressionServices.get_expression_samples_descriptions"><data key="typeName">get_expression_samples_descriptions</data><data key="name">M.ExpressionServices.get_expression_samples_descriptions</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a List of SampleIDs, returns a Hash (key : SampleID, value: Description of Sample)</data></node><node id="D.ExpressionServices.expression_data_samples_map"><data key="typeName">expression_data_samples_map</data><data key="name">D.ExpressionServices.expression_data_samples_map</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Mapping between sampleID and ExpressionDataSample</data></node><node id="D.ExpressionServices.genome_id"><data key="typeName">genome_id</data><data key="name">D.ExpressionServices.genome_id</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">KBase GenomeID 
id ws KB.Genome

"ws" may change to "to" in the future</data></node><node id="M.GenomeAnnotation.call_features_prophage_phispy"><data key="typeName">call_features_prophage_phispy</data><data key="name">M.GenomeAnnotation.call_features_prophage_phispy</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.MAK.network_ws_ref"><data key="typeName">network_ws_ref</data><data key="name">D.MAK.network_ws_ref</data><data key="moduleName">MAK</data><data key="nodeType">D</data><data key="comment">Represents WS network identifier
@id ws Networks.InteractionSet</data></node><node id="M.KBaseNetworks.all_network_types"><data key="typeName">all_network_types</data><data key="name">M.KBaseNetworks.all_network_types</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">M</data><data key="comment">Returns a list of all types of networks that can be created</data></node><node id="M.RDPTools.classify_submit"><data key="typeName">classify_submit</data><data key="name">M.RDPTools.classify_submit</data><data key="moduleName">RDPTools</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.GenomeAnnotation.add_features"><data key="typeName">add_features</data><data key="name">M.GenomeAnnotation.add_features</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Add a set of features in tabular form.</data></node><node id="D.Workspace.AlterWorkspaceMetadataParams"><data key="typeName">AlterWorkspaceMetadataParams</data><data key="name">D.Workspace.AlterWorkspaceMetadataParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Input parameters for the "alter_workspace_metadata" function.

Required arguments:
WorkspaceIdentity wsi - the workspace to be altered

One or both of the following arguments are required:
usermeta new - metadata to assign to the workspace. Duplicate keys will
        be overwritten.
list&lt;string&gt; remove - these keys will be removed from the workspace
        metadata key/value pairs.</data></node><node id="M.Tree.get_tree_ids_by_protein_sequence"><data key="typeName">get_tree_ids_by_protein_sequence</data><data key="name">M.Tree.get_tree_ids_by_protein_sequence</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">Given a list of kbase ids of a protein sequences (their MD5s), retrieve the tree ids of trees that
were built based on these sequences.</data></node><node id="D.KBaseBiochem.compartment_ref"><data key="typeName">compartment_ref</data><data key="name">D.KBaseBiochem.compartment_ref</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Reference to a compartment object in a biochemistry
@id subws KBaseBiochem.Biochemistry.compartments.[*].id</data></node><node id="M.GenomeAnnotation.call_selenoproteins"><data key="typeName">call_selenoproteins</data><data key="name">M.GenomeAnnotation.call_selenoproteins</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseTrees.ConstructMultipleAlignmentParams"><data key="typeName">ConstructMultipleAlignmentParams</data><data key="name">D.KBaseTrees.ConstructMultipleAlignmentParams</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">Input data type for construct_multiple_alignment method. Method produces object of MSA type.

        gene_sequences - (required) the mapping from gene ids to their sequences
        alignment_method - (optional) alignment program, one of: Muscle, Clustal, ProbCons, T-Coffee, 
                Mafft (default is Clustal).
        is_protein_mode - (optional) 1 in case sequences are amino acids, 0 in case of nucleotides 
                (default value is 1).
        out_workspace - (required) the workspace to deposit the completed alignment
        out_msa_id - (optional) the name of the newly constructed msa (will be random if not present 
                or null)</data></node><node id="D.ExpressionServices.feature_sample_measurement_mapping"><data key="typeName">feature_sample_measurement_mapping</data><data key="name">D.ExpressionServices.feature_sample_measurement_mapping</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">mapping between FeatureIds and the mappings between samples and log2level mapping</data></node><node id="D.KBaseOntology.ParentTerm"><data key="typeName">ParentTerm</data><data key="name">D.KBaseOntology.ParentTerm</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.PROM.annotation_uuid"><data key="typeName">annotation_uuid</data><data key="name">D.PROM.annotation_uuid</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">the ID of the genome annotation object kept for reference in the prom_constraints object</data></node><node id="M.KBaseExpression.get_GEO_GSE"><data key="typeName">get_GEO_GSE</data><data key="name">M.KBaseExpression.get_GEO_GSE</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a GEO GSE ID, it will return a complex data structure to be put int the upload tab files</data></node><node id="M.KBaseExpression.get_expression_samples_data"><data key="typeName">get_expression_samples_data</data><data key="name">M.KBaseExpression.get_expression_samples_data</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">core function used by many others.  Given a list of KBase SampleIds returns mapping of SampleId to expressionSampleDataStructure (essentially the core Expression Sample Object) : 
{sample_id -&gt; expressionSampleDataStructure}</data></node><node id="D.KBaseGenomes.ContigSet_id"><data key="typeName">ContigSet_id</data><data key="name">D.KBaseGenomes.ContigSet_id</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">KBase contig set ID
@id kb</data></node><node id="D.Workspace.ws_name"><data key="typeName">ws_name</data><data key="name">D.Workspace.ws_name</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">A string used as a name for a workspace.
Any string consisting of alphanumeric characters and "_", ".", or "-"
that is not an integer is acceptable. The name may optionally be
prefixed with the workspace owner's user name and a colon, e.g.
kbasetest:my_workspace.</data></node><node id="D.KBaseNarrative.Metadata"><data key="typeName">Metadata</data><data key="name">D.KBaseNarrative.Metadata</data><data key="moduleName">KBaseNarrative</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseFBA.compound_ref"><data key="typeName">compound_ref</data><data key="name">D.KBaseFBA.compound_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a compound object
@id subws KBaseBiochem.Biochemistry.compounds.[*].id</data></node><node id="D.UserAndJobState.boolean"><data key="typeName">boolean</data><data key="name">D.UserAndJobState.boolean</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">A boolean. 0 = false, other = true.</data></node><node id="M.GenomeComparison.annotate_genome"><data key="typeName">annotate_genome</data><data key="name">M.GenomeComparison.annotate_genome</data><data key="moduleName">GenomeComparison</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.MAK.MAK_run_result_id"><data key="typeName">MAK_run_result_id</data><data key="name">D.MAK.MAK_run_result_id</data><data key="moduleName">MAK</data><data key="nodeType">D</data><data key="comment">Represents WS MAK run result identifier
id ws MAK.MAKRunResult</data></node><node id="D.Cmonkey.network_ws_ref"><data key="typeName">network_ws_ref</data><data key="name">D.Cmonkey.network_ws_ref</data><data key="moduleName">Cmonkey</data><data key="nodeType">D</data><data key="comment">Represents WS network identifier
@id ws KBaseNetworks.InteractionSet</data></node><node id="D.KBaseRegulation.genome_id"><data key="typeName">genome_id</data><data key="name">D.KBaseRegulation.genome_id</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents genome identifier</data></node><node id="D.MEME.meme_run_result_ref"><data key="typeName">meme_run_result_ref</data><data key="name">D.MEME.meme_run_result_ref</data><data key="moduleName">MEME</data><data key="nodeType">D</data><data key="comment">Represents WS MemeRunResult identifier
@id ws MEME.MemeRunResult</data></node><node id="D.Workspace.ListModulesParams"><data key="typeName">ListModulesParams</data><data key="name">D.Workspace.ListModulesParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Parameters for the list_modules() function.

        Optional arguments:
        username owner - only list modules owned by this user.</data></node><node id="D.Ontology.GeneAnnotations"><data key="typeName">GeneAnnotations</data><data key="name">D.Ontology.GeneAnnotations</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">Structure for GeneAnnotations</data></node><node id="M.InvocationService.remove_files"><data key="typeName">remove_files</data><data key="name">M.InvocationService.remove_files</data><data key="moduleName">InvocationService</data><data key="nodeType">M</data><data key="comment">* Remove the given file from the given directory.</data></node><node id="D.Workspace.RenameObjectParams"><data key="typeName">RenameObjectParams</data><data key="name">D.Workspace.RenameObjectParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Input parameters for the 'rename_object' function.

Required arguments:
ObjectIdentity obj - the object to rename.
obj_name new_name - the new name for the object.</data></node><node id="D.KBaseGeneFamilies.ws_lib_id"><data key="typeName">ws_lib_id</data><data key="name">D.KBaseGeneFamilies.ws_lib_id</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">D</data><data key="comment">@id ws KBaseGeneFamilies.DomainLibrary</data></node><node id="D.KBaseGenomes.Protein_id"><data key="typeName">Protein_id</data><data key="name">D.KBaseGenomes.Protein_id</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Genome protein ID
@id external</data></node><node id="D.CoExpression.FilterGenesParams"><data key="typeName">FilterGenesParams</data><data key="name">D.CoExpression.FilterGenesParams</data><data key="moduleName">CoExpression</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Workspace.username"><data key="typeName">username</data><data key="name">D.Workspace.username</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Login name of a KBase user account.</data></node><node id="D.ExpressionServices.person_ids"><data key="typeName">person_ids</data><data key="name">D.ExpressionServices.person_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">list of KBase PersonsIDs</data></node><node id="D.KBaseGwasData.GwasPopulation_obj_id"><data key="typeName">GwasPopulation_obj_id</data><data key="name">D.KBaseGwasData.GwasPopulation_obj_id</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">A reference to GWAS population object
     @id ws  KBaseGwasData.GwasPopulation</data></node><node id="M.ProbabilisticAnnotation.get_rxnprobs"><data key="typeName">get_rxnprobs</data><data key="name">M.ProbabilisticAnnotation.get_rxnprobs</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">M</data><data key="comment">Convert a reaction probability object into a human-readable table.</data></node><node id="M.Workspace.lock_workspace"><data key="typeName">lock_workspace</data><data key="name">M.Workspace.lock_workspace</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Lock a workspace, preventing further changes.

        WARNING: Locking a workspace is permanent. A workspace, once locked,
        cannot be unlocked.
        
        The only changes allowed for a locked workspace are changing user
        based permissions or making a private workspace globally readable,
        thus permanently publishing the workspace. A locked, globally readable
        workspace cannot be made private.</data></node><node id="D.ExpressionServices.contact_email"><data key="typeName">contact_email</data><data key="name">D.ExpressionServices.contact_email</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Email for the GSM contact person</data></node><node id="D.Communities.Sample"><data key="typeName">Sample</data><data key="name">D.Communities.Sample</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.GenomeAnnotation.renumber_features"><data key="typeName">renumber_features</data><data key="name">M.GenomeAnnotation.renumber_features</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Renumber features such that their identifiers are contiguous along contigs.
*</data></node><node id="D.KBaseFile.handle_id"><data key="typeName">handle_id</data><data key="name">D.KBaseFile.handle_id</data><data key="moduleName">KBaseFile</data><data key="nodeType">D</data><data key="comment">A handle id from the Handle Service for a shock node.
@id handle</data></node><node id="D.UserProfile.SetUserProfileParams"><data key="typeName">SetUserProfileParams</data><data key="name">D.UserProfile.SetUserProfileParams</data><data key="moduleName">UserProfile</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Tree.TreeMetaData"><data key="typeName">TreeMetaData</data><data key="name">D.Tree.TreeMetaData</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">Meta data associated with a tree.

    kbase_id alignment_id - if this tree was built from an alignment, this provides that alignment id
    string type - the type of tree; possible values currently are "sequence_alignment" and "genome" for trees
                  either built from a sequence alignment, or imported directly indexed to genomes.
    string status - set to 'active' if this is the latest built tree for a particular gene family
    timestamp date_created - time at which the tree was built/loaded in seconds since the epoch
    string tree_contruction_method - the name of the software used to construct the tree
    string tree_construction_parameters - any non-default parameters of the tree construction method
    string tree_protocol - simple free-form text which may provide additional details of how the tree was built
    int node_count - total number of nodes in the tree
    int leaf_count - total number of leaf nodes in the tree (generally this cooresponds to the number of sequences)
    string source_db - the source database where this tree originated, if one exists
    string source_id - the id of this tree in an external database, if one exists</data></node><node id="M.GenomeAnnotation.call_features_repeat_region_SEED"><data key="typeName">call_features_repeat_region_SEED</data><data key="name">M.GenomeAnnotation.call_features_repeat_region_SEED</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseTrees.position"><data key="typeName">position</data><data key="name">D.KBaseTrees.position</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">Integer number indicating a 1-based position in an amino acid / nucleotide sequence
@range [1,</data></node><node id="D.UserProfile.realname"><data key="typeName">realname</data><data key="name">D.UserProfile.realname</data><data key="moduleName">UserProfile</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.MAK.runall_MAK_job_from_ws"><data key="typeName">runall_MAK_job_from_ws</data><data key="name">M.MAK.runall_MAK_job_from_ws</data><data key="moduleName">MAK</data><data key="nodeType">M</data><data key="comment">Starts MAK server job and returns job ID of the run
string ws_id - workspace id
string kbgid - kbase genome id kbgid
string job_id - identifier of MAK job</data></node><node id="D.ERDB_Service.fields"><data key="typeName">fields</data><data key="name">D.ERDB_Service.fields</data><data key="moduleName">ERDB_Service</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.ExpressionServices.Strain"><data key="typeName">Strain</data><data key="name">D.ExpressionServices.Strain</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Data structure for Strain  (TEMPORARY WORKSPACE TYPED OBJECT SHOULD BE HANDLED IN THE FUTURE IN WORKSPACE COMMON)</data></node><node id="D.MEME.MemeRunParameters"><data key="typeName">MemeRunParameters</data><data key="name">D.MEME.MemeRunParameters</data><data key="moduleName">MEME</data><data key="nodeType">D</data><data key="comment">Contains parameters of a MEME run
string mod - distribution of motifs, acceptable values are "oops", "zoops", "anr"
int nmotifs - maximum number of motifs to find
int minw - minumum motif width
int maxw - maximum motif width
int nsites - number of sites for each motif
int minsites - minimum number of sites for each motif
int maxsites - maximum number of sites for each motif
int pal - force palindromes, acceptable values are 0 and 1
int revcomp - allow sites on + or - DNA strands, acceptable values are 0 and 1
sequence_set_ref source_ref - WS reference to source SequenceSet object
string source_id - id of source SequenceSet object

@optional nmotifs minw maxw nsites minsites maxsites pal revcomp source_ref source_id</data></node><node id="D.KBaseGwasData.GwasPopulationVariation_obj_id"><data key="typeName">GwasPopulationVariation_obj_id</data><data key="name">D.KBaseGwasData.GwasPopulationVariation_obj_id</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">A reference to GWAS population variation object
     @id ws  KBaseGwasData.GwasPopulationVariation</data></node><node id="D.KBaseBiochem.MapLink"><data key="typeName">MapLink</data><data key="name">D.KBaseBiochem.MapLink</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">MapLink object

@optional link</data></node><node id="D.KBaseExpression.contact_last_name"><data key="typeName">contact_last_name</data><data key="name">D.KBaseExpression.contact_last_name</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Last Name of GSM contact person</data></node><node id="M.UserAndJobState.delete_job"><data key="typeName">delete_job</data><data key="name">M.UserAndJobState.delete_job</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Delete a job. Will fail if the job is not complete.
Does not currently work with AWE jobs.</data></node><node id="M.Workspace.save_object"><data key="typeName">save_object</data><data key="name">M.Workspace.save_object</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Saves the input object data and metadata into the selected workspace,
        returning the object_metadata of the saved object. Provided
        for backwards compatibility.
        
@deprecated Workspace.save_objects</data></node><node id="M.GenomeAnnotation.call_features_strep_pneumo_repeat"><data key="typeName">call_features_strep_pneumo_repeat</data><data key="name">M.GenomeAnnotation.call_features_strep_pneumo_repeat</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseRegulation.genome_ref"><data key="typeName">genome_ref</data><data key="name">D.KBaseRegulation.genome_ref</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents WS reference to a genome object
@id ws KBaseGenomes.Genome</data></node><node id="D.KBaseFBA.ClassifierClasses"><data key="typeName">ClassifierClasses</data><data key="name">D.KBaseFBA.ClassifierClasses</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KmerEval.contig_data"><data key="typeName">contig_data</data><data key="name">D.KmerEval.contig_data</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.PROM.add_expression_data_to_collection"><data key="typeName">add_expression_data_to_collection</data><data key="name">M.PROM.add_expression_data_to_collection</data><data key="moduleName">PROM</data><data key="nodeType">M</data><data key="comment">This method provides a way to attach a set of boolean expression data to an expression data collection object created
in the current workspace.  Data collections can thus be composed of both CDS data and user data in this way.  The method
returns a status message providing additional details of the steps that occured or a message that indicates what failed.
If the method fails, then all updates to the expression_data_collection are not made, although some of the boolean gene
expression data may have been created in the workspace (see status message for IDs of the new expession data objects).

Note: when defining expression data, the id field must be explicitly defined.  This will be the ID used to save the expression
data in the workspace.  If expression data with that ID already exists, this method will overwrite that data and you will
have to use the workspace service revert method to undo the change.</data></node><node id="D.Cmonkey.CmonkeyRunResult"><data key="typeName">CmonkeyRunResult</data><data key="name">D.Cmonkey.CmonkeyRunResult</data><data key="moduleName">Cmonkey</data><data key="nodeType">D</data><data key="comment">Represents data from a single run of cMonkey
string id - identifier of cMonkey run
string start_time - start time of cMonkey run
string finish_time - end time of cMonkey run
int iterations_number - number of iterations
int last_iteration - last iteration
CmonkeyRunParameters parameters - run parameters
CmonkeyNetwork network;</data></node><node id="D.KBaseFBA.expression_series_ref"><data key="typeName">expression_series_ref</data><data key="name">D.KBaseFBA.expression_series_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to expression data
@id ws KBaseExpression.ExpressionSeries</data></node><node id="D.ExpressionServices.Person"><data key="typeName">Person</data><data key="name">D.ExpressionServices.Person</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Data structure for Person  (TEMPORARY WORKSPACE TYPED OBJECT SHOULD BE HANDLED IN THE FUTURE IN WORKSPACE COMMON)

##        @searchable ws_subset email last_name institution</data></node><node id="D.KBaseFBA.ModelReactionProteinSubunit"><data key="typeName">ModelReactionProteinSubunit</data><data key="name">D.KBaseFBA.ModelReactionProteinSubunit</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">ModelReactionProteinSubunit object

    @searchable ws_subset role triggering optionalSubunit feature_refs</data></node><node id="D.KBaseOntology.OntologyTerm"><data key="typeName">OntologyTerm</data><data key="name">D.KBaseOntology.OntologyTerm</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment">Structure for OntologyTerm
type is ontology type and it can be a domain_name for GO or it could be a relation type 
name is short description of a term
id is an internal unique id for efficient processing
To compress more, it might be changed to list later
@optional parent_list</data></node><node id="M.Workspace.set_workspace_description"><data key="typeName">set_workspace_description</data><data key="name">M.Workspace.set_workspace_description</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Set the description for a workspace.</data></node><node id="D.Communities.SequenceFile"><data key="typeName">SequenceFile</data><data key="name">D.Communities.SequenceFile</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.GenomeAnnotation.add_contigs"><data key="typeName">add_contigs</data><data key="name">M.GenomeAnnotation.add_contigs</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Add a set of contigs to the genome object.</data></node><node id="D.ExpressionServices.sample_annotation_id"><data key="typeName">sample_annotation_id</data><data key="name">D.ExpressionServices.sample_annotation_id</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Kbase SampleAnnotation ID</data></node><node id="D.KBaseExpression.ontology_ids"><data key="typeName">ontology_ids</data><data key="name">D.KBaseExpression.ontology_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">list of Kbase Ontology IDs</data></node><node id="D.KBaseExpression.sample_ids"><data key="typeName">sample_ids</data><data key="name">D.KBaseExpression.sample_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">List of KBase Sample IDs</data></node><node id="M.MEME.get_pspm_collection_from_meme_result_from_ws"><data key="typeName">get_pspm_collection_from_meme_result_from_ws</data><data key="name">M.MEME.get_pspm_collection_from_meme_result_from_ws</data><data key="moduleName">MEME</data><data key="nodeType">M</data><data key="comment">Converts MemeRunResult into MemePSPMCollection and writes the result to workspace
string ws_name - workspace id
string input_id - KBase ID of source MemeRunResult</data></node><node id="D.TaxonomyTranslation.Names"><data key="typeName">Names</data><data key="name">D.TaxonomyTranslation.Names</data><data key="moduleName">TaxonomyTranslation</data><data key="nodeType">D</data><data key="comment">typedef structure {
string scientific_name;
list&lt;string&gt; common_names;
list&lt;string&gt; synonyms;
list&lt;string&gt; misspellings;
list&lt;string&gt; equivalent_names;
list&lt;string&gt; in_parts;
list&lt;string&gt; anamorphs;
list&lt;string&gt; includes;
list&lt;string&gt; acronyms;
list&lt;string&gt; authorities;
list&lt;string&gt; misnomers;
list&lt;string&gt; teleomorphs;
list&lt;string&gt; blast_names;
list&lt;string&gt; genbank_synonyms;
list&lt;string&gt; genbank_anamorphs;
list&lt;string&gt; genbank_acronyms;
list&lt;string&gt; genbank_common_names;
    } Names;</data></node><node id="D.KBaseSearch.contigset_id"><data key="typeName">contigset_id</data><data key="name">D.KBaseSearch.contigset_id</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">KBase contig set ID
@id kb</data></node><node id="D.KBaseGeneFamilies.genome_ref"><data key="typeName">genome_ref</data><data key="name">D.KBaseGeneFamilies.genome_ref</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">D</data><data key="comment">@id ws KBaseGenomes.Genome</data></node><node id="D.KBaseGenomes.Feature_ref"><data key="typeName">Feature_ref</data><data key="name">D.KBaseGenomes.Feature_ref</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Reference to a Feature object of a genome in the workspace
@id subws KBaseGenomes.Genome.features.[*].id</data></node><node id="D.KBaseGwasData.kbase_contig_id"><data key="typeName">kbase_contig_id</data><data key="name">D.KBaseGwasData.kbase_contig_id</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">A reference to kbase contig id in central store
     @id kb</data></node><node id="M.GenomeAnnotation.call_features_CDS_genemark"><data key="typeName">call_features_CDS_genemark</data><data key="name">M.GenomeAnnotation.call_features_CDS_genemark</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseCommon.StrainInfo"><data key="typeName">StrainInfo</data><data key="name">D.KBaseCommon.StrainInfo</data><data key="moduleName">KBaseCommon</data><data key="nodeType">D</data><data key="comment">Information about a strain.
genetic_code - the genetic code of the strain.
    See http://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi?mode=c
genus - the genus of the strain
species - the species of the strain
strain - the identifier for the strain
source - information about the source of the strain
organelle - the organelle of interest for the related data (e.g.
    mitochondria)
ncbi_taxid - the NCBI taxonomy ID of the strain
location - the location from which the strain was collected

@optional genetic_code source ncbi_taxid organelle location</data></node><node id="M.AbstractHandle.localize_handle"><data key="typeName">localize_handle</data><data key="name">M.AbstractHandle.localize_handle</data><data key="moduleName">AbstractHandle</data><data key="nodeType">M</data><data key="comment">The localize_handle function attempts to locate a shock server near
the service. The localize_handle function must be called before the
           Handle is initialized becuase when the handle is initialized, it is
           given a node id that maps to the shock server where the node was
           created. This function should not be called directly.</data></node><node id="D.KBaseRegulation.Regulome"><data key="typeName">Regulome</data><data key="name">D.KBaseRegulation.Regulome</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents regulome - collection of regulons for a given genome
regulome_id regulome_id - identifier of a regulome
regulome_source regulome_source - source of a regulome
string regulome_name -  name of a regulome
Genome genome - source genome                
list&lt;Regulon&gt; regulons - list of regulons comprising this regulome
list&lt;Evidence&gt; evidesnces - list of evidences for the regulome

@optional evidesnces</data></node><node id="D.KBaseFBA.genome_id"><data key="typeName">genome_id</data><data key="name">D.KBaseFBA.genome_id</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">KBase genome ID
@id kb</data></node><node id="M.InvocationService.run_pipeline"><data key="typeName">run_pipeline</data><data key="name">M.InvocationService.run_pipeline</data><data key="moduleName">InvocationService</data><data key="nodeType">M</data><data key="comment">* Run the given command pipeline. Returns the stdout and stderr for the pipeline.
*
* If max_output_size is greater than zero, limits the output of the command
* to max_output_size lines.</data></node><node id="D.KBaseProteinStructure.exact_t"><data key="typeName">exact_t</data><data key="name">D.KBaseProteinStructure.exact_t</data><data key="moduleName">KBaseProteinStructure</data><data key="nodeType">D</data><data key="comment">1 (true) if exact match to pdb sequence</data></node><node id="D.KBaseBiochem.compound_id"><data key="typeName">compound_id</data><data key="name">D.KBaseBiochem.compound_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Compound ID
@id external</data></node><node id="M.AMETHSTService.amethst"><data key="typeName">amethst</data><data key="name">M.AMETHSTService.amethst</data><data key="moduleName">AMETHSTService</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseFBA.TemplateBiomass"><data key="typeName">TemplateBiomass</data><data key="name">D.KBaseFBA.TemplateBiomass</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">TemplateBiomass object holds data on biomass in template

@searchable ws_subset id name type other dna rna protein lipid cellwall cofactor energy</data></node><node id="M.KBaseNetworks.build_internal_network"><data key="typeName">build_internal_network</data><data key="name">M.KBaseNetworks.build_internal_network</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">M</data><data key="comment">Returns an "internal" network constructed based on a given list of datasets. 
Internal network contains only the nodes defined by the gene_ids parameter, 
and edges representing interactions between these nodes.  Only interactions of given types are considered.    
          list&lt;string&gt; dataset_ids - List of dataset identifiers to be used for building a network
       list&lt;string&gt; gene_ids - Identifiers of genes of interest for building a network         
          list&lt;edge_type&gt; edge_types - List of possible edge types to be considered for building a network</data></node><node id="M.ProbabilisticAnnotation.calculate"><data key="typeName">calculate</data><data key="name">M.ProbabilisticAnnotation.calculate</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">M</data><data key="comment">Calculate reaction likelihoods from a probabilistic annotation and a
template model.  Results are stored in a RxnProbs object.  Returns the
metadata for the reaction probability object.</data></node><node id="D.KBaseExpression.person_id"><data key="typeName">person_id</data><data key="name">D.KBaseExpression.person_id</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Kbase Person ID</data></node><node id="D.PROM.genome_object_id"><data key="typeName">genome_object_id</data><data key="name">D.PROM.genome_object_id</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">A workspace ID for a genome object in a user's workspace, used to link a prom_constraint Object to a genome</data></node><node id="M.Tree.remove_node_names_and_simplify"><data key="typeName">remove_node_names_and_simplify</data><data key="name">M.Tree.remove_node_names_and_simplify</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">Given a tree in newick format, remove the nodes with the given names indicated in the list, and
simplify the tree.  Simplifying a tree involves removing unnamed internal nodes that have only one
child, and removing unnamed leaf nodes.  During the removal process, edge lengths (if they exist) are
conserved so that the summed end to end distance between any two nodes left in the tree will remain the same.</data></node><node id="M.Tree.get_tree_ids_by_source_id_pattern"><data key="typeName">get_tree_ids_by_source_id_pattern</data><data key="name">M.Tree.get_tree_ids_by_source_id_pattern</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">This method searches for a tree having a source ID that matches the input pattern.  This method accepts
one argument, which is the pattern.  The pattern is very simple and includes only two special characters,
wildcard character, '*', and a match-once character, '.'  The wildcard character matches any number (including
0) of any character, the '.' matches exactly one of any character.  These special characters can be escaped
with a backslash.  To match a blackslash literally, you must also escape it.  Note that source IDs are
generally defined by the gene family model which was used to identifiy the sequences to be included in
the tree.  Therefore, matching a source ID is a convenient way to find trees for a specific set of gene
families.</data></node><node id="D.KBaseRegulation.effector_id"><data key="typeName">effector_id</data><data key="name">D.KBaseRegulation.effector_id</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents effector identifier</data></node><node id="M.MEME.compare_motifs_with_tomtom_job_by_collection_from_ws"><data key="typeName">compare_motifs_with_tomtom_job_by_collection_from_ws</data><data key="name">M.MEME.compare_motifs_with_tomtom_job_by_collection_from_ws</data><data key="moduleName">MEME</data><data key="nodeType">M</data><data key="comment">Returns ID of job object that contains ID of results of a single TOMTOM run
string ws_name - workspace id 
TOMTOM will be run with -text parameter
TomtomRunParameters params - parameters of TOMTOM run</data></node><node id="D.KBaseTrees.is_leaf"><data key="typeName">is_leaf</data><data key="name">D.KBaseTrees.is_leaf</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Communities.PCoA"><data key="typeName">PCoA</data><data key="name">D.Communities.PCoA</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.MOTranslation.protein_sequence"><data key="typeName">protein_sequence</data><data key="name">D.MOTranslation.protein_sequence</data><data key="moduleName">MOTranslation</data><data key="nodeType">D</data><data key="comment">AA sequence of a protein</data></node><node id="M.GenomeAnnotation.classify_full"><data key="typeName">classify_full</data><data key="name">M.GenomeAnnotation.classify_full</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Classify a dataset, returning the binned output along with the raw assignments and the list of
* sequences that were not assigned.</data></node><node id="D.ExpressionServices.gsm_sample_characteristics"><data key="typeName">gsm_sample_characteristics</data><data key="name">D.ExpressionServices.gsm_sample_characteristics</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">List of GSM Sample Characteristics from ch1</data></node><node id="M.ExpressionServices.get_GEO_GSE"><data key="typeName">get_GEO_GSE</data><data key="name">M.ExpressionServices.get_GEO_GSE</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a GEO GSE ID, it will return a complex data structure to be put int the upload tab files</data></node><node id="D.KBaseGenomes.ProteinSet_ref"><data key="typeName">ProteinSet_ref</data><data key="name">D.KBaseGenomes.ProteinSet_ref</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Reference to a ProteinSet object containing the proteins for this genome in the workspace
@id ws KBaseGenomes.ProteinSet</data></node><node id="M.KBaseTrees.get_tree_data"><data key="typeName">get_tree_data</data><data key="name">M.KBaseTrees.get_tree_data</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Get meta data associated with each of the trees indicated in the list by tree id.  Note that some meta
data may not be available for trees which are not built from alignments.  Also note that this method
computes the number of nodes and leaves for each tree, so may be slow for very large trees or very long
lists.  If you do not need this full meta information structure, it may be faster to directly query the
CDS for just the field you need using the CDMI.</data></node><node id="D.MEME.MemePSPMCollection"><data key="typeName">MemePSPMCollection</data><data key="name">D.MEME.MemePSPMCollection</data><data key="moduleName">MEME</data><data key="nodeType">D</data><data key="comment">Represents collection of MemePSPMs
string id - KBase ID of MotifPSPMMeme
meme_run_result_ref source_ref - WS reference of source object
string timestamp - timestamp for creation time of collection
string description - user's description of the collection
string alphabet - ALPHABET field of MEME output ("ACGT" for nucleotide motifs)
list&lt;MemeMotif&gt; pspms - A list of all MemePSPMs in a collection

@optional source_ref timestamp description</data></node><node id="D.Workspace.GetModuleInfoParams"><data key="typeName">GetModuleInfoParams</data><data key="name">D.Workspace.GetModuleInfoParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Parameters for the get_module_info function.

        Required arguments:
        modulename mod - the name of the module to retrieve.
        
        Optional arguments:
        spec_version ver - the version of the module to retrieve. Defaults to
                the latest version.</data></node><node id="D.KBaseSearch.annotation"><data key="typeName">annotation</data><data key="name">D.KBaseSearch.annotation</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">a notation by a curator of the genome object</data></node><node id="M.ProteinInfo.fids_to_orthologs"><data key="typeName">fids_to_orthologs</data><data key="name">M.ProteinInfo.fids_to_orthologs</data><data key="moduleName">ProteinInfo</data><data key="nodeType">M</data><data key="comment">fids_to_orthologs takes as input a list of feature ids, and
returns a mapping of each fid to its orthologous fids in
all genomes.</data></node><node id="D.ExpressionServices.feature_id"><data key="typeName">feature_id</data><data key="name">D.ExpressionServices.feature_id</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">KBase Feature ID for a feature, typically CDS/PEG
id ws KB.Feature 

"ws" may change to "to" in the future</data></node><node id="D.MAK.MABicluster_id"><data key="typeName">MABicluster_id</data><data key="name">D.MAK.MABicluster_id</data><data key="moduleName">MAK</data><data key="nodeType">D</data><data key="comment">Represents WS MAK bicluster identifier
id subws MAK.MAKBicluster</data></node><node id="D.KmerEval.calls"><data key="typeName">calls</data><data key="name">D.KmerEval.calls</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseGwasData.genome_details"><data key="typeName">genome_details</data><data key="name">D.KBaseGwasData.genome_details</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">Genome details 


      This is not an independent object in itself. 
      But it is a structure that is repeatedly used in all objects

      kbase_genome_name - eg. Arabidopsis thaliana Tair 9
      kbase_genome_id - eg. kb|g.3899 
      source_genome_name - Athaliana.TAIR10
      source - TAIR / KBASE / PHYTOZOME / ENSEMBLE</data></node><node id="D.KBaseExpression.RNASeqSamplesSet"><data key="typeName">RNASeqSamplesSet</data><data key="name">D.KBaseExpression.RNASeqSamplesSet</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">list of RNASeqSamples</data></node><node id="M.KBaseTrees.replace_node_names"><data key="typeName">replace_node_names</data><data key="name">M.KBaseTrees.replace_node_names</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Given a tree in newick format, replace the node names indicated as keys in the 'replacements' mapping
with new node names indicated as values in the 'replacements' mapping.  Matching is EXACT and will not handle
regular expression patterns.</data></node><node id="D.Workspace.CopyObjectParams"><data key="typeName">CopyObjectParams</data><data key="name">D.Workspace.CopyObjectParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Input parameters for the 'copy_object' function. 

        If the 'from' ObjectIdentity includes no version and the object is
        copied to a new name, the entire version history of the object is
        copied. In all other cases only the version specified, or the latest
        version if no version is specified, is copied.
        
        The version from the 'to' ObjectIdentity is always ignored.
        
        Required arguments:
        ObjectIdentity from - the object to copy.
        ObjectIdentity to - where to copy the object.</data></node><node id="D.KBaseTrees.kbase_id"><data key="typeName">kbase_id</data><data key="name">D.KBaseTrees.kbase_id</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">A KBase ID is a string starting with the characters "kb|".  KBase IDs are typed. The types are
designated using a short string. For instance," g" denotes a genome, "tree" denotes a Tree, and
"aln" denotes a sequence alignment. KBase IDs may be hierarchical.  For example, if a KBase genome
identifier is "kb|g.1234", a protein encoding gene within that genome may be represented as
"kb|g.1234.peg.771".
@id kb</data></node><node id="M.MOTranslation.moLocusIds_to_proteins"><data key="typeName">moLocusIds_to_proteins</data><data key="name">M.MOTranslation.moLocusIds_to_proteins</data><data key="moduleName">MOTranslation</data><data key="nodeType">M</data><data key="comment">moLocusIds_to_proteins translates a list of MicrobesOnline locusIds
into proteins (MD5s).</data></node><node id="M.KmerAnnotationByFigfam.annotate_proteins_fasta"><data key="typeName">annotate_proteins_fasta</data><data key="name">M.KmerAnnotationByFigfam.annotate_proteins_fasta</data><data key="moduleName">KmerAnnotationByFigfam</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.Inferelator.gene_id"><data key="typeName">gene_id</data><data key="name">D.Inferelator.gene_id</data><data key="moduleName">Inferelator</data><data key="nodeType">D</data><data key="comment">Represents KBase gene identifier
@id external</data></node><node id="M.KBaseExpression.get_expression_float_data_table_by_samples_and_features"><data key="typeName">get_expression_float_data_table_by_samples_and_features</data><data key="name">M.KBaseExpression.get_expression_float_data_table_by_samples_and_features</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a list of sample ids and feature ids and the string of what type of numerical interpretation 
it returns a FloatDataTable. 
If sample id list is an empty array [], all samples with that feature measurment values will be returned. 
If feature list is an empty array [], all features with measurment values will be returned. 
Both sample id list and feature list can not be empty, one of them must have a value. 
Numerical_interpretation options : 'FPKM', 'Log2 level intensities', 'Log2 level ratios' or 'Log2 level ratios genomic DNA control'</data></node><node id="M.ServiceRegistry.deregister_service"><data key="typeName">deregister_service</data><data key="name">M.ServiceRegistry.deregister_service</data><data key="moduleName">ServiceRegistry</data><data key="nodeType">M</data><data key="comment">Deregister (delete) an existing service. Takes a service struct,
and returns 1 if successfully deregistered, returns 0 if failed due
to authentication issues or on input validation errors.  The namespace
of the service to be deregistered must be specified in the input
argument.</data></node><node id="M.MAK.search_MAK_results_from_ws"><data key="typeName">search_MAK_results_from_ws</data><data key="name">M.MAK.search_MAK_results_from_ws</data><data key="moduleName">MAK</data><data key="nodeType">M</data><data key="comment">Starts MAK server job for searching precomputed biclusters and returns job ID of the run
string ws_id - workspace id
string kbgid - kbase genome id kbgid
list&lt;string&gt; geneids - list of kb gene ids
MAKBiclusterSet set - MAKBiclusterSet</data></node><node id="M.AbstractHandle.initialize_handle"><data key="typeName">initialize_handle</data><data key="name">M.AbstractHandle.initialize_handle</data><data key="moduleName">AbstractHandle</data><data key="nodeType">M</data><data key="comment">The initialize_handle returns a Handle object with an ID. This
function should not be called directly</data></node><node id="D.KBaseFBA.TemplateReaction"><data key="typeName">TemplateReaction</data><data key="name">D.KBaseFBA.TemplateReaction</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">TemplateReaction object holds data on reaction in template

@optional base_cost forward_penalty reverse_penalty GapfillDirection</data></node><node id="D.Transform.DownloadParameters"><data key="typeName">DownloadParameters</data><data key="name">D.Transform.DownloadParameters</data><data key="moduleName">Transform</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.AskKB.askKB"><data key="typeName">askKB</data><data key="name">M.AskKB.askKB</data><data key="moduleName">AskKB</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseTrees.end_pos_in_parent"><data key="typeName">end_pos_in_parent</data><data key="name">D.KBaseTrees.end_pos_in_parent</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseExpression.measurement"><data key="typeName">measurement</data><data key="name">D.KBaseExpression.measurement</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Measurement Value (Zero median normalized within a sample) for a given feature</data></node><node id="D.KBaseRegulation.regulatory_site_id"><data key="typeName">regulatory_site_id</data><data key="name">D.KBaseRegulation.regulatory_site_id</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents regulatory site identifier</data></node><node id="M.GWAS.run_gwas"><data key="typeName">run_gwas</data><data key="name">M.GWAS.run_gwas</data><data key="moduleName">GWAS</data><data key="nodeType">M</data><data key="comment">gwas_run_gwas_emma_async Runs genome wide association analysis and takes kinship, variation, trait file, and method as input.
Currently the method support emma and will support different methods.</data></node><node id="D.GenomeAnnotation.glimmer3_parameters"><data key="typeName">glimmer3_parameters</data><data key="name">D.GenomeAnnotation.glimmer3_parameters</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Cmonkey.CmonkeyNetwork"><data key="typeName">CmonkeyNetwork</data><data key="name">D.Cmonkey.CmonkeyNetwork</data><data key="moduleName">Cmonkey</data><data key="nodeType">D</data><data key="comment">Represents network generated by a single run of cMonkey
string id - identifier of cMonkey-generated network
int iteration - number of the last iteration
string genome_name - organism name
int rows_number - number of rows
int columns_number - number of columns
int clusters_number - number of clusters
list&lt;CmonkeyCluster&gt; clusters - list of biclusters

@optional genome_name rows_number columns_number clusters_number clusters</data></node><node id="M.KBaseTrees.filter_abundance_profile"><data key="typeName">filter_abundance_profile</data><data key="name">M.KBaseTrees.filter_abundance_profile</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">ORDER OF OPERATIONS:
1) using normalization scope, defines whether process should occur per column or globally over every column
2) using normalization type, normalize by dividing values by the option indicated
3) apply normalization post process if set (ie take log of the result)
4) apply the cutoff_value threshold to all records, eliminating any that are not above the specified threshold
5) apply the cutoff_number_of_records (always applies per_column!!!), discarding any record that are not in the top N record values for that column

- if a value is not a valid number, it is ignored</data></node><node id="D.Workspace.permission"><data key="typeName">permission</data><data key="name">D.Workspace.permission</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Represents the permissions a user or users have to a workspace:

        'a' - administrator. All operations allowed.
        'w' - read/write.
        'r' - read.
        'n' - no permissions.</data></node><node id="D.AskKB.type"><data key="typeName">type</data><data key="name">D.AskKB.type</data><data key="moduleName">AskKB</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.IdMap.lookup_feature_synonyms"><data key="typeName">lookup_feature_synonyms</data><data key="name">M.IdMap.lookup_feature_synonyms</data><data key="moduleName">IdMap</data><data key="nodeType">M</data><data key="comment">Returns a list of mappings of all possible types of feature
synonyms and external ids to feature kbase ids for a
particular kbase genome, and a given type of a feature.

string genome_id - kbase id of a target genome
string feature_type - type of a kbase feature, e.g. CDS,
pep, etc (see https://trac.kbase.us/projects/kbase/wiki/IDRegistry).
If not provided, all mappings should be returned.</data></node><node id="D.ExpressionServices.gsm_data_warnings"><data key="typeName">gsm_data_warnings</data><data key="name">D.ExpressionServices.gsm_data_warnings</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">List of GSM Data level warnings</data></node><node id="D.Workspace.GrantModuleOwnershipParams"><data key="typeName">GrantModuleOwnershipParams</data><data key="name">D.Workspace.GrantModuleOwnershipParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Parameters for the grant_module_ownership function.

Required arguments:
modulename mod - the module to modify.
username new_owner - the user to add to the module's list of
        owners.

Optional arguments:
boolean with_grant_option - true to allow the user to add owners
        to the module.</data></node><node id="M.KBaseExpression.get_expression_sample_ids_by_ontology_ids"><data key="typeName">get_expression_sample_ids_by_ontology_ids</data><data key="name">M.KBaseExpression.get_expression_sample_ids_by_ontology_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a list of ontologyIDs, AndOr operator (and requires sample to have all ontology IDs, or sample has to have any of the terms), GenomeId, 
SampleType ( controlled vocabulary : microarray, RNA-Seq, qPCR, or proteomics), wildTypeOnly returns a list of SampleIDs</data></node><node id="M.ExpressionServices.get_expression_sample_ids_by_platform_external_source_ids"><data key="typeName">get_expression_sample_ids_by_platform_external_source_ids</data><data key="name">M.ExpressionServices.get_expression_sample_ids_by_platform_external_source_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">get sample ids by the platform's external source id : Takes a list of platform external source ids, and returns a list of sample ids</data></node><node id="D.ExpressionServices.samples_string_map"><data key="typeName">samples_string_map</data><data key="name">D.ExpressionServices.samples_string_map</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Mapping between sample id and corresponding value.   Used as return for get_expression_samples_(titles,descriptions,molecules,types,external_source_ids)</data></node><node id="D.GenomeAnnotation.function"><data key="typeName">function</data><data key="name">D.GenomeAnnotation.function</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.KBaseProteinStructure.lookup_pdb_by_fid"><data key="typeName">lookup_pdb_by_fid</data><data key="name">M.KBaseProteinStructure.lookup_pdb_by_fid</data><data key="moduleName">KBaseProteinStructure</data><data key="nodeType">M</data><data key="comment">of each to a list of PDBMatch records</data></node><node id="D.Workspace.id_type"><data key="typeName">id_type</data><data key="name">D.Workspace.id_type</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">An id type (e.g. from a typespec @id annotation: @id [idtype])</data></node><node id="D.KBaseGeneFamilies.dms_ref"><data key="typeName">dms_ref</data><data key="name">D.KBaseGeneFamilies.dms_ref</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">D</data><data key="comment">@id ws KBaseGeneFamilies.DomainModelSet</data></node><node id="M.AuthIntegration.test_auth_required"><data key="typeName">test_auth_required</data><data key="name">M.AuthIntegration.test_auth_required</data><data key="moduleName">AuthIntegration</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.KBaseDataImport.get_ncbi_genome_names"><data key="typeName">get_ncbi_genome_names</data><data key="name">M.KBaseDataImport.get_ncbi_genome_names</data><data key="moduleName">KBaseDataImport</data><data key="nodeType">M</data><data key="comment">List of names of genomes that can be used for 'import_ncbi_genome' method</data></node><node id="D.KBaseFBA.metagenome_otu_ref"><data key="typeName">metagenome_otu_ref</data><data key="name">D.KBaseFBA.metagenome_otu_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to an OTU in a metagenome
@id subws KBaseGenomes.MetagenomeAnnotation.otus.[*].id</data></node><node id="D.KBaseGwasData.VariationSampleMetaData"><data key="typeName">VariationSampleMetaData</data><data key="name">D.KBaseGwasData.VariationSampleMetaData</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">Object for the Variation Metadata
@optional read_count base_count assay library platform source</data></node><node id="M.ExpressionServices.get_expression_sample_ids_by_sample_external_source_ids"><data key="typeName">get_expression_sample_ids_by_sample_external_source_ids</data><data key="name">M.ExpressionServices.get_expression_sample_ids_by_sample_external_source_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">get sample ids by the sample's external source id : Takes a list of sample external source ids, and returns a list of sample ids</data></node><node id="M.TaxonomyTranslation.get_tax_id_by_scientific_name"><data key="typeName">get_tax_id_by_scientific_name</data><data key="name">M.TaxonomyTranslation.get_tax_id_by_scientific_name</data><data key="moduleName">TaxonomyTranslation</data><data key="nodeType">M</data><data key="comment">Returns the tax id for a given scientific name.</data></node><node id="D.KBaseBiochem.Reagent"><data key="typeName">Reagent</data><data key="name">D.KBaseBiochem.Reagent</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Reactant object

    @searchable ws_subset compound_ref compartment_ref coefficient isCofactor</data></node><node id="D.KBaseSearch.regulon_data"><data key="typeName">regulon_data</data><data key="name">D.KBaseSearch.regulon_data</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Structure for regulon data (from CDMI API)</data></node><node id="D.Empty.handle_id"><data key="typeName">handle_id</data><data key="name">D.Empty.handle_id</data><data key="moduleName">Empty</data><data key="nodeType">D</data><data key="comment">@id handle</data></node><node id="D.KBaseFBA.reaction_ref"><data key="typeName">reaction_ref</data><data key="name">D.KBaseFBA.reaction_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a reaction object in a biochemistry
@id subws KBaseBiochem.Biochemistry.reactions.[*].id</data></node><node id="D.KBaseExpression.GseObject"><data key="typeName">GseObject</data><data key="name">D.KBaseExpression.GseObject</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">GSE OBJECT</data></node><node id="M.ServiceRegistry.enumerate_service_urls"><data key="typeName">enumerate_service_urls</data><data key="name">M.ServiceRegistry.enumerate_service_urls</data><data key="moduleName">ServiceRegistry</data><data key="nodeType">M</data><data key="comment">Provide a list of available service urls. The enumerate_service_urls
returns the entire set of service urls that are registered in
the registry. The url will contain the port.</data></node><node id="D.KBaseTrees.node_name"><data key="typeName">node_name</data><data key="name">D.KBaseTrees.node_name</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">The string representation of the parsed node name (may be a kbase_id, but does not have to be).  Note that this
is not the full, raw label in a newick_tree (which may include comments).</data></node><node id="D.KBaseFBA.GapgenerationSolutionReaction"><data key="typeName">GapgenerationSolutionReaction</data><data key="name">D.KBaseFBA.GapgenerationSolutionReaction</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">GapGenerationSolutionReaction object holds data a reaction proposed to be removed from the model</data></node><node id="D.KBaseFBA.template_ref"><data key="typeName">template_ref</data><data key="name">D.KBaseFBA.template_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a model template
@id ws KBaseFBA.ModelTemplate</data></node><node id="D.ProteinInfo.orthologs"><data key="typeName">orthologs</data><data key="name">D.ProteinInfo.orthologs</data><data key="moduleName">ProteinInfo</data><data key="nodeType">D</data><data key="comment">Orthologs are a list of fids which are orthologous to a given fid.</data></node><node id="D.KBaseGeneFamilies.domain_annotation_ref"><data key="typeName">domain_annotation_ref</data><data key="name">D.KBaseGeneFamilies.domain_annotation_ref</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">D</data><data key="comment">@id ws KBaseGeneFamilies.DomainAnnotation</data></node><node id="D.UserProfile.GlobusUser"><data key="typeName">GlobusUser</data><data key="name">D.UserProfile.GlobusUser</data><data key="moduleName">UserProfile</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.AbstractHandle.new_handle"><data key="typeName">new_handle</data><data key="name">M.AbstractHandle.new_handle</data><data key="moduleName">AbstractHandle</data><data key="nodeType">M</data><data key="comment">The new_handle function returns a Handle object with a url and a
node id. The new_handle function invokes the localize_handle
method first to set the url and then invokes the initialize_handle
function to get an ID.</data></node><node id="D.KBaseFBA.FBAConstraint"><data key="typeName">FBAConstraint</data><data key="name">D.KBaseFBA.FBAConstraint</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">FBAConstraint object</data></node><node id="D.KBaseFBA.ClassData"><data key="typeName">ClassData</data><data key="name">D.KBaseFBA.ClassData</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.IdMap.lookup_genome"><data key="typeName">lookup_genome</data><data key="name">M.IdMap.lookup_genome</data><data key="moduleName">IdMap</data><data key="nodeType">M</data><data key="comment">Makes an attempt to map external identifier of a genome to
the corresponding kbase identifier. Multiple candidates can
be found, thus a list of IdPairs is returned.

string s - a string that represents some sort of genome
identifier. The type of identifier is resolved with the
type parameter.

string type - this provides information about the tupe
of alias that is provided as the first parameter.

An example of the parameters is the first parameter could
be a string "Burkholderia" and the type could be
scientific_name.

A second example is the first parmater could be an integer
and the type could be ncbi_taxonid.

These are the two supported cases at this time. Valid types
are NAME and NCBI_TAXID</data></node><node id="D.PROM.source_id"><data key="typeName">source_id</data><data key="name">D.PROM.source_id</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">Specifies the ID of the data object in the source</data></node><node id="D.KBasePPI.PublicationID"><data key="typeName">PublicationID</data><data key="name">D.KBasePPI.PublicationID</data><data key="moduleName">KBasePPI</data><data key="nodeType">D</data><data key="comment">@id kb</data></node><node id="D.ProbabilisticAnnotation.bool"><data key="typeName">bool</data><data key="name">D.ProbabilisticAnnotation.bool</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">*************************************************************************************</data></node><node id="D.Transform.type_string"><data key="typeName">type_string</data><data key="name">D.Transform.type_string</data><data key="moduleName">Transform</data><data key="nodeType">D</data><data key="comment">A type string copied from WS spec.
Specifies the type and its version in a single string in the format
[module].[typename]-[major].[minor]:

module - a string. The module name of the typespec containing the type.
typename - a string. The name of the type as assigned by the typedef
        statement. For external type, it start with ‚Äúe_‚Äù.
major - an integer. The major version of the type. A change in the
        major version implies the type has changed in a non-backwards
        compatible way.
minor - an integer. The minor version of the type. A change in the
        minor version implies that the type has changed in a way that is
        backwards compatible with previous type definitions.

In many cases, the major and minor versions are optional, and if not
provided the most recent version will be used.

Example: MyModule.MyType-3.1</data></node><node id="M.KBaseNetworks.build_internal_network_limited_by_strength"><data key="typeName">build_internal_network_limited_by_strength</data><data key="name">M.KBaseNetworks.build_internal_network_limited_by_strength</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">M</data><data key="comment">Returns an "internal" network constructed based on a given list of datasets. 
Internal network contains the only nodes defined by the gene_ids parameter, 
and edges representing interactions between these nodes.  Only interactions of given types are considered. 
Additional cutOff parameter allows to set a threshold on the strength of edges to be considered.     
          list&lt;string&gt; dataset_ids - List of dataset identifiers to be used for building a network
       list&lt;string&gt; gene_ids - Identifiers of genes of interest for building a network         
          list&lt;edge_type&gt; edge_types - List of possible edge types to be considered for building a network
         float cutOff - The threshold on the strength of edges to be considered for building a network</data></node><node id="D.KBaseFBA.QuantOptBoundMod"><data key="typeName">QuantOptBoundMod</data><data key="name">D.KBaseFBA.QuantOptBoundMod</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.ExpressionServices.get_on_off_calls"><data key="typeName">get_on_off_calls</data><data key="name">M.ExpressionServices.get_on_off_calls</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">Takes in comparison results.  If the value is &gt;= on_threshold it is deemed on (1), if &lt;= off_threshold it is off(-1), meets none then 0.  Thresholds normally set to zero.
returns SampleComparisonMapping {numerator_sample_id(or label)-&gt;{denominator_sample_id(or label)-&gt;{feature_id(or label) -&gt; on_off_call (possible values 0,-1,1)}}}</data></node><node id="D.KBaseProteinStructure.md5_to_pdb_matches"><data key="typeName">md5_to_pdb_matches</data><data key="name">D.KBaseProteinStructure.md5_to_pdb_matches</data><data key="moduleName">KBaseProteinStructure</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.KBaseTrees.get_alignment_data"><data key="typeName">get_alignment_data</data><data key="name">M.KBaseTrees.get_alignment_data</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Get meta data associated with each of the trees indicated in the list by tree id.  Note that some meta
data may not be available for trees which are not built from alignments.  Also note that this method
computes the number of nodes and leaves for each tree, so may be slow for very large trees or very long
lists.  If you do not need this full meta information structure, it may be faster to directly query the
CDS for just the field you need using the CDMI.</data></node><node id="D.KmerEval.contig"><data key="typeName">contig</data><data key="name">D.KmerEval.contig</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseGenomes.Protein"><data key="typeName">Protein</data><data key="name">D.KBaseGenomes.Protein</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Type spec for the "Protein" object

        Protein_id id - unique external ID of protein
        string function - annotated function for protein
        string md5 - md5 hash of protein sequence
        string sequence - amino acid sequence of protein
        int length - length of protein
        list&lt;ProteinFamily&gt; protein_families - families to which the protein belongs
        list&lt;string&gt; aliases - aliases for the protein
        list&lt;annotation&gt; annotations - curator annotations on protein
        list&lt;subsystem_data&gt; subsystem_data;
        
        @optional function
    @searchable ws_subset id md5 function length aliases</data></node><node id="D.KBaseFile.AssemblyFile"><data key="typeName">AssemblyFile</data><data key="name">D.KBaseFile.AssemblyFile</data><data key="moduleName">KBaseFile</data><data key="nodeType">D</data><data key="comment">An assembly of reads.
Note it is *strongly* encouraged that the read libraries are included,
but the fields are optional because for some data sources there is
currently no way to map the assembly to the source reads.
    
assembly_file - the assembly
strain - information about the genetic source
source - information about the source of this data
size - the total estimated size of the genome, in bases
gc_content - the overall GC content of the assembly
contigs - the number of contigs in the assembly
pairedlibs - references to the paired end libraries used to construct
    this assembly
singlelibs - references to the single end libraries used to construct
    this assembly
assembler - the assembler program used to create the assembly file
assembler_version - the version of the assembler
assembler_parameters - the parameters provided to the assembler
scaffold_gap_pct - the percentage of bases in scaffolds that are gap
    characters
scaffold_N50 - the N50 value for the scaffolds
scaffold_L50 - the L50 value for the scaffolds
contig_N50 - the N50 value for the contigs
contig_L50 - the L50 value for the contigs

@optional gc_content source
@optional pairedlibs singlelibs
@optional assembler assembler_version assembler_parameters
@optional scaffold_gap_pct
@optional scaffold_N50 scaffold_L50 contig_N50 contig_L50

@metadata ws strain.genus
@metadata ws strain.species
@metadata ws strain.strain
@metadata ws strain.ncbi_taxid
@metadata ws source.source
@metadata ws source.source_id
@metadata ws source.project_id
@metadata ws size
@metadata ws contigs
@metadata ws gc_content</data></node><node id="D.Communities.Reference"><data key="typeName">Reference</data><data key="name">D.Communities.Reference</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.MOTranslation.moLocusIds_to_fids"><data key="typeName">moLocusIds_to_fids</data><data key="name">M.MOTranslation.moLocusIds_to_fids</data><data key="moduleName">MOTranslation</data><data key="nodeType">M</data><data key="comment">moLocusIds_to_fids translates a list of MicrobesOnline locusIds
into KBase fids. It uses moLocusIds_to_proteins internally.</data></node><node id="D.KBaseFBA.ModelCompound"><data key="typeName">ModelCompound</data><data key="name">D.KBaseFBA.ModelCompound</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">ModelCompound object

@optional aliases maxuptake</data></node><node id="D.MEME.meme_pspm_collection_ref"><data key="typeName">meme_pspm_collection_ref</data><data key="name">D.MEME.meme_pspm_collection_ref</data><data key="moduleName">MEME</data><data key="nodeType">D</data><data key="comment">Represents WS MemePSPMCollection identifier
@id ws MEME.MemePSPMCollection</data></node><node id="D.Workspace.list_workspace_objects_params"><data key="typeName">list_workspace_objects_params</data><data key="name">D.Workspace.list_workspace_objects_params</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Input parameters for the "list_workspace_objects" function. Provided
for backwards compatibility.

Required arguments:
ws_name workspace - Name of the workspace for which objects should be
        listed

Optional arguments:
type_string type - type of the objects to be listed. Here, omitting
        version information will find any objects that match the provided
        type - e.g. Foo.Bar-0 will match Foo.Bar-0.X where X is any
        existing version.
boolean showDeletedObject - show objects that have been deleted
string auth - the authentication token of the KBase account requesting
        access. Overrides the client provided authorization credentials if
        they exist.
        
@deprecated Workspaces.ListWorkspaceInfoParams</data></node><node id="D.KBaseFBA.FBAReactionBound"><data key="typeName">FBAReactionBound</data><data key="name">D.KBaseFBA.FBAReactionBound</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">FBAReactionBound object</data></node><node id="D.KBasePPI.PubmedID"><data key="typeName">PubmedID</data><data key="name">D.KBasePPI.PubmedID</data><data key="moduleName">KBasePPI</data><data key="nodeType">D</data><data key="comment">This flag should work for non-String ids:
id external PubMed</data></node><node id="D.KBaseSequences.SequenceSet"><data key="typeName">SequenceSet</data><data key="name">D.KBaseSequences.SequenceSet</data><data key="moduleName">KBaseSequences</data><data key="nodeType">D</data><data key="comment">Represents set of sequences
string sequence_set_id - identifier of sequence set
string description - description of a sequence set
list&lt;Sequence&gt; sequences - list of sequences</data></node><node id="D.GenomeAnnotation.compact_feature"><data key="typeName">compact_feature</data><data key="name">D.GenomeAnnotation.compact_feature</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment">* This tuple defines a compact form for defining features to be batch-loaded
* into a genome object.</data></node><node id="D.KBaseFBA.feature_ref"><data key="typeName">feature_ref</data><data key="name">D.KBaseFBA.feature_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a feature of a genome object
@id subws KBaseGenomes.Genome.features.[*].id</data></node><node id="M.ServiceRegistry.get_service_specification"><data key="typeName">get_service_specification</data><data key="name">M.ServiceRegistry.get_service_specification</data><data key="moduleName">ServiceRegistry</data><data key="nodeType">M</data><data key="comment">Get the interface description document for the service. The
get_service_specification returns a string that represents the
interface specification for the given service.</data></node><node id="M.Tree.get_leaf_to_protein_map"><data key="typeName">get_leaf_to_protein_map</data><data key="name">M.Tree.get_leaf_to_protein_map</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">Given a tree id, this method returns a mapping from a tree's unique internal ID to
a protein sequence ID.</data></node><node id="D.Workspace.get_workspacemeta_params"><data key="typeName">get_workspacemeta_params</data><data key="name">D.Workspace.get_workspacemeta_params</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Input parameters for the "get_workspacemeta" function. Provided for
backwards compatibility.
        
One, and only one of:
ws_name workspace - name of the workspace or the workspace ID in KBase
        format, e.g. kb|ws.78.
ws_id id - the numerical ID of the workspace.
        
Optional arguments:
string auth - the authentication token of the KBase account accessing
        the workspace. Overrides the client provided authorization
        credentials if they exist.

@deprecated Workspace.WorkspaceIdentity</data></node><node id="D.MOTranslation.status"><data key="typeName">status</data><data key="name">D.MOTranslation.status</data><data key="moduleName">MOTranslation</data><data key="nodeType">D</data><data key="comment">A short note used to convey the status or explanaton of a result, or in some cases a log of the
method that was run</data></node><node id="M.GenomeAnnotation.compute_cdd"><data key="typeName">compute_cdd</data><data key="name">M.GenomeAnnotation.compute_cdd</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.Ontology.get_go_description"><data key="typeName">get_go_description</data><data key="name">M.Ontology.get_go_description</data><data key="moduleName">Ontology</data><data key="nodeType">M</data><data key="comment">Extract GO term description for a given list of GO identifiers. This function expects an input list of GO-ids (white space or comman separated) and returns a table of three columns, first column being the GO ids,  the second column is the GO description and third column is GO domain (biological process, molecular function, cellular component</data></node><node id="D.AbstractHandle.HandleId"><data key="typeName">HandleId</data><data key="name">D.AbstractHandle.HandleId</data><data key="moduleName">AbstractHandle</data><data key="nodeType">D</data><data key="comment">Handle provides a unique reference that enables
access to the data files through functions
provided as part of the HandleService. In the case of using
shock, the id is the node id. In the case of using
shock the value of type is shock. In the future 
these values should enumerated. The value of url is
the http address of the shock server, including the
protocol (http or https) and if necessary the port.
The values of remote_md5 and remote_sha1 are those
computed on the file in the remote data store. These
can be used to verify uploads and downloads.</data></node><node id="D.KBaseCommon.project_id"><data key="typeName">project_id</data><data key="name">D.KBaseCommon.project_id</data><data key="moduleName">KBaseCommon</data><data key="nodeType">D</data><data key="comment">An ID used for a project encompassing a piece of data at its source.
@id external</data></node><node id="D.KBaseExpression.gsm_data_warnings"><data key="typeName">gsm_data_warnings</data><data key="name">D.KBaseExpression.gsm_data_warnings</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">List of GSM Data level warnings</data></node><node id="D.KBaseBiochem.CompoundSet"><data key="typeName">CompoundSet</data><data key="name">D.KBaseBiochem.CompoundSet</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">CompoundSet object

@searchable ws_subset id name class compound_refs type</data></node><node id="D.GenomeAnnotation.genome_quality_measure"><data key="typeName">genome_quality_measure</data><data key="name">D.GenomeAnnotation.genome_quality_measure</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.GenomeAnnotation.assign_functions_to_CDSs"><data key="typeName">assign_functions_to_CDSs</data><data key="name">M.GenomeAnnotation.assign_functions_to_CDSs</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Given a genome object populated with contig data, perform gene calling
* and functional annotation and return the annotated genome.</data></node><node id="D.TaxonomyTranslation.Name"><data key="typeName">Name</data><data key="name">D.TaxonomyTranslation.Name</data><data key="moduleName">TaxonomyTranslation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Workspace.SetGlobalPermissionsParams"><data key="typeName">SetGlobalPermissionsParams</data><data key="name">D.Workspace.SetGlobalPermissionsParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Input parameters for the "set_global_permission" function.

        One, and only one, of the following is required:
        ws_id id - the numerical ID of the workspace.
        ws_name workspace - name of the workspace or the workspace ID in KBase
                format, e.g. kb|ws.78.
        
        Required arguments:
        permission new_permission - the permission to assign to all users,
                either 'n' or 'r'. 'r' means that all users will be able to read
                the workspace; otherwise users must have specific permission to
                access the workspace.</data></node><node id="D.GenomeAnnotation.genome_id"><data key="typeName">genome_id</data><data key="name">D.GenomeAnnotation.genome_id</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.ExpressionServices.get_expression_sample_ids_by_experimental_unit_ids"><data key="typeName">get_expression_sample_ids_by_experimental_unit_ids</data><data key="name">M.ExpressionServices.get_expression_sample_ids_by_experimental_unit_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a list of ExperimentalUnitIDs returns a list of Sample IDs</data></node><node id="D.KBasePhenotypes.PhenotypeSimulationSet"><data key="typeName">PhenotypeSimulationSet</data><data key="name">D.KBasePhenotypes.PhenotypeSimulationSet</data><data key="moduleName">KBasePhenotypes</data><data key="nodeType">D</data><data key="comment">PhenotypeSimulationSet object holds data on simulations of many phenotypes

    @metadata ws length(phenotypeSimulations) as Number phenotypes</data></node><node id="D.Communities.Statistics"><data key="typeName">Statistics</data><data key="name">D.Communities.Statistics</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.KBaseTrees.get_leaf_to_protein_map"><data key="typeName">get_leaf_to_protein_map</data><data key="name">M.KBaseTrees.get_leaf_to_protein_map</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Given a tree id, this method returns a mapping from a tree's unique internal ID to
a protein sequence ID.</data></node><node id="D.ProbabilisticAnnotation.genome_id"><data key="typeName">genome_id</data><data key="name">D.ProbabilisticAnnotation.genome_id</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">A string identifier for a genome.</data></node><node id="D.KBaseGeneFamilies.program_version"><data key="typeName">program_version</data><data key="name">D.KBaseGeneFamilies.program_version</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">D</data><data key="comment">enum: hmmscan-3.1b1, rpsblast-2.2.30</data></node><node id="D.KBaseOntology.complex_id"><data key="typeName">complex_id</data><data key="name">D.KBaseOntology.complex_id</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment">ID of complex object
@id external</data></node><node id="D.KBaseTrees.row_id"><data key="typeName">row_id</data><data key="name">D.KBaseTrees.row_id</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.ExpressionServices.gsm_data_set"><data key="typeName">gsm_data_set</data><data key="name">D.ExpressionServices.gsm_data_set</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">mapping kbase feature id as the key and FullMeasurement Structure as the value</data></node><node id="D.Cmonkey.cmonkey_cluster_id"><data key="typeName">cmonkey_cluster_id</data><data key="name">D.Cmonkey.cmonkey_cluster_id</data><data key="moduleName">Cmonkey</data><data key="nodeType">D</data><data key="comment">Represents WS cMonkey cluster identifier
id subws Cmonkey.CmonkeyCluster</data></node><node id="D.KBasePhenotypes.PhenotypeSimulation"><data key="typeName">PhenotypeSimulation</data><data key="name">D.KBasePhenotypes.PhenotypeSimulation</data><data key="moduleName">KBasePhenotypes</data><data key="nodeType">D</data><data key="comment">PhenotypeSimulation subobject holds data on a single phenotype simulation

@optional numGapfilledReactions
@optional gapfilledReactions</data></node><node id="D.KBasePPI.InteractionProtein"><data key="typeName">InteractionProtein</data><data key="name">D.KBasePPI.InteractionProtein</data><data key="moduleName">KBasePPI</data><data key="nodeType">D</data><data key="comment">FeatureID and ProteinID should maybe be full Feature/Proteins, if
we have a typespec for those.  We store both Feature and Protein
because CS proteins are not uniquely mappable to a single Feature.
If the ProteinID is untranslated (i.e., an external identifier for
a protein), FeatureID does not have to be set.
@optional feature_id stoichiometry strength</data></node><node id="D.KBaseBiochem.reaction_id"><data key="typeName">reaction_id</data><data key="name">D.KBaseBiochem.reaction_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Reaction ID
@id external</data></node><node id="D.ExpressionServices.series_id"><data key="typeName">series_id</data><data key="name">D.ExpressionServices.series_id</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Kbase Series ID</data></node><node id="D.KBaseFBA.ModelReaction"><data key="typeName">ModelReaction</data><data key="name">D.KBaseFBA.ModelReaction</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">ModelReaction object

@optional name pathway reference aliases maxforflux maxrevflux</data></node><node id="M.TaxonomyTranslation.get_scientific_names_by_name"><data key="typeName">get_scientific_names_by_name</data><data key="name">M.TaxonomyTranslation.get_scientific_names_by_name</data><data key="moduleName">TaxonomyTranslation</data><data key="nodeType">M</data><data key="comment">Returns a mapping between tax_id and scientific name for a given name.</data></node><node id="M.Workspace.get_objects"><data key="typeName">get_objects</data><data key="name">M.Workspace.get_objects</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Get objects from the workspace.</data></node><node id="D.KBaseBiochem.gapgen_id"><data key="typeName">gapgen_id</data><data key="name">D.KBaseBiochem.gapgen_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Gapgen ID
@id kb</data></node><node id="M.KBaseExpression.get_expression_samples_data_by_series_ids"><data key="typeName">get_expression_samples_data_by_series_ids</data><data key="name">M.KBaseExpression.get_expression_samples_data_by_series_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a list of SeriesIDs returns mapping of SeriesID to expressionDataSamples : {series_id -&gt; {sample_id -&gt; expressionSampleDataStructure}}</data></node><node id="M.IdMap.lookup_features"><data key="typeName">lookup_features</data><data key="name">M.IdMap.lookup_features</data><data key="moduleName">IdMap</data><data key="nodeType">M</data><data key="comment">Given a genome id, a list of aliases, a feature type and a source db
return the set of feature ids associated with the aliases.

lookup_features attempts to find feature ids for the aliases provided.
The match is somewhat ambiguous  in that if an alias is provided
that is associated with a feature of type locus, then the
mrna and cds features encompassed in that locus will also be
returned. Therefor it is possible to have multiple feature ids
associated with one alias.

Parameters for the lookup_features function are:
string genome_id     - a kbase genome identifier
list&lt;string&gt; aliases - a list of aliases
string feature_type  - a kbase feature type
string source_db     - a kbase source identifier

To specify all feature types, provide an empty string as the
value of the feature_type parameter. To specify all source databases,
provide an empty string as the value of the source_db parameter.

  The lookup_features function returns a mapping between
  an alias and an IdPair.</data></node><node id="D.KBaseNetworks.DatasetSource"><data key="typeName">DatasetSource</data><data key="name">D.KBaseNetworks.DatasetSource</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">D</data><data key="comment">Provides detailed information about the source of a dataset.
string id - A unique  identifier of a dataset source
string name - A name of a dataset source
        dataset_source_ref reference - Reference to a dataset source
        string description - General description of a dataset source
        string resourceURL - URL of the public web resource hosting the data represented by this dataset source</data></node><node id="M.NarrativeJobService.run_app"><data key="typeName">run_app</data><data key="name">M.NarrativeJobService.run_app</data><data key="moduleName">NarrativeJobService</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.ProbabilisticAnnotation.roleset_probabilities"><data key="typeName">roleset_probabilities</data><data key="name">D.ProbabilisticAnnotation.roleset_probabilities</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">Output for get_probanno function.
It is a mapping from a feature (gene) ID to a list of (annotation, likelihood) tuples.
Annotations are roles separated by a "///" delimiter</data></node><node id="M.GenomeComparison.blast_proteomes"><data key="typeName">blast_proteomes</data><data key="name">M.GenomeComparison.blast_proteomes</data><data key="moduleName">GenomeComparison</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseSearch.atomic_regulon"><data key="typeName">atomic_regulon</data><data key="name">D.KBaseSearch.atomic_regulon</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Structure for an atomic regulon (from CDMI API)</data></node><node id="D.KBaseBiochem.compound_ref"><data key="typeName">compound_ref</data><data key="name">D.KBaseBiochem.compound_ref</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Reference to a compound object in a biochemistry
@id subws KBaseBiochem.Biochemistry.compounds.[*].id</data></node><node id="D.PROM.workspace_name"><data key="typeName">workspace_name</data><data key="name">D.PROM.workspace_name</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">The name of a workspace</data></node><node id="D.UserAndJobState.job_description"><data key="typeName">job_description</data><data key="name">D.UserAndJobState.job_description</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">A job description string supplied by the reporting service. No more than
1000 characters.</data></node><node id="D.Cmonkey.expression_series_ws_ref"><data key="typeName">expression_series_ws_ref</data><data key="name">D.Cmonkey.expression_series_ws_ref</data><data key="moduleName">Cmonkey</data><data key="nodeType">D</data><data key="comment">Represents WS expression data series identifier
@id ws KBaseExpression.ExpressionSeries</data></node><node id="D.KBaseFBA.ReactionSensitivityAnalysisReaction"><data key="typeName">ReactionSensitivityAnalysisReaction</data><data key="name">D.KBaseFBA.ReactionSensitivityAnalysisReaction</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Object for holding reaction knockout sensitivity reaction data

kb_sub_id kbid - KBase ID for reaction knockout sensitivity reaction
ws_sub_id model_reaction_wsid - ID of model reaction
bool delete - indicates if reaction is to be deleted
bool deleted - indicates if the reaction has been deleted
float growth_fraction - Fraction of wild-type growth after knockout
float normalized_activated_reaction_count - Normalized number of activated reactions
list&lt;ws_sub_id&gt; biomass_compounds  - List of biomass compounds that depend on the reaction
list&lt;ws_sub_id&gt; new_inactive_rxns - List of new reactions dependant upon reaction KO
list&lt;ws_sub_id&gt; new_essentials - List of new essential genes with reaction knockout
        
@optional direction</data></node><node id="D.KBaseFBA.templatereaction_id"><data key="typeName">templatereaction_id</data><data key="name">D.KBaseFBA.templatereaction_id</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Template reaction ID
@id external</data></node><node id="D.KBaseTrees.timestamp"><data key="typeName">timestamp</data><data key="name">D.KBaseTrees.timestamp</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">Time in units of number of seconds since the epoch</data></node><node id="D.Communities.Biom"><data key="typeName">Biom</data><data key="name">D.Communities.Biom</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Tree.AbundanceResult"><data key="typeName">AbundanceResult</data><data key="name">D.Tree.AbundanceResult</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">Structure to group output of the compute_abundance_profile method.

    mapping &lt;string,int&gt; abundances - maps the raw row ID of each leaf node in the input tree to the number
                                      of hits that map to the given leaf; only row IDs with 1 or more hits
                                      are added to this map, thus missing leaf nodes imply 0 hits
    int n_hits                      - the total number of hits in this sample to any leaf
    int n_reads                     - the total number of reads that were identified for the input protein
                                      family; if the protein family could not be found this will be zero.</data></node><node id="D.Empty.AType"><data key="typeName">AType</data><data key="name">D.Empty.AType</data><data key="moduleName">Empty</data><data key="nodeType">D</data><data key="comment">@optional foo</data></node><node id="M.ProteinInfo.fid_to_neighbors"><data key="typeName">fid_to_neighbors</data><data key="name">M.ProteinInfo.fid_to_neighbors</data><data key="moduleName">ProteinInfo</data><data key="nodeType">M</data><data key="comment">fid_to_neighbor takes as input a single feature id, and
a neighbor score threshold and returns a list of neighbors
where neighbor score &gt;= threshold</data></node><node id="D.KBaseGenomes.GenomeComparisonFunction"><data key="typeName">GenomeComparisonFunction</data><data key="name">D.KBaseGenomes.GenomeComparisonFunction</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">GenomeComparisonFunction object: this object holds information about a genome in a function across all genomes</data></node><node id="D.KBaseGenomes.Bool"><data key="typeName">Bool</data><data key="name">D.KBaseGenomes.Bool</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Communities.TaxonomicMatrix"><data key="typeName">TaxonomicMatrix</data><data key="name">D.Communities.TaxonomicMatrix</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.PROM.BooleanGeneExpressionData"><data key="typeName">BooleanGeneExpressionData</data><data key="name">D.PROM.BooleanGeneExpressionData</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">A simplified representation of gene expression data under a SINGLE condition. Note that the condition
information is not explicitly tracked here. also NOTE: this data object should be migrated to the Expression
Data service, and simply imported here.

    mapping&lt;feature_id,on_off_state&gt; on_off_call - a mapping of genome features to on/off calls under the given
                                           condition (true=on, false=off).  It is therefore assumed that
                                           the features are protein coding genes.
    source expression_data_source        - the source of this collection of expression data
    source_id expression_data_source_id  - the id of this data object in the workspace</data></node><node id="M.KBaseTrees.get_alignment_ids_by_feature"><data key="typeName">get_alignment_ids_by_feature</data><data key="name">M.KBaseTrees.get_alignment_ids_by_feature</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Given a list of feature ids in kbase, the protein sequence of each feature (if the sequence exists)
is identified and used to retrieve all alignments by ID that were built using the given protein sequence.</data></node><node id="D.KBaseProteinStructure.fid_to_pdb_matches"><data key="typeName">fid_to_pdb_matches</data><data key="name">D.KBaseProteinStructure.fid_to_pdb_matches</data><data key="moduleName">KBaseProteinStructure</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseTrees.Tree"><data key="typeName">Tree</data><data key="name">D.KBaseTrees.Tree</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">Data type for phylogenetic trees.

    @optional name description type tree_attributes
    @optional default_node_labels ws_refs kb_refs leaf_list</data></node><node id="D.KBaseSearch.source_id"><data key="typeName">source_id</data><data key="name">D.KBaseSearch.source_id</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Reference to a source_id
@id external SEED GenBank MicrobesOnline</data></node><node id="M.Workspace.get_jsonschema"><data key="typeName">get_jsonschema</data><data key="name">M.Workspace.get_jsonschema</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Get JSON schema for a type.</data></node><node id="D.Communities.PCoAMember"><data key="typeName">PCoAMember</data><data key="name">D.Communities.PCoAMember</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment">PCoA Typespec</data></node><node id="D.KBaseGwasData.GwasGeneList"><data key="typeName">GwasGeneList</data><data key="name">D.KBaseGwasData.GwasGeneList</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">Gwasgenelist has the list of genes obtained on the basis of significant snp list

      GwasPopulationVariation_obj_id - object id of the population variation data.
      GwasPopulationTrait_obj_id - object id of trait data
      pvaluecutoff - pvalue cut off for snps
      distance_cutoff - distance from the snp

      
     Search indexing:  Get all data from GwasPopulationVariation_obj_id: ignore -- variations and contigs</data></node><node id="D.Cmonkey.cmonkey_run_result_id"><data key="typeName">cmonkey_run_result_id</data><data key="name">D.Cmonkey.cmonkey_run_result_id</data><data key="moduleName">Cmonkey</data><data key="nodeType">D</data><data key="comment">Represents WS cMonkey run result identifier
id ws Cmonkey.CmonkeyRunResult</data></node><node id="D.KBaseGwasData.GwasTopVariations_obj_id"><data key="typeName">GwasTopVariations_obj_id</data><data key="name">D.KBaseGwasData.GwasTopVariations_obj_id</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">A reference to GWAS top/significant variations object
     @id ws  KBaseGwasData.GwasTopVariations</data></node><node id="D.KBaseGenomes.Reaction_id"><data key="typeName">Reaction_id</data><data key="name">D.KBaseGenomes.Reaction_id</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">KBase Reaction ID
@id external</data></node><node id="D.KBaseFile.bool"><data key="typeName">bool</data><data key="name">D.KBaseFile.bool</data><data key="moduleName">KBaseFile</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseFBA.gapgensol_id"><data key="typeName">gapgensol_id</data><data key="name">D.KBaseFBA.gapgensol_id</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Gapgeneration solution ID
@id external</data></node><node id="D.KBasePhenotypes.Phenotype"><data key="typeName">Phenotype</data><data key="name">D.KBasePhenotypes.Phenotype</data><data key="moduleName">KBasePhenotypes</data><data key="nodeType">D</data><data key="comment">Phenotype subobject holds data on a single phenotype
            
@optional name
@searchable ws_subset id media_ref geneko_refs additionalcompound_refs normalizedGrowth name</data></node><node id="M.UserProfile.ver"><data key="typeName">ver</data><data key="name">M.UserProfile.ver</data><data key="moduleName">UserProfile</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseCommon.Location"><data key="typeName">Location</data><data key="name">D.KBaseCommon.Location</data><data key="moduleName">KBaseCommon</data><data key="nodeType">D</data><data key="comment">Information about a location.
lat - latitude of the site, recorded as a decimal number. North latitudes
    are positive values and south latitudes are negative numbers.
lon - longitude of the site, recorded as a decimal number. West
    longitudes are positive values and east longitudes are negative
    numbers.
elevation - elevation of the site, expressed in meters above sea level.
    Negative values are allowed.
date - date of an event at this location (for example, sample
    collection), expressed in the format YYYY-MM-DDThh:mm:ss.SSSZ
description - a free text description of the location and, if applicable,
    the associated event.

@optional date description</data></node><node id="D.Communities.URI"><data key="typeName">URI</data><data key="name">D.Communities.URI</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment">URI in form of a URL, e.g. ftp:// or http://...</data></node><node id="D.KBasePhenotypes.source_id"><data key="typeName">source_id</data><data key="name">D.KBasePhenotypes.source_id</data><data key="moduleName">KBasePhenotypes</data><data key="nodeType">D</data><data key="comment">Source ID
@id external</data></node><node id="D.KmerEval.length"><data key="typeName">length</data><data key="name">D.KmerEval.length</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Sim.options"><data key="typeName">options</data><data key="name">D.Sim.options</data><data key="moduleName">Sim</data><data key="nodeType">D</data><data key="comment">Option specification. The following options are available for the sims call:

  kb_only        Only return KBase identifiers (not raw MD5 or other external IDs).
  kb_function2   For KB identifiers, return the function mapped to id2.
  evalue_cutoff  Return similarities with an e-value better than this value.
  max_sims       Return at most this many similarities. The number of values
                 may exceed this due to multiple identifiers mapping to the same sequence.</data></node><node id="D.KBaseSearch.SearchFeatureSet"><data key="typeName">SearchFeatureSet</data><data key="name">D.KBaseSearch.SearchFeatureSet</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Type spec for the "FeatureSet" object

                should not need searchable attribute for a ref
                #searchable ws_subset features.*.(feature_id,genome_id,function,md5)</data></node><node id="D.UserAndJobState.job_filter"><data key="typeName">job_filter</data><data key="name">D.UserAndJobState.job_filter</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">A string-based filter for listing jobs.

        If the string contains:
                'Q' - created / queued jobs are returned (but see below).
                'R' - running jobs are returned.
                'C' - completed jobs are returned.
                'E' - jobs that errored out are returned.
                'S' - shared jobs are returned.
        The string can contain any combination of these codes in any order.
        If the string contains none of the codes or is null, all self-owned 
        jobs are returned. If only the S filter is
        present, all jobs are returned.
        
        The Q filter has no meaning in the context of UJS based jobs (e.g. jobs
        that are not pulled by the UJS from an external job runner) and is
        ignored. A UJS job in the 'created' state is not yet 'owned', per se,
        by a job runner, and so UJS jobs in the 'created' state are never
        returned.
        
        In contrast, for a job runner like AWE, jobs may be in the submitted
        or queued state, and the Q filter will cause these jobs to be returned.
        
        Note that the S filter currently does not work with AWE. All AWE jobs
        visible to the user are always returned.</data></node><node id="D.Transform.UploadParameters"><data key="typeName">UploadParameters</data><data key="name">D.Transform.UploadParameters</data><data key="moduleName">Transform</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.ExpressionServices.genome_expression_data_samples_mapping"><data key="typeName">genome_expression_data_samples_mapping</data><data key="name">D.ExpressionServices.genome_expression_data_samples_mapping</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">mapping between genomeIDs and all StrainExpressionDataSamplesMapping it contains</data></node><node id="D.MEME.sequence_set_ref"><data key="typeName">sequence_set_ref</data><data key="name">D.MEME.sequence_set_ref</data><data key="moduleName">MEME</data><data key="nodeType">D</data><data key="comment">Represents WS KBaseSequences.SequenceSet identifier
@id ws KBaseSequences.SequenceSet</data></node><node id="M.Tree.replace_node_names"><data key="typeName">replace_node_names</data><data key="name">M.Tree.replace_node_names</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">Given a tree in newick format, replace the node names indicated as keys in the 'replacements' mapping
with new node names indicated as values in the 'replacements' mapping.  Matching is EXACT and will not handle
regular expression patterns.</data></node><node id="D.KBaseNetworks.taxon"><data key="typeName">taxon</data><data key="name">D.KBaseNetworks.taxon</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">D</data><data key="comment">NCBI taxonomy id</data></node><node id="D.Tree.kbase_id"><data key="typeName">kbase_id</data><data key="name">D.Tree.kbase_id</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">A KBase ID is a string starting with the characters "kb|".  KBase IDs are typed. The types are
designated using a short string. For instance," g" denotes a genome, "tree" denotes a Tree, and
"aln" denotes a sequence alignment. KBase IDs may be hierarchical.  For example, if a KBase genome
identifier is "kb|g.1234", a protein encoding gene within that genome may be represented as
"kb|g.1234.peg.771".</data></node><node id="D.KBaseFBA.BiomassCompound"><data key="typeName">BiomassCompound</data><data key="name">D.KBaseFBA.BiomassCompound</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">BiomassCompound object

    @searchable ws_subset modelcompound_ref coefficient</data></node><node id="D.KBaseFBA.FBAReactionVariable"><data key="typeName">FBAReactionVariable</data><data key="name">D.KBaseFBA.FBAReactionVariable</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">FBAReactionVariable object</data></node><node id="M.Cmonkey.run_cmonkey"><data key="typeName">run_cmonkey</data><data key="name">M.Cmonkey.run_cmonkey</data><data key="moduleName">Cmonkey</data><data key="nodeType">M</data><data key="comment">Starts cMonkey server run for a series of expression data stored in workspace and returns job ID of the run
string ws_id - workspace id
CmonkeyRunParameters params - parameters of cMonkey run
string job_id - identifier of cMonkey job</data></node><node id="D.KBaseExpression.person_ids"><data key="typeName">person_ids</data><data key="name">D.KBaseExpression.person_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">list of KBase PersonsIDs</data></node><node id="D.KBaseGenomes.publication"><data key="typeName">publication</data><data key="name">D.KBaseGenomes.publication</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Structure for a publication (from ER API)
also want to capture authors, journal name (not in ER)</data></node><node id="D.KBaseGwasData.GwasPopulationTrait"><data key="typeName">GwasPopulationTrait</data><data key="name">D.KBaseGwasData.GwasPopulationTrait</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">GwasPopulationTrait object contains trait details for one trait in a population 

      genome - genome_details
      GwasPopulation_obj_id - object id of the population
      originator - PI, lab or institution doing phenotype analysis
      trait_ontology_id -  trait ontology of trait
      trait_name - short trait name
      unit_of_measure - unit of measurement of trait eg. MEAN, COUNT, NUMDAYS
      protocol - a brief protocol describing trait measurement
      comment - Comments or any other information related to the trait
      trait_measurements - list of values for each ecotype for a trait;


     Search indexing: Donot index --&gt; trait_measurements</data></node><node id="D.Communities.Timestamp"><data key="typeName">Timestamp</data><data key="name">D.Communities.Timestamp</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment">typedef string url;</data></node><node id="D.KBaseGwasData.genelistUnit"><data key="typeName">genelistUnit</data><data key="name">D.KBaseGwasData.genelistUnit</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">genelist Unit</data></node><node id="D.KBaseGenomes.Pangenome"><data key="typeName">Pangenome</data><data key="name">D.KBaseGenomes.Pangenome</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Pangenome object: this object holds all data regarding a pangenome

@searchable ws_subset id name
    @metadata ws type as Type
    @metadata ws name as Name
    @metadata ws length(orthologs) as Number orthologs
    @metadata ws length(genome_refs) as Number genomes</data></node><node id="D.ProbabilisticAnnotation.GetRxnprobsParams"><data key="typeName">GetRxnprobsParams</data><data key="name">D.ProbabilisticAnnotation.GetRxnprobsParams</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">Inputs for get_rxnprobs function.
rxnprobs_id rxnprobs- ID for RxnProbs object in the workspace
workspace_id rxnprobs_workspace - ID for workspace in which RxnProbs object is held.</data></node><node id="M.AMETHSTService.status"><data key="typeName">status</data><data key="name">M.AMETHSTService.status</data><data key="moduleName">AMETHSTService</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.ProbabilisticAnnotation.workspace_ref"><data key="typeName">workspace_ref</data><data key="name">D.ProbabilisticAnnotation.workspace_ref</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">A permanent reference to an object in a workspace.</data></node><node id="D.ExpressionServices.ontology_ids"><data key="typeName">ontology_ids</data><data key="name">D.ExpressionServices.ontology_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">list of Kbase Ontology IDs</data></node><node id="D.GenomeAnnotation.pipeline_batch_input"><data key="typeName">pipeline_batch_input</data><data key="name">D.GenomeAnnotation.pipeline_batch_input</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseExpression.GsmObject"><data key="typeName">GsmObject</data><data key="name">D.KBaseExpression.GsmObject</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">GSM OBJECT</data></node><node id="D.AssemblyInputHandle.boolean"><data key="typeName">boolean</data><data key="name">D.AssemblyInputHandle.boolean</data><data key="moduleName">AssemblyInputHandle</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Workspace.usermeta"><data key="typeName">usermeta</data><data key="name">D.Workspace.usermeta</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">User provided metadata about an object.
Arbitrary key-value pairs provided by the user.</data></node><node id="D.KBaseBiochem.modelreaction_id"><data key="typeName">modelreaction_id</data><data key="name">D.KBaseBiochem.modelreaction_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Model reaction ID
@id external</data></node><node id="D.Ontology.StringArray"><data key="typeName">StringArray</data><data key="name">D.Ontology.StringArray</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.UserAndJobState.get_job_shared"><data key="typeName">get_job_shared</data><data key="name">M.UserAndJobState.get_job_shared</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Get the list of users with which a job is shared. Only the job owner
may access this method. Does not currently work with AWE jobs.</data></node><node id="M.CompressionBasedDistance.build_matrix"><data key="typeName">build_matrix</data><data key="name">M.CompressionBasedDistance.build_matrix</data><data key="moduleName">CompressionBasedDistance</data><data key="nodeType">M</data><data key="comment">Build a distance matrix from a set of sequence files for microbiota
comparisons.  Compression based distance uses the relative compression
of combined and individual datasets to quantify overlaps between
microbial communities.  Returns the job identifier of the job submitted
to build the distance matrix.</data></node><node id="D.KBaseExpression.Protocol"><data key="typeName">Protocol</data><data key="name">D.KBaseExpression.Protocol</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Data structure for Protocol  (TEMPORARY WORKSPACE TYPED OBJECT SHOULD BE HANDLED IN THE FUTURE IN WORKSPACE COMMON)</data></node><node id="M.ProteinInfo.fids_to_domain_hits"><data key="typeName">fids_to_domain_hits</data><data key="name">M.ProteinInfo.fids_to_domain_hits</data><data key="moduleName">ProteinInfo</data><data key="nodeType">M</data><data key="comment">fids_to_domain_hits takes as input a list of feature ids, and
returns a mapping of each fid to a list of hits. (This includes COG,
even though COG is not part of InterProScan.)</data></node><node id="D.KBaseSearch.source_db"><data key="typeName">source_db</data><data key="name">D.KBaseSearch.source_db</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.InvocationService.make_directory"><data key="typeName">make_directory</data><data key="name">M.InvocationService.make_directory</data><data key="moduleName">InvocationService</data><data key="nodeType">M</data><data key="comment">* Create a new directory.</data></node><node id="D.KBaseAssembly.ReferenceAssembly"><data key="typeName">ReferenceAssembly</data><data key="name">D.KBaseAssembly.ReferenceAssembly</data><data key="moduleName">KBaseAssembly</data><data key="nodeType">D</data><data key="comment">@optional reference_name
@metadata ws handle.file_name
@metadata ws handle.type
@metadata ws reference_name</data></node><node id="M.AbstractHandle.hids_to_handles"><data key="typeName">hids_to_handles</data><data key="name">M.AbstractHandle.hids_to_handles</data><data key="moduleName">AbstractHandle</data><data key="nodeType">M</data><data key="comment">Given a list of handle ids, this function returns
a list of handles.</data></node><node id="D.KBaseFBA.ModelQuantOpt"><data key="typeName">ModelQuantOpt</data><data key="name">D.KBaseFBA.ModelQuantOpt</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">ModelQuantOpt object</data></node><node id="M.AbstractHandle.download_metadata"><data key="typeName">download_metadata</data><data key="name">M.AbstractHandle.download_metadata</data><data key="moduleName">AbstractHandle</data><data key="nodeType">M</data><data key="comment">The download_metadata function downloads metadata associated
with the data handle and writes it to a file.

[client_implemented]</data></node><node id="M.ProteinInfo.domains_to_fids"><data key="typeName">domains_to_fids</data><data key="name">M.ProteinInfo.domains_to_fids</data><data key="moduleName">ProteinInfo</data><data key="nodeType">M</data><data key="comment">domains_to_fids takes as input a list of domain_ids, and
returns a mapping of each domain_id to the fids which have that
domain. (This includes COG, even though COG is not part of
InterProScan.)</data></node><node id="M.Workspace.alter_workspace_metadata"><data key="typeName">alter_workspace_metadata</data><data key="name">M.Workspace.alter_workspace_metadata</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Change the metadata associated with a workspace.</data></node><node id="D.ExpressionServices.contact_institution"><data key="typeName">contact_institution</data><data key="name">D.ExpressionServices.contact_institution</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Institution of GSM contact person</data></node><node id="M.Workspace.translate_from_MD5_types"><data key="typeName">translate_from_MD5_types</data><data key="name">M.Workspace.translate_from_MD5_types</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Translation from types qualified with MD5 to their semantic versions</data></node><node id="D.IDServerAPI.external_id"><data key="typeName">external_id</data><data key="name">D.IDServerAPI.external_id</data><data key="moduleName">IDServerAPI</data><data key="nodeType">D</data><data key="comment">External database identifiers are strings. They are the precise identifier used
by that database. It is important to note that if a database uses the same 
identifier space for more than one data type (for instance, if integers are used for
identifying both genomes and genes, and if the same number is valid for both a
genome and a gene) then the distinction must be made by using separate exgternal database
strings for the different types; e.g. DBNAME-GENE and DBNAME-GENOME for a 
database DBNAME that has overlapping namespace for genes and genomes).</data></node><node id="D.KBaseOntology.gene_list"><data key="typeName">gene_list</data><data key="name">D.KBaseOntology.gene_list</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment">A gene list is a list of gene_ids</data></node><node id="D.Workspace.spec_version"><data key="typeName">spec_version</data><data key="name">D.Workspace.spec_version</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">The version of a typespec file.</data></node><node id="D.Workspace.ExternalDataUnit"><data key="typeName">ExternalDataUnit</data><data key="name">D.Workspace.ExternalDataUnit</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">An external data unit. A piece of data from a source outside the
Workspace.

string resource_name - the name of the resource, for example JGI.
string resource_url - the url of the resource, for example
        http://genome.jgi.doe.gov
string resource_version - version of the resource
timestamp resource_release_date - the release date of the resource
string data_url - the url of the data, for example
        http://genome.jgi.doe.gov/pages/dynamicOrganismDownload.jsf?
                organism=BlaspURHD0036
string data_id - the id of the data, for example
        7625.2.79179.AGTTCC.adnq.fastq.gz
string description - a free text description of the data.</data></node><node id="D.GenomeAnnotation.fid_role_pair"><data key="typeName">fid_role_pair</data><data key="name">D.GenomeAnnotation.fid_role_pair</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.ProteinInfo.fids_to_domains"><data key="typeName">fids_to_domains</data><data key="name">M.ProteinInfo.fids_to_domains</data><data key="moduleName">ProteinInfo</data><data key="nodeType">M</data><data key="comment">fids_to_domains takes as input a list of feature ids, and
returns a mapping of each fid to its domains. (This includes COG,
even though COG is not part of InterProScan.)</data></node><node id="D.BAMBI.BambiRunParameters"><data key="typeName">BambiRunParameters</data><data key="name">D.BAMBI.BambiRunParameters</data><data key="moduleName">BAMBI</data><data key="nodeType">D</data><data key="comment">Parameters of a BAMBI run. 

                int number_of_particles - number of samples to estimate distribution of motifs across the sequence set (parameter -P). Default: 20 * (max sequence length).                 
                int min_motif_length - minimal length of a motif (parameter -LM). Default: 18
                int max_motif_length - maximal length of a motif (parameter -UM). Default: 22
                int min_motif_block_length - minimal length of a motif block (parameter -LB). Default: 1 
                int max_motif_block_length - maximal length of a motif block (parameter -UB). Default: UM/2                
                int min_motif_gap_length - minimal length of a motif gap (parameter -LG). Default: 0
                int max_motif_gap_length - maximal length of a motif gap (parameter -UG). Default: UM - 2
                
                int initial_rho0 - initialize probability of sequence w/o motif  (parameter -r0). Default: 1 (Dirichlet pdf parameter)
                int initial_rho1 - initialize probability of sequence with motif (parameter -r1). Default: average length of input sequences

                float pa - background probability of a nucleotide A (parameter -d). Default: 0.25 
                float pc - background probability of a nucleotide C (parameter -d). Default: 0.25
                float pg - background probability of a nucleotide G (parameter -d). Default: 0.25
                float pt - background probability of a nucleotide T (parameter -d). Default: 0.25

                int number_of_runs - number of BAMBI runs to be executed (parameter -n). The output of a BAMBI run is a single,
 the most optimal motif. Thus, if number_of_runs is larger than 1, then the "motifs" list in the BambiRunResult will have several elements,
 one per each run. Default: 1
 
                int search_for_minor_sites - search for additional sites using the predicted motif (parameter -s). Default: 0</data></node><node id="M.KBaseExpression.compare_samples_vs_default_controls"><data key="typeName">compare_samples_vs_default_controls</data><data key="name">M.KBaseExpression.compare_samples_vs_default_controls</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">Compares each sample vs its defined default control.  If the Default control is not specified for a sample, then nothing is returned for that sample .
Takes a list of sampleIDs returns SampleComparisonMapping {sample_id -&gt;{denominator_default_control sample_id -&gt;{feature_id -&gt; log2Ratio}}}</data></node><node id="D.KBaseExpression.SampleAnnotation"><data key="typeName">SampleAnnotation</data><data key="name">D.KBaseExpression.SampleAnnotation</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Data structure for top level information for sample annotation and ontology</data></node><node id="D.KmerEval.seq_set"><data key="typeName">seq_set</data><data key="name">D.KmerEval.seq_set</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseExpression.comparison_denominator_label"><data key="typeName">comparison_denominator_label</data><data key="name">D.KBaseExpression.comparison_denominator_label</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">denominator label is the label for the denominator in a comparison.  
This label can be a single sampleId (default or defined) or a comma separated list of sampleIds that were averaged.</data></node><node id="D.ProbabilisticAnnotation.feature_id"><data key="typeName">feature_id</data><data key="name">D.ProbabilisticAnnotation.feature_id</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">A string identifier for a feature.</data></node><node id="D.InvocationService.file"><data key="typeName">file</data><data key="name">D.InvocationService.file</data><data key="moduleName">InvocationService</data><data key="nodeType">D</data><data key="comment">* A file entry. Used as the return from list_files.</data></node><node id="M.KBaseTrees.get_tree_ids_by_source_id_pattern"><data key="typeName">get_tree_ids_by_source_id_pattern</data><data key="name">M.KBaseTrees.get_tree_ids_by_source_id_pattern</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">This method searches for a tree having a source ID that matches the input pattern.  This method accepts
one argument, which is the pattern.  The pattern is very simple and includes only two special characters,
wildcard character, '*', and a match-once character, '.'  The wildcard character matches any number (including
0) of any character, the '.' matches exactly one of any character.  These special characters can be escaped
with a backslash.  To match a blackslash literally, you must also escape it.  Note that source IDs are
generally defined by the gene family model which was used to identifiy the sequences to be included in
the tree.  Therefore, matching a source ID is a convenient way to find trees for a specific set of gene
families.</data></node><node id="D.KBaseDataImport.import_ncbi_genome_params"><data key="typeName">import_ncbi_genome_params</data><data key="name">D.KBaseDataImport.import_ncbi_genome_params</data><data key="moduleName">KBaseDataImport</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseExpression.expression_series_ids"><data key="typeName">expression_series_ids</data><data key="name">D.KBaseExpression.expression_series_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">list of expression series ids that the sample belongs to : note this can not be a ws_reference because ws does not support bidirectional references</data></node><node id="D.Workspace.workspace_metadata"><data key="typeName">workspace_metadata</data><data key="name">D.Workspace.workspace_metadata</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Meta data associated with a workspace. Provided for backwards
compatibility. To be replaced by workspace_info.
        
ws_name id - name of the workspace 
username owner - name of the user who owns (who created) this workspace
timestamp moddate - date when the workspace was last modified
int objects - the approximate number of objects currently stored in
        the workspace.
permission user_permission - permissions for the currently logged in
        user for the workspace
permission global_permission - default permissions for the workspace
        for all KBase users
ws_id num_id - numerical ID of the workspace

@deprecated Workspace.workspace_info</data></node><node id="D.GenomeAnnotation.region_of_dna"><data key="typeName">region_of_dna</data><data key="name">D.GenomeAnnotation.region_of_dna</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment">A region of DNA is maintained as a tuple of four components:

                the contig
                the beginning position (from 1)
                the strand
                the length

           We often speak of "a region".  By "location", we mean a sequence
           of regions from the same genome (perhaps from distinct contigs).

           Strand is either '+' or '-'.</data></node><node id="D.KBaseGenomes.Genome"><data key="typeName">Genome</data><data key="name">D.KBaseGenomes.Genome</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Genome object holds much of the data relevant for a genome in KBase
        Genome publications should be papers about the genome, not
        papers about certain features of the genome (which go into the
        Feature object)
        Should the Genome object have a list of feature ids? (in
        addition to having a list of feature_refs)
        Should the Genome object contain a list of contig_ids too?

@optional quality close_genomes analysis_events features source_id source contigs contig_ids publications md5 taxonomy gc_content complete dna_size num_contigs contig_lengths contigset_ref
@metadata ws gc_content as GC content
@metadata ws taxonomy as Taxonomy
@metadata ws md5 as MD5
@metadata ws dna_size as Size
@metadata ws genetic_code as Genetic code
@metadata ws domain as Domain
    @metadata ws source_id as Source ID
    @metadata ws source as Source
    @metadata ws scientific_name as Name
    @metadata ws length(close_genomes) as Close genomes
    @metadata ws length(features) as Number features
    @metadata ws num_contigs as Number contigs</data></node><node id="D.KBaseExpression.genome_expression_data_samples_mapping"><data key="typeName">genome_expression_data_samples_mapping</data><data key="name">D.KBaseExpression.genome_expression_data_samples_mapping</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">mapping between genomeIDs and all StrainExpressionDataSamplesMapping it contains</data></node><node id="D.NarrativeJobService.app"><data key="typeName">app</data><data key="name">D.NarrativeJobService.app</data><data key="moduleName">NarrativeJobService</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseRegulation.RegulatedOperon"><data key="typeName">RegulatedOperon</data><data key="name">D.KBaseRegulation.RegulatedOperon</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents a regulated operon
operon_id operon_id - identifier of operons
list&lt;Gene&gt; genes  - list of regulated genes
list&lt;RegulatorySite&gt; sites - list of regulatory sites</data></node><node id="D.Workspace.func_string"><data key="typeName">func_string</data><data key="name">D.Workspace.func_string</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">A function string for referencing a funcdef.
Specifies the function and its version in a single string in the format
[modulename].[funcname]-[major].[minor]:

modulename - a string. The name of the module containing the function.
funcname - a string. The name of the function as assigned by the funcdef
        statement.
major - an integer. The major version of the function. A change in the
        major version implies the function has changed in a non-backwards
        compatible way.
minor - an integer. The minor version of the function. A change in the
        minor version implies that the function has changed in a way that is
        backwards compatible with previous function definitions.

In many cases, the major and minor versions are optional, and if not
provided the most recent version will be used.

Example: MyModule.MyFunc-3.1</data></node><node id="D.KBaseSearch.genome_id"><data key="typeName">genome_id</data><data key="name">D.KBaseSearch.genome_id</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">KBase genome ID
@id kb</data></node><node id="D.KBaseExpression.GenomeDataGSM"><data key="typeName">GenomeDataGSM</data><data key="name">D.KBaseExpression.GenomeDataGSM</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Data structure that has the GSM data, warnings, errors and originalLog2Median for that GSM and Genome ID combination</data></node><node id="M.ExpressionServices.get_expression_sample_ids_by_genome_ids"><data key="typeName">get_expression_sample_ids_by_genome_ids</data><data key="name">M.ExpressionServices.get_expression_sample_ids_by_genome_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a list of GenomeIDs, a SampleType ( controlled vocabulary : microarray, RNA-Seq, qPCR, or proteomics) 
and a int indicating WildType Only (1 = true, 0 = false) , it returns a list of Sample IDs</data></node><node id="D.KBaseExpression.contact_institution"><data key="typeName">contact_institution</data><data key="name">D.KBaseExpression.contact_institution</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Institution of GSM contact person</data></node><node id="D.KBaseRegulation.Evidence"><data key="typeName">Evidence</data><data key="name">D.KBaseRegulation.Evidence</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents an evidence of the regulatory interaction. 
evidence_type evidence_type - type of the evidence
string pubmed_id - pubmed id of the paper descirbing the regulatory interaction

@optional pubmed_id</data></node><node id="D.ProbabilisticAnnotation.rxnprobs_id"><data key="typeName">rxnprobs_id</data><data key="name">D.ProbabilisticAnnotation.rxnprobs_id</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">A string identifier for a reaction probabilities object.</data></node><node id="D.KBaseBiochem.Media"><data key="typeName">Media</data><data key="name">D.KBaseBiochem.Media</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Media object

@optional reagents atmosphere_addition atmosphere temperature pH_data isAerobic protocol_link source source_id         
    @metadata ws source_id as Source ID
    @metadata ws source as Source
    @metadata ws name as Name
    @metadata ws temperature as Temperature
    @metadata ws isAerobic as Is Aerobic
    @metadata ws isMinimal as Is Minimal
    @metadata ws isDefined as Is Defined
    @metadata ws length(mediacompounds) as Number compounds</data></node><node id="D.AssemblyInputHandle.AssemblyInput"><data key="typeName">AssemblyInput</data><data key="name">D.AssemblyInputHandle.AssemblyInput</data><data key="moduleName">AssemblyInputHandle</data><data key="nodeType">D</data><data key="comment">Assembly input represents the set of handles and
associated metadata that provides the minimal
inoformation for the KBase assembly service.

paired_end_libs is a list of PairedEndLibrary handles.
single_end_libs is a list of SingleEndLibrary handles.
exprected_coverage is optional.
extimated_genome_size is optional.
data_set_prefix is optional.</data></node><node id="D.KmerEval.genome_tuples"><data key="typeName">genome_tuples</data><data key="name">D.KmerEval.genome_tuples</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.ERDB_Service.rowlist"><data key="typeName">rowlist</data><data key="name">D.ERDB_Service.rowlist</data><data key="moduleName">ERDB_Service</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseBiochem.cue_ref"><data key="typeName">cue_ref</data><data key="name">D.KBaseBiochem.cue_ref</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Reference to a cue object in a biochemistry
@id subws KBaseBiochem.Biochemistry.cues.[*].id</data></node><node id="M.KBaseExpression.get_expression_samples_molecules"><data key="typeName">get_expression_samples_molecules</data><data key="name">M.KBaseExpression.get_expression_samples_molecules</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a List of SampleIDs, returns a Hash (key : SampleID, value: Molecule of Sample)</data></node><node id="D.NarrativeJobService.workspace_object"><data key="typeName">workspace_object</data><data key="name">D.NarrativeJobService.workspace_object</data><data key="moduleName">NarrativeJobService</data><data key="nodeType">D</data><data key="comment">label - label of parameter, can be empty string for positional parameters
value - value of parameter
step_source - step_id that parameter derives from
is_workspace_id - parameter is a workspace id (value is object name)
# the below are only used if is_workspace_id is true
    is_input - parameter is an input (true) or output (false)
    workspace_name - name of workspace
    object_type - name of object type</data></node><node id="D.KBaseFBA.regulome_ref"><data key="typeName">regulome_ref</data><data key="name">D.KBaseFBA.regulome_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to regulome
@id ws KBaseRegulation.Regulome</data></node><node id="M.PROM.change_regulatory_network_namespace"><data key="typeName">change_regulatory_network_namespace</data><data key="name">M.PROM.change_regulatory_network_namespace</data><data key="moduleName">PROM</data><data key="nodeType">M</data><data key="comment">Maps the regulatory network stored in a workspace in one genome namespace to an alternate genome namespace.  This is useful,
for instance, if a regulatory network was built and is available for one genome, but you intend to use it for
a related genome or a genome with different gene calls.  If a gene in the original regulatory network cannot be found in
the translation mapping, then it is simply removed from the new regulatory network.  Thus, if you are only changing the names
of some genes, you still must provide an entry in the input mapping for the genes you wish to keep.  If successful, this method
returns the regulatory network ID of the newly created regulatory network.  This method also returns a status message indicating
what happened or what went wrong.

The mapping&lt;string,string&gt; new_features_names should be defined so that existing IDs are the key and the replacement IDs are the
values stored.</data></node><node id="D.KBasePPI.Boolean"><data key="typeName">Boolean</data><data key="name">D.KBasePPI.Boolean</data><data key="moduleName">KBasePPI</data><data key="nodeType">D</data><data key="comment">enum: 0 or 1</data></node><node id="D.ExpressionServices.ontology_name"><data key="typeName">ontology_name</data><data key="name">D.ExpressionServices.ontology_name</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Kbase OntologyName</data></node><node id="M.RDPTools.probematch_submit"><data key="typeName">probematch_submit</data><data key="name">M.RDPTools.probematch_submit</data><data key="moduleName">RDPTools</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.Ontology.ontology_id_list"><data key="typeName">ontology_id_list</data><data key="name">D.Ontology.ontology_id_list</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">A list of ontology identifiers</data></node><node id="M.KBaseExpression.get_expression_sample_ids_by_experiment_meta_ids"><data key="typeName">get_expression_sample_ids_by_experiment_meta_ids</data><data key="name">M.KBaseExpression.get_expression_sample_ids_by_experiment_meta_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a list of ExperimentMetaIDs returns a list of Sample IDs</data></node><node id="D.ExpressionServices.label_data_mapping"><data key="typeName">label_data_mapping</data><data key="name">D.ExpressionServices.label_data_mapping</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Mapping from Label (often a sample id, but free text to identify} to DataExpressionLevelsForSample</data></node><node id="D.ProbabilisticAnnotation.object_id"><data key="typeName">object_id</data><data key="name">D.ProbabilisticAnnotation.object_id</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">ID of an object stored in the workspace.</data></node><node id="M.ExpressionServices.compare_samples"><data key="typeName">compare_samples</data><data key="name">M.ExpressionServices.compare_samples</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">Compare samples takes two data structures labelDataMapping  {sampleID or label}-&gt;{featureId or label =&gt; value}}, 
the first labelDataMapping is the numerator, the 2nd is the denominator in the comparison. returns a 
SampleComparisonMapping {numerator_sample_id(or label)-&gt;{denominator_sample_id(or label)-&gt;{feature_id(or label) -&gt; log2Ratio}}}</data></node><node id="D.MAK.inputdata_ws_ref"><data key="typeName">inputdata_ws_ref</data><data key="name">D.MAK.inputdata_ws_ref</data><data key="moduleName">MAK</data><data key="nodeType">D</data><data key="comment">Represents WS input data tabke object identifier
@id ws MAK.FloatDataTable</data></node><node id="D.ProteinInfo.neighbor_threshold"><data key="typeName">neighbor_threshold</data><data key="name">D.ProteinInfo.neighbor_threshold</data><data key="moduleName">ProteinInfo</data><data key="nodeType">D</data><data key="comment">A neighbor_threshold is a floating point number indicating a bound
for the neighbor score</data></node><node id="D.ProbabilisticAnnotation.object_metadata"><data key="typeName">object_metadata</data><data key="name">D.ProbabilisticAnnotation.object_metadata</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">Meta data associated with an object stored in a workspace.

        object_id id - ID of the object assigned by the user or retreived from the IDserver (e.g. kb|g.0)
        object_type type - type of the object (e.g. Genome)
        timestamp moddate - date when the object was modified by the user (e.g. 2012-12-17T23:24:06)
        int instance - instance of the object, which is equal to the number of times the user has overwritten the object
        timestamp date_created - time at which the alignment was built/loaded in seconds since the epoch
        string command - name of the command last used to modify or create the object
        username lastmodifier - name of the user who last modified the object
        username owner - name of the user who owns (who created) this object
        workspace_id workspace - ID of the workspace in which the object is currently stored
        workspace_ref ref - a 36 character ID that provides permanent undeniable access to this specific instance of this object
        string chsum - checksum of the associated data object
        mapping&lt;string,string&gt; metadata - custom metadata entered for data object during save operation</data></node><node id="D.KBasePPI.FeatureID"><data key="typeName">FeatureID</data><data key="name">D.KBasePPI.FeatureID</data><data key="moduleName">KBasePPI</data><data key="nodeType">D</data><data key="comment">@id kb</data></node><node id="D.KBaseFBA.genome_ref"><data key="typeName">genome_ref</data><data key="name">D.KBaseFBA.genome_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a model template
@id ws KBaseGenomes.Genome</data></node><node id="M.ProteinInfo.fids_to_ec"><data key="typeName">fids_to_ec</data><data key="name">M.ProteinInfo.fids_to_ec</data><data key="moduleName">ProteinInfo</data><data key="nodeType">M</data><data key="comment">fids_to_ec takes as input a list of feature ids, and returns
a mapping of each fid to its Enzyme Commission numbers (EC).</data></node><node id="M.AbstractHandle.are_readable"><data key="typeName">are_readable</data><data key="name">M.AbstractHandle.are_readable</data><data key="moduleName">AbstractHandle</data><data key="nodeType">M</data><data key="comment">Given a list of handle ids, this function determines if
the underlying data is readable by the caller. If any
one of the handle ids reference unreadable data this
function returns false.</data></node><node id="M.RDPTools.seqmatch"><data key="typeName">seqmatch</data><data key="name">M.RDPTools.seqmatch</data><data key="moduleName">RDPTools</data><data key="nodeType">M</data><data key="comment">Takes as input a list of options (namely, the k nearest neighbors
and the minimum sab score), the file containing reference sequences,
and the file containing query sequences.  It returns a list of k
results per query sequence with the matching sequences.</data></node><node id="M.UserAndJobState.update_job_progress"><data key="typeName">update_job_progress</data><data key="name">M.UserAndJobState.update_job_progress</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Update the status and progress for a job.</data></node><node id="D.MAK.genome_ws_ref"><data key="typeName">genome_ws_ref</data><data key="name">D.MAK.genome_ws_ref</data><data key="moduleName">MAK</data><data key="nodeType">D</data><data key="comment">Represents WS genome identifier
@id ws KBaseGenomes.Genome</data></node><node id="D.KBasePhenotypes.phenosim_id"><data key="typeName">phenosim_id</data><data key="name">D.KBasePhenotypes.phenosim_id</data><data key="moduleName">KBasePhenotypes</data><data key="nodeType">D</data><data key="comment">Phenotype simulation ID
@id external</data></node><node id="D.ProteinInfo.domain_id"><data key="typeName">domain_id</data><data key="name">D.ProteinInfo.domain_id</data><data key="moduleName">ProteinInfo</data><data key="nodeType">D</data><data key="comment">A domain_id is an identifier of a protein domain or family
(e.g., COG593, TIGR00362). Most of these are stable identifiers
that come from external curated libraries, such as COG or InterProScan,
but some may be unstable identifiers that come from automated
analyses like FastBLAST. (The current implementation includes only
COG and InterProScan HMM libraries, such as TIGRFam and Pfam.)</data></node><node id="D.Workspace.typename"><data key="typeName">typename</data><data key="name">D.Workspace.typename</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">A type definition name in a KIDL typespec.</data></node><node id="D.KBaseFBA.ReactionSensitivityAnalysisCorrectedReaction"><data key="typeName">ReactionSensitivityAnalysisCorrectedReaction</data><data key="name">D.KBaseFBA.ReactionSensitivityAnalysisCorrectedReaction</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">ReactionSensitivityAnalysisCorrectedReaction object

kb_sub_id kbid - KBase ID for reaction knockout corrected reaction
ws_sub_id model_reaction_wsid - ID of model reaction
float normalized_required_reaction_count - Normalized count of reactions required for this reaction to function
list&lt;ws_sub_id&gt; required_reactions - list of reactions required for this reaction to function

@optional</data></node><node id="D.KBaseBiochem.Compartment"><data key="typeName">Compartment</data><data key="name">D.KBaseBiochem.Compartment</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Compartment object

    @searchable ws_subset id name hierarchy</data></node><node id="D.KBaseGenomes.TranscriptSet_ref"><data key="typeName">TranscriptSet_ref</data><data key="name">D.KBaseGenomes.TranscriptSet_ref</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Reference to a TranscriptSet object containing the transcripts for this genome in the workspace
@id ws KBaseGenomes.TranscriptSet</data></node><node id="D.KBaseExpression.experiment_meta_expression_data_samples_mapping"><data key="typeName">experiment_meta_expression_data_samples_mapping</data><data key="name">D.KBaseExpression.experiment_meta_expression_data_samples_mapping</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">mapping between experimentMetaIDs and ExperimentalUnitExpressionDataSamplesMapping it contains</data></node><node id="M.RDPTools.seqmatch_submit"><data key="typeName">seqmatch_submit</data><data key="name">M.RDPTools.seqmatch_submit</data><data key="moduleName">RDPTools</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.UserAndJobState.set_state_auth"><data key="typeName">set_state_auth</data><data key="name">M.UserAndJobState.set_state_auth</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Set the state of a key for a service with service authentication.</data></node><node id="D.KBaseSearch.alias"><data key="typeName">alias</data><data key="name">D.KBaseSearch.alias</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Workspace.obj_id"><data key="typeName">obj_id</data><data key="name">D.Workspace.obj_id</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">The unique, permanent numerical ID of an object.</data></node><node id="M.Tree.get_tree_data"><data key="typeName">get_tree_data</data><data key="name">M.Tree.get_tree_data</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">Get meta data associated with each of the trees indicated in the list by tree id.  Note that some meta
data may not be available for trees which are not built from alignments.  Also note that this method
computes the number of nodes and leaves for each tree, so may be slow for very large trees or very long
lists.  If you do not need this full meta information structure, it may be faster to directly query the
CDS for just the field you need using the CDMI.</data></node><node id="D.MEME.TomtomHit"><data key="typeName">TomtomHit</data><data key="name">D.MEME.TomtomHit</data><data key="moduleName">MEME</data><data key="nodeType">D</data><data key="comment">Represents a particluar TOMTOM hit
string query_pspm_id - id of query MemePSPM
string target_pspm_id - id of target MemePSPM
int optimal_offset - Optimal offset: the offset between the query and the target motif
float pvalue - p-value
float evalue - E-value
float qvalue - q-value
int overlap - Overlap: the number of positions of overlap between the two motifs.
string query_consensus - Query consensus sequence.
string target_consensus - Target consensus sequence.
string strand - Orientation: Orientation of target motif with respect to query motif.

@optional optimal_offset pvalue evalue qvalue overlap query_consensus target_consensus strand</data></node><node id="M.ExpressionServices.get_expression_series_external_source_ids"><data key="typeName">get_expression_series_external_source_ids</data><data key="name">M.ExpressionServices.get_expression_series_external_source_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a List of SeriesIDs, returns a Hash (key : SeriesID, value: External_Source_ID of Series (typically GSE))</data></node><node id="D.KBaseGenomes.ProteinSet_id"><data key="typeName">ProteinSet_id</data><data key="name">D.KBaseGenomes.ProteinSet_id</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">KBase ProteinSet ID
@id kb</data></node><node id="D.Workspace.lock_status"><data key="typeName">lock_status</data><data key="name">D.Workspace.lock_status</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">The lock status of a workspace.
One of 'unlocked', 'locked', or 'published'.</data></node><node id="M.ProteinInfo.fids_to_go"><data key="typeName">fids_to_go</data><data key="name">M.ProteinInfo.fids_to_go</data><data key="moduleName">ProteinInfo</data><data key="nodeType">M</data><data key="comment">fids_to_go takes as input a list of feature ids, and returns
a mapping of each fid to its Gene Ontology assignments (GO).</data></node><node id="D.GenomeComparison.annotate_genome_params"><data key="typeName">annotate_genome_params</data><data key="name">D.GenomeComparison.annotate_genome_params</data><data key="moduleName">GenomeComparison</data><data key="nodeType">D</data><data key="comment">string in_genome_ws - workspace of input genome
string in_genome_id - id of input genome
string out_genome_ws - workspace of output genome
string out_genome_id - future id of output genome
int seed_annotation_only - optional flag (default value is 0) preventing gene calling</data></node><node id="D.KBasePhenotypes.fbamodel_ref"><data key="typeName">fbamodel_ref</data><data key="name">D.KBasePhenotypes.fbamodel_ref</data><data key="moduleName">KBasePhenotypes</data><data key="nodeType">D</data><data key="comment">Reference to a model object
@id ws KBaseFBA.FBAModel</data></node><node id="D.KBaseProteinStructure.feature_ids_t"><data key="typeName">feature_ids_t</data><data key="name">D.KBaseProteinStructure.feature_ids_t</data><data key="moduleName">KBaseProteinStructure</data><data key="nodeType">D</data><data key="comment">list of feature ids</data></node><node id="D.KBaseFBA.FBAModelSet"><data key="typeName">FBAModelSet</data><data key="name">D.KBaseFBA.FBAModelSet</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">A type describing a set of FBAModels, where each element of the set 
is an FBAModel object reference.</data></node><node id="D.KBaseCommunities.date"><data key="typeName">date</data><data key="name">D.KBaseCommunities.date</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseCommunities.Abundance1DTableFloat"><data key="typeName">Abundance1DTableFloat</data><data key="name">D.KBaseCommunities.Abundance1DTableFloat</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.ERDB_Service.count"><data key="typeName">count</data><data key="name">D.ERDB_Service.count</data><data key="moduleName">ERDB_Service</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.KBaseExpression.get_expression_sample_ids_by_platform_external_source_ids"><data key="typeName">get_expression_sample_ids_by_platform_external_source_ids</data><data key="name">M.KBaseExpression.get_expression_sample_ids_by_platform_external_source_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">get sample ids by the platform's external source id : Takes a list of platform external source ids, and returns a list of sample ids</data></node><node id="D.KBaseTrees.ConstructSpeciesTreeParams"><data key="typeName">ConstructSpeciesTreeParams</data><data key="name">D.KBaseTrees.ConstructSpeciesTreeParams</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">Input data type for construct_species_tree method. Method produces object of Tree type.

        new_genomes - (required) the list of genome references to use in constructing a tree
        out_workspace - (required) the workspace to deposit the completed tree
        out_tree_id - (optional) the name of the newly constructed tree (will be random if not present or null)
        use_ribosomal_s9_only - (optional) 1 means only one protein family (Ribosomal S9) is used for 
            tree construction rather than all 49 improtant families, default value is 0.
        nearest_genome_count - (optional) defines maximum number of public genomes nearest to
            requested genomes that will show in output tree.</data></node><node id="D.KBaseGenomes.ProbabilisticAnnotation"><data key="typeName">ProbabilisticAnnotation</data><data key="name">D.KBaseGenomes.ProbabilisticAnnotation</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Object to carry alternative functions and probabilities for genes in a genome    

        probanno_id id - ID of the probabilistic annotation object    
        Genome_ref genome_ref - reference to genome probabilistic annotation was built for
        mapping&lt;Feature_id, list&lt;function_probability&gt;&gt; roleset_probabilities - mapping of features to list of alternative function_probability objects
        list&lt;Feature_id&gt; skipped_features - list of features in genome with no probability
        
            @searchable ws_subset id genome_ref skipped_features</data></node><node id="M.Workspace.get_func_info"><data key="typeName">get_func_info</data><data key="name">M.Workspace.get_func_info</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseRegulation.gene_id"><data key="typeName">gene_id</data><data key="name">D.KBaseRegulation.gene_id</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents gene identifier</data></node><node id="D.Transform.ConvertParameters"><data key="typeName">ConvertParameters</data><data key="name">D.Transform.ConvertParameters</data><data key="moduleName">Transform</data><data key="nodeType">D</data><data key="comment">Method convert:

This method provides the capability to convert between two KBase object types.</data></node><node id="D.KBaseCommunities.Metagenome"><data key="typeName">Metagenome</data><data key="name">D.KBaseCommunities.Metagenome</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment">metagenome_id, metagenome_name,project,sample,sequence_type are required, everything else optional
to be indexed for search: everything, except metagenome_url, library_url, sequence_download_urls
need to store (in ws) and unfold (for solr) metadata

@optional metagenome_url library_id library_url metadata sequence_download_urls seq_method created</data></node><node id="M.KBaseTrees.get_alignment_ids_by_protein_sequence"><data key="typeName">get_alignment_ids_by_protein_sequence</data><data key="name">M.KBaseTrees.get_alignment_ids_by_protein_sequence</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Given a list of kbase ids of a protein sequences (their MD5s), retrieve the alignment ids of trees that
were built based on these sequences.</data></node><node id="D.KBaseGwasData.traitTopvariationUnit"><data key="typeName">traitTopvariationUnit</data><data key="name">D.KBaseGwasData.traitTopvariationUnit</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">Trait - TopVariation Unit</data></node><node id="D.Communities.BiomMatrix"><data key="typeName">BiomMatrix</data><data key="name">D.Communities.BiomMatrix</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment">BiomMatrix
A KBase object for a metagenome profile in BIOM format
@optional url matrix_element_value metagenomes
searchable BiomMetagenome.*</data></node><node id="M.Workspace.get_object_info"><data key="typeName">get_object_info</data><data key="name">M.Workspace.get_object_info</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Get information about objects from the workspace.

Set includeMetadata true to include the user specified metadata.
Otherwise the metadata in the object_info will be null.

This method will be replaced by the behavior of get_object_info_new
in the future.

@deprecated Workspace.get_object_info_new</data></node><node id="D.KBaseAssembly.Handle"><data key="typeName">Handle</data><data key="name">D.KBaseAssembly.Handle</data><data key="moduleName">KBaseAssembly</data><data key="nodeType">D</data><data key="comment">@optional hid file_name type url remote_md5 remote_sha1</data></node><node id="D.KBaseExpression.gsm_warnings"><data key="typeName">gsm_warnings</data><data key="name">D.KBaseExpression.gsm_warnings</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">List of GSM level warnings</data></node><node id="D.KBaseFBA.Classifier"><data key="typeName">Classifier</data><data key="name">D.KBaseFBA.Classifier</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.ServiceRegistry.register_service"><data key="typeName">register_service</data><data key="name">M.ServiceRegistry.register_service</data><data key="moduleName">ServiceRegistry</data><data key="nodeType">M</data><data key="comment">Register a service. Takes a service struct, and returns the
service id that is assigned to the newly registered service.
If the registration of a service is unsuccessful, either an
error is thrown, or zero is returned.

The side effect of the register_service call (either directly
or via an agent on the frontend machine(s)) would be to create
the nginx configuration stanza that maps api.kbase.us/name/namespace
to the registered URL. See the update_nginx() function.</data></node><node id="D.KBaseGenomes.Reads_ref"><data key="typeName">Reads_ref</data><data key="name">D.KBaseGenomes.Reads_ref</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Reference to a reads file in shock
@id shock</data></node><node id="D.KBaseSearch.Feature"><data key="typeName">Feature</data><data key="name">D.KBaseSearch.Feature</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Structure for a single feature of a Genome
        Should genome_id contain the genome_id in the Genome object,
        the workspace id of the Genome object, a genomeref,
        something else?
        
    @optional function md5 feature_source_id protein_translation protein_families subsystems roles feature_publications subsystems subsystem_data aliases annotations regulon_data atomic_regulons coexpressed_fids co_occurring_fids dna_sequence protein_translation_length dna_sequence_length
    @searchable ws_subset feature_id feature_type function aliases md5</data></node><node id="M.PROM.create_expression_data_collection"><data key="typeName">create_expression_data_collection</data><data key="name">M.PROM.create_expression_data_collection</data><data key="moduleName">PROM</data><data key="nodeType">M</data><data key="comment">This method creates a new, empty, expression data collection in the specified workspace. If the method was successful,
the ID of the expression data set will be returned.  The method also returns a status message providing additional
details of the steps that occured or a message that indicates what failed.  If the method fails, no expression
data ID is returned.</data></node><node id="D.KBaseCommunities.Project"><data key="typeName">Project</data><data key="name">D.KBaseCommunities.Project</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment">project_id and project_name are required, everything else optional
to be indexed for search: everything, except project_url, samples, URLs in contact info
need to unfold contact structures properly
@optional project_description created samples PI_info tech_contact funding_source ncbi_id qiime_id vamps_id greengenes_id project_url</data></node><node id="D.ExpressionServices.sample_ids_averaged_from"><data key="typeName">sample_ids_averaged_from</data><data key="name">D.ExpressionServices.sample_ids_averaged_from</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">List of KBase Sample IDs that this sample was averaged from</data></node><node id="M.IdMap.longest_cds_from_mrna"><data key="typeName">longest_cds_from_mrna</data><data key="name">M.IdMap.longest_cds_from_mrna</data><data key="moduleName">IdMap</data><data key="nodeType">M</data><data key="comment">Returns a mapping a mrna feature id to a cds feature id.</data></node><node id="D.KBaseGenomes.Close_genome"><data key="typeName">Close_genome</data><data key="name">D.KBaseGenomes.Close_genome</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">@optional genome closeness_measure</data></node><node id="M.AskKB.save"><data key="typeName">save</data><data key="name">M.AskKB.save</data><data key="moduleName">AskKB</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseExpression.data_sample_comparison"><data key="typeName">data_sample_comparison</data><data key="name">D.KBaseExpression.data_sample_comparison</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">mapping kbase feature id as the key and log2Ratio as the value</data></node><node id="D.KBaseSearch.ContigSet"><data key="typeName">ContigSet</data><data key="name">D.KBaseSearch.ContigSet</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Type spec for the "ContigSet" object

                contigset_id id - unique kbase ID of the contig set
                string name - name of the contig set
                string type - type of the contig set (values are: Organism,Environment,Collection)
                source_id source_id - source ID of the contig set
                string source - source of the contig set
                list&lt;Contig&gt; contigs - list of contigs in the contig set
                reads_ref reads_ref - reference to the shocknode with the rawreads from which contigs were assembled
                fasta_ref fasta_ref - reference to fasta file from which contig set were read

                @optional name md5 source_id source type reads_ref fasta_ref
        @searchable ws_subset contigs.*.(id,md5) md5 id name source_id source type</data></node><node id="D.Cmonkey.CmonkeyRunParameters"><data key="typeName">CmonkeyRunParameters</data><data key="name">D.Cmonkey.CmonkeyRunParameters</data><data key="moduleName">Cmonkey</data><data key="nodeType">D</data><data key="comment">Contains parameters of a cMonkey run
int networks_scoring = &lt;0|1&gt; - if 1, Network scoring will be used
int motifs_scoring = &lt;0|1&gt; - if 1, Motif scoring will be used
expression_series_ws_ref series_id - workspace id of expression data series;
genome_ws_ref genome_id - workspace id of genome;
operons_ws_ref operome_id - workspace id of operome;
network_ws_ref network_id - workspace id of network;

@optional genome_ref operome_ref network_ref</data></node><node id="D.GenomeAnnotation.fid_data_tuple"><data key="typeName">fid_data_tuple</data><data key="name">D.GenomeAnnotation.fid_data_tuple</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseFBA.Classifier_ref"><data key="typeName">Classifier_ref</data><data key="name">D.KBaseFBA.Classifier_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a classifier object
@id ws KBaseFBA.Classifier</data></node><node id="M.GenomeAnnotation.resolve_overlapping_features"><data key="typeName">resolve_overlapping_features</data><data key="name">M.GenomeAnnotation.resolve_overlapping_features</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.TaxonomyTranslation.get_all_translations"><data key="typeName">get_all_translations</data><data key="name">M.TaxonomyTranslation.get_all_translations</data><data key="moduleName">TaxonomyTranslation</data><data key="nodeType">M</data><data key="comment">Returns all possible name translations for a given name.</data></node><node id="D.KBaseExpression.kbase_genome_id"><data key="typeName">kbase_genome_id</data><data key="name">D.KBaseExpression.kbase_genome_id</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">id for the genome

@id ws KBaseGenomes.Genome</data></node><node id="D.KBaseSearch.ProteinFamily"><data key="typeName">ProteinFamily</data><data key="name">D.KBaseSearch.ProteinFamily</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Structure for a protein family
        @optional query_begin query_end subject_begin subject_end score evalue subject_description release_version</data></node><node id="D.Communities.MetagenomeMatrix"><data key="typeName">MetagenomeMatrix</data><data key="name">D.Communities.MetagenomeMatrix</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.CoExpression.ConstCoexNetClustParams"><data key="typeName">ConstCoexNetClustParams</data><data key="name">D.CoExpression.ConstCoexNetClustParams</data><data key="moduleName">CoExpression</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.KBaseGeneFamilies.version"><data key="typeName">version</data><data key="name">M.KBaseGeneFamilies.version</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">M</data><data key="comment">returns version number of service</data></node><node id="D.GenomeAnnotation.rna_type"><data key="typeName">rna_type</data><data key="name">D.GenomeAnnotation.rna_type</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment">[ validate.enum("5S", "SSU", "LSU", "ALL") ]</data></node><node id="D.RDPTools.Handle"><data key="typeName">Handle</data><data key="name">D.RDPTools.Handle</data><data key="moduleName">RDPTools</data><data key="nodeType">D</data><data key="comment">Handle type taken from the handle service spec.</data></node><node id="D.KBaseCommunities.GenomeSet"><data key="typeName">GenomeSet</data><data key="name">D.KBaseCommunities.GenomeSet</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.UserAndJobState.force_delete_job"><data key="typeName">force_delete_job</data><data key="name">M.UserAndJobState.force_delete_job</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Force delete a job - will succeed unless the job has not been started.
In that case, the service must start the job and then delete it, since
a job is not "owned" by any service until it is started.
Does not currently work with AWE jobs.</data></node><node id="D.Communities.SequenceSet"><data key="typeName">SequenceSet</data><data key="name">D.Communities.SequenceSet</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KmerEval.genome_tuple"><data key="typeName">genome_tuple</data><data key="name">D.KmerEval.genome_tuple</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.GenomeAnnotation.cdd_hit"><data key="typeName">cdd_hit</data><data key="name">D.GenomeAnnotation.cdd_hit</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseFBA.modelcompound_ref"><data key="typeName">modelcompound_ref</data><data key="name">D.KBaseFBA.modelcompound_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a compound object in a model
@id subws KBaseFBA.FBAModel.modelcompounds.[*].id</data></node><node id="M.MEME.find_motifs_with_meme_job_from_ws"><data key="typeName">find_motifs_with_meme_job_from_ws</data><data key="name">M.MEME.find_motifs_with_meme_job_from_ws</data><data key="moduleName">MEME</data><data key="nodeType">M</data><data key="comment">Returns id of job object that contains id of a single MEME run result
MEME will be run with -dna -text parameters
string ws_name - workspace id to save run result
MemeRunParameters params - parameters of MEME run</data></node><node id="D.KBaseFBA.phenotypesimulationset_ref"><data key="typeName">phenotypesimulationset_ref</data><data key="name">D.KBaseFBA.phenotypesimulationset_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a phenotype simulation set object
@id ws KBasePhenotypes.PhenotypeSimulationSet</data></node><node id="D.GenomeAnnotation.genome_metadata"><data key="typeName">genome_metadata</data><data key="name">D.GenomeAnnotation.genome_metadata</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment">* Genome metadata. We use this structure to define common metadata
* settings used in the API calls below. It is possible this data should
* have been separated in this way in the genome object itself, but there
* is an extant body of code that assumes the current structure of the genome
* object.</data></node><node id="D.KBaseGwasData.kinship_data"><data key="typeName">kinship_data</data><data key="name">D.KBaseGwasData.kinship_data</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">kinship_matrix_shock_id - shock id of kinship matrix data;</data></node><node id="D.KBaseOntology.ontology_acc"><data key="typeName">ontology_acc</data><data key="name">D.KBaseOntology.ontology_acc</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment">A ontology id is a string (usually GO:NNNN)</data></node><node id="D.KBaseRegulation.RegulogCollection"><data key="typeName">RegulogCollection</data><data key="name">D.KBaseRegulation.RegulogCollection</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents collection of regulogs
regulog_collection_id regulog_collection_id - identifier of a regulog collection
string name - collection name
string description - collection description
list&lt;Regulog&gt; regulogs - list of regulogs comprising this collection
list&lt;Genome&gt; genomes - list genomes represented by this collection</data></node><node id="D.KBaseTrees.MSASet"><data key="typeName">MSASet</data><data key="name">D.KBaseTrees.MSASet</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">Type for collection of MSA objects.</data></node><node id="D.KBaseSequences.Sequence"><data key="typeName">Sequence</data><data key="name">D.KBaseSequences.Sequence</data><data key="moduleName">KBaseSequences</data><data key="nodeType">D</data><data key="comment">Represents a particular sequence from sequence set
string sequence_id - identifier of a sequence
string description - description of a sequence
string sequence - nucleotide sequence</data></node><node id="M.GenomeAnnotation.compute_special_proteins"><data key="typeName">compute_special_proteins</data><data key="name">M.GenomeAnnotation.compute_special_proteins</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseGwasData.VariationSample"><data key="typeName">VariationSample</data><data key="name">D.KBaseGwasData.VariationSample</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">Variation fastq  object</data></node><node id="D.KBaseGwasData.GwasPopulationKinship"><data key="typeName">GwasPopulationKinship</data><data key="name">D.KBaseGwasData.GwasPopulationKinship</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">GwasPopulationKinship has population kinship matrix

      genome - genome details
      GwasPopulationVariation_obj_id - object id of the population
      kinship_data is the shock reference of data for the kinship matrix</data></node><node id="D.KBaseFBA.ModelCompartment"><data key="typeName">ModelCompartment</data><data key="name">D.KBaseFBA.ModelCompartment</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">ModelCompartment object</data></node><node id="M.GenomeAnnotation.pipeline_batch_status"><data key="typeName">pipeline_batch_status</data><data key="name">M.GenomeAnnotation.pipeline_batch_status</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.ProbabilisticAnnotation.get_probanno"><data key="typeName">get_probanno</data><data key="name">M.ProbabilisticAnnotation.get_probanno</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">M</data><data key="comment">Convert a ProbAnno object into a human-readbale table.</data></node><node id="D.KBaseRegulation.regulator_id"><data key="typeName">regulator_id</data><data key="name">D.KBaseRegulation.regulator_id</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents regulator identifier</data></node><node id="D.Workspace.timestamp"><data key="typeName">timestamp</data><data key="name">D.Workspace.timestamp</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">A time in the format YYYY-MM-DDThh:mm:ssZ, where Z is either the
character Z (representing the UTC timezone) or the difference
in time to UTC in the format +/-HHMM, eg:
        2012-12-17T23:24:06-0500 (EST time)
        2013-04-03T08:56:32+0000 (UTC time)
        2013-04-03T08:56:32Z (UTC time)</data></node><node id="D.Communities.Metagenome"><data key="typeName">Metagenome</data><data key="name">D.Communities.Metagenome</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment">Metagenome</data></node><node id="M.GenomeAnnotation.pipeline_batch_start"><data key="typeName">pipeline_batch_start</data><data key="name">M.GenomeAnnotation.pipeline_batch_start</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.NarrativeJobService.list_running_apps"><data key="typeName">list_running_apps</data><data key="name">M.NarrativeJobService.list_running_apps</data><data key="moduleName">NarrativeJobService</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseTrees.AbundanceResult"><data key="typeName">AbundanceResult</data><data key="name">D.KBaseTrees.AbundanceResult</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">Structure to group output of the compute_abundance_profile method.

    mapping &lt;string,int&gt; abundances - maps the raw row ID of each leaf node in the input tree to the number
                                      of hits that map to the given leaf; only row IDs with 1 or more hits
                                      are added to this map, thus missing leaf nodes imply 0 hits
    int n_hits                      - the total number of hits in this sample to any leaf
    int n_reads                     - the total number of reads that were identified for the input protein
                                      family; if the protein family could not be found this will be zero.</data></node><node id="D.KBaseBiochem.Biochemistry"><data key="typeName">Biochemistry</data><data key="name">D.KBaseBiochem.Biochemistry</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Biochemistry object

@optional description name
@searchable ws_subset compartments.[*].(id,name)
@searchable ws_subset compounds.[*].(id,name)
@searchable ws_subset reactions.[*].(id)
@searchable ws_subset cues.[*].(id,name,smallMolecule)
@searchable ws_subset reactionSets.[*].(id,name,class,reaction_refs,type)
@searchable ws_subset compoundSets.[*].(id,name,class,compound_refs,type)</data></node><node id="M.ExpressionServices.get_expression_samples_external_source_ids"><data key="typeName">get_expression_samples_external_source_ids</data><data key="name">M.ExpressionServices.get_expression_samples_external_source_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a List of SampleIDs, returns a Hash (key : SampleID, value: External_Source_ID of Sample (typically GSM))</data></node><node id="D.KBaseFBA.ETCPathwayObj"><data key="typeName">ETCPathwayObj</data><data key="name">D.KBaseFBA.ETCPathwayObj</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">ETCPathwayObj object</data></node><node id="D.KBaseFBA.Gapfilling"><data key="typeName">Gapfilling</data><data key="name">D.KBaseFBA.Gapfilling</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">GapFilling object holds data on the formulations and solutions of a gapfilling analysis

@optional simultaneousGapfill totalTimeLimit timePerSolution transporterMultiplier singleTransporterMultiplier biomassTransporterMultiplier noDeltaGMultiplier noStructureMultiplier deltaGMultiplier directionalityMultiplier drainFluxMultiplier reactionActivationBonus allowableCompartment_refs blacklistedReaction_refs targetedreaction_refs guaranteedReaction_refs completeGapfill balancedReactionsOnly reactionAdditionHypothesis gprHypothesis biomassHypothesis mediaHypothesis fba_ref media_ref probanno_ref
@metadata ws fba_ref as FBA
    @metadata ws fbamodel_ref as Model
    @metadata ws media_ref as Media
    @metadata ws length(gapfillingSolutions) as Number solutions</data></node><node id="D.Sim.sim_vec"><data key="typeName">sim_vec</data><data key="name">D.Sim.sim_vec</data><data key="moduleName">Sim</data><data key="nodeType">D</data><data key="comment">Each similarity returned is encapsulated in a sim_vec tuple. This tuple
contains the similar protein identifiers, as well as the columns as seen in the
blastall -m8 output..

The columns in the tuple are defined as follows:

  0   id1        query sequence id
  1   id2        subject sequence id
  2   iden       percentage sequence identity
  3   ali_ln     alignment length
  4   mismatches  number of mismatch
  5   gaps       number of gaps
  6   b1         query seq match start
  7   e1         query seq match end
  8   b2         subject seq match start
  9   e2         subject seq match end
 10   psc        match e-value
 11   bsc        bit score
 12   ln1        query sequence length
 13   ln2        subject sequence length
 14   tool       tool used to produce similarities

All following fields may vary by tool:

 15   loc1       query seq locations string (b1-e1,b2-e2,b3-e3)
 16   loc2       subject seq locations string (b1-e1,b2-e2,b3-e3)
 17   dist       tree distance

We also return this column for any lookups when the kb_function2 flag
is enabled:

 18  function2   The function associated with id2 in the KBase.</data></node><node id="M.Workspace.remove_module_ownership"><data key="typeName">remove_module_ownership</data><data key="name">M.Workspace.remove_module_ownership</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Remove ownership from a current owner. You must have the grant ability
on the module.</data></node><node id="D.KBasePhenotypes.phenotype_id"><data key="typeName">phenotype_id</data><data key="name">D.KBasePhenotypes.phenotype_id</data><data key="moduleName">KBasePhenotypes</data><data key="nodeType">D</data><data key="comment">Phenotype ID
@id external</data></node><node id="D.KBaseGenomes.Feature_quality_measure"><data key="typeName">Feature_quality_measure</data><data key="name">D.KBaseGenomes.Feature_quality_measure</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">@optional weighted_hit_count hit_count existence_priority overlap_rules pyrrolysylprotein truncated_begin truncated_end existence_confidence frameshifted selenoprotein</data></node><node id="D.ExpressionServices.gsm_data"><data key="typeName">gsm_data</data><data key="name">D.ExpressionServices.gsm_data</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">mapping kbase feature id as the key and FullMeasurement Structure as the value</data></node><node id="M.RDPTools.classify"><data key="typeName">classify</data><data key="name">M.RDPTools.classify</data><data key="moduleName">RDPTools</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.KBaseExpression.get_expression_series_external_source_ids"><data key="typeName">get_expression_series_external_source_ids</data><data key="name">M.KBaseExpression.get_expression_series_external_source_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a List of SeriesIDs, returns a Hash (key : SeriesID, value: External_Source_ID of Series (typically GSE))</data></node><node id="D.KBaseBiochem.fbamodel_id"><data key="typeName">fbamodel_id</data><data key="name">D.KBaseBiochem.fbamodel_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">FBAModel ID
@id kb</data></node><node id="M.KBaseTrees.compute_abundance_profile"><data key="typeName">compute_abundance_profile</data><data key="name">M.KBaseTrees.compute_abundance_profile</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Given an input KBase tree built from a sequence alignment, a metagenomic sample, and a protein family, this method
will tabulate the number of reads that match to every leaf of the input tree.  First, a set of assembled reads from
a metagenomic sample are pulled from the KBase communities service which have been determined to be a likely hit
to the specified protein family.  Second, the sequences aligned to generate the tree are retrieved.  Third, UCLUST [1]
is used to map reads to target sequences of the tree.  Finally, for each leaf in the tree, the number of hits matching
the input search criteria is tabulated and returned.  See the defined objects 'abundance_params' and 'abundance_result'
for additional details on specifying the input parameters and handling the results.

[1] Edgar, R.C. (2010) Search and clustering orders of magnitude faster than BLAST, Bioinformatics 26(19), 2460-2461.</data></node><node id="D.KBaseBiochem.Reaction"><data key="typeName">Reaction</data><data key="name">D.KBaseBiochem.Reaction</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Reaction object

@optional md5 deltaG deltaGErr abstractReaction_ref cues
    @searchable ws_subset id name abbreviation md5 direction thermoReversibility status defaultProtons deltaG abstractReaction_ref cues
    @searchable ws_subset reagents.[*].(compound_ref,compartment_ref,coefficient,isCofactor)</data></node><node id="D.KBaseFBA.gapgen_ref"><data key="typeName">gapgen_ref</data><data key="name">D.KBaseFBA.gapgen_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a gapgen object
@id ws KBaseFBA.Gapgeneration</data></node><node id="D.Tree.json_tree"><data key="typeName">json_tree</data><data key="name">D.Tree.json_tree</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">Trees are represented in KBase by default in newick format (http://en.wikipedia.org/wiki/Newick_format),
but can optionally be converted to JSON format where the structure of the tree matches the structure of
the JSON object.  This is useful when interacting with the tree in JavaScript, for instance.</data></node><node id="M.ExpressionServices.get_expression_samples_data_by_experimental_unit_ids"><data key="typeName">get_expression_samples_data_by_experimental_unit_ids</data><data key="name">M.ExpressionServices.get_expression_samples_data_by_experimental_unit_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a list of ExperimentalUnitIDs returns mapping of ExperimentalUnitID to expressionDataSamples : {experimental_unit_id -&gt; {sample_id -&gt; expressionSampleDataStructure}}</data></node><node id="M.ExpressionServices.get_expression_samples_data_by_ontology_ids"><data key="typeName">get_expression_samples_data_by_ontology_ids</data><data key="name">M.ExpressionServices.get_expression_samples_data_by_ontology_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a list of ontologyIDs, AndOr operator (and requires sample to have all ontology IDs, or sample has to have any of the terms), GenomeId, 
SampleType ( controlled vocabulary : microarray, RNA-Seq, qPCR, or proteomics), wildTypeOnly returns OntologyID(concatenated if Anded) -&gt; ExpressionDataSample</data></node><node id="D.KBaseGenomes.Analysis_event"><data key="typeName">Analysis_event</data><data key="name">D.KBaseGenomes.Analysis_event</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">@optional tool_name execution_time parameters hostname</data></node><node id="D.KBaseSearch.Type2CommandConfig"><data key="typeName">Type2CommandConfig</data><data key="name">D.KBaseSearch.Type2CommandConfig</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseTrees.parent_len"><data key="typeName">parent_len</data><data key="name">D.KBaseTrees.parent_len</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.Workspace.save_objects"><data key="typeName">save_objects</data><data key="name">M.Workspace.save_objects</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Save objects to the workspace. Saving over a deleted object undeletes
it.</data></node><node id="D.ProbabilisticAnnotation.ProbAnno"><data key="typeName">ProbAnno</data><data key="name">D.ProbabilisticAnnotation.ProbAnno</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">Object to carry alternative functions and probabilities for genes in a genome    

        probanno_id id - ID of the probabilistic annotation object    
        genome_id genome - ID of the genome the probabilistic annotation was built for
        workspace_id genome_workspace - ID of the workspace containing genome
        mapping&lt;feature_id, list&lt;function_probability&gt;&gt; roleset_probabilities - mapping of features to list of alternative function_probability objects
        list&lt;feature_id&gt; skipped_features - list of features in genome with no probability</data></node><node id="D.KBaseCommunities.Abundance2DTableInt"><data key="typeName">Abundance2DTableInt</data><data key="name">D.KBaseCommunities.Abundance2DTableInt</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.GenomeAnnotation.pipeline_batch_status_entry"><data key="typeName">pipeline_batch_status_entry</data><data key="name">D.GenomeAnnotation.pipeline_batch_status_entry</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.ExpressionServices.genome_ids"><data key="typeName">genome_ids</data><data key="name">D.ExpressionServices.genome_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">list of KBase GenomeIDs</data></node><node id="D.KBaseExpression.gsm_sample_characteristics"><data key="typeName">gsm_sample_characteristics</data><data key="name">D.KBaseExpression.gsm_sample_characteristics</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">List of GSM Sample Characteristics from ch1</data></node><node id="D.KBaseFile.assembly_id"><data key="typeName">assembly_id</data><data key="name">D.KBaseFile.assembly_id</data><data key="moduleName">KBaseFile</data><data key="nodeType">D</data><data key="comment">A workspace id for an assembly file.
@id ws KBaseFile.AssemblyFile</data></node><node id="D.KBaseOntology.OntologyAccMap"><data key="typeName">OntologyAccMap</data><data key="name">D.KBaseOntology.OntologyAccMap</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.UserAndJobState.get_job_description"><data key="typeName">get_job_description</data><data key="name">M.UserAndJobState.get_job_description</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Get the description of a job.</data></node><node id="M.Workspace.get_referenced_objects"><data key="typeName">get_referenced_objects</data><data key="name">M.Workspace.get_referenced_objects</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Get objects by references from other objects.

        NOTE: In the vast majority of cases, this method is not necessary and
        get_objects should be used instead. 
        
        get_referenced_objects guarantees that a user that has access to an
        object can always see a) objects that are referenced inside the object
        and b) objects that are referenced in the object's provenance. This
        ensures that the user has visibility into the entire provenance of the
        object and the object's object dependencies (e.g. references).
        
        The user must have at least read access to the first object in each
        reference chain, but need not have access to any further objects in
        the chain, and those objects may be deleted.</data></node><node id="M.Workspace.get_all_type_info"><data key="typeName">get_all_type_info</data><data key="name">M.Workspace.get_all_type_info</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.ExpressionServices.expression_sample_id"><data key="typeName">expression_sample_id</data><data key="name">D.ExpressionServices.expression_sample_id</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">id for the expression sample

@id ws ExpressionServices.ExpressionSample

"ws" may go to "to" in the future</data></node><node id="M.UserAndJobState.remove_state_auth"><data key="typeName">remove_state_auth</data><data key="name">M.UserAndJobState.remove_state_auth</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Remove a key value pair with service authentication.</data></node><node id="D.KBaseTrees.json_tree"><data key="typeName">json_tree</data><data key="name">D.KBaseTrees.json_tree</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">Trees are represented in KBase by default in newick format (http://en.wikipedia.org/wiki/Newick_format),
but can optionally be converted to JSON format where the structure of the tree matches the structure of
the JSON object.  This is useful when interacting with the tree in JavaScript, for instance.</data></node><node id="D.Workspace.CloneWorkspaceParams"><data key="typeName">CloneWorkspaceParams</data><data key="name">D.Workspace.CloneWorkspaceParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Input parameters for the "clone_workspace" function.

        Note that deleted objects are not cloned, although hidden objects are
        and remain hidden in the new workspace.

        Required arguments:
        WorkspaceIdentity wsi - the workspace to be cloned.
        ws_name workspace - name of the workspace to be cloned into. This must
                be a non-existant workspace name.
        
        Optional arguments:
        permission globalread - 'r' to set the new workspace globally readable,
                default 'n'.
        string description - A free-text description of the new workspace, 1000
                characters max. Longer strings will be mercilessly and brutally
                truncated.
        usermeta meta - arbitrary user-supplied metadata for the workspace.</data></node><node id="D.GenomeAnnotation.Handle"><data key="typeName">Handle</data><data key="name">D.GenomeAnnotation.Handle</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment">* This is a handle service handle object, used for by-reference
* passing of data files.</data></node><node id="D.KBaseGeneFamilies.Handle"><data key="typeName">Handle</data><data key="name">D.KBaseGeneFamilies.Handle</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseOntology.gene_annotation_map"><data key="typeName">gene_annotation_map</data><data key="name">D.KBaseOntology.gene_annotation_map</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseGwasData.VariantCall"><data key="typeName">VariantCall</data><data key="name">D.KBaseGwasData.VariantCall</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">Variation vcf  object</data></node><node id="M.InvocationService.installed_modules"><data key="typeName">installed_modules</data><data key="name">M.InvocationService.installed_modules</data><data key="moduleName">InvocationService</data><data key="nodeType">M</data><data key="comment">* Retrieve the set of modules installed in the current deployment.
*
* Note that this does not require authentication or a valid session, and thus
* may be used to set up a graphical interface before a login is done.</data></node><node id="D.AssemblyInputHandle.Handle"><data key="typeName">Handle</data><data key="name">D.AssemblyInputHandle.Handle</data><data key="moduleName">AssemblyInputHandle</data><data key="nodeType">D</data><data key="comment">A handle is a generic object and is defined
in in the handle service.</data></node><node id="D.KBaseSearch.Genome"><data key="typeName">Genome</data><data key="name">D.KBaseSearch.Genome</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Genome object holds much of the data relevant for a genome in KBase
        Genome publications should be papers about the genome, not
        papers about certain features of the genome (which go into the
        Feature object)
        Should the Genome object have a list of feature ids? (in
        addition to having a list of feature_refs)
        Should the Genome object contain a list of contig_ids too?

@optional md5 taxonomy gc_content complete dna_size num_contigs contig_lengths genome_source genome_source_id domain genome_publications contigset_ref proteinset_ref transcriptset_ref featureset_ref
@searchable ws_subset num_contigs genome_source_id genome_source genetic_code genome_id scientific_name domain taxonomy contigset_ref proteinset_ref transcriptset_ref featureset_ref</data></node><node id="D.KBaseFBA.media_ref"><data key="typeName">media_ref</data><data key="name">D.KBaseFBA.media_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a model template
@id ws KBaseBiochem.Media</data></node><node id="D.KBaseFBA.templatebiomasscomponent_id"><data key="typeName">templatebiomasscomponent_id</data><data key="name">D.KBaseFBA.templatebiomasscomponent_id</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Template biomass compound ID
@id external</data></node><node id="D.KBaseGenomes.Feature_type"><data key="typeName">Feature_type</data><data key="name">D.KBaseGenomes.Feature_type</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseFBA.modeltemplate_id"><data key="typeName">modeltemplate_id</data><data key="name">D.KBaseFBA.modeltemplate_id</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">ModelTemplate ID
@id kb</data></node><node id="D.KBaseFBA.ExternalGenomeClassData"><data key="typeName">ExternalGenomeClassData</data><data key="name">D.KBaseFBA.ExternalGenomeClassData</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.ExpressionServices.get_expression_samples_molecules"><data key="typeName">get_expression_samples_molecules</data><data key="name">M.ExpressionServices.get_expression_samples_molecules</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a List of SampleIDs, returns a Hash (key : SampleID, value: Molecule of Sample)</data></node><node id="D.KBaseFBA.probability"><data key="typeName">probability</data><data key="name">D.KBaseFBA.probability</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseGenomes.Domain"><data key="typeName">Domain</data><data key="name">D.KBaseGenomes.Domain</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Domain - a subobject holding information on a single protein domain
string id - numerical ID assigned by KBase
string source_id - assession ID from CDD database;
string type - type of CDD, possible values are cd, pfam, smart, COG, PRK, CHL
string name - name of CDD
string description - description of CDD</data></node><node id="D.KBaseProteinStructure.md5_id_t"><data key="typeName">md5_id_t</data><data key="name">D.KBaseProteinStructure.md5_id_t</data><data key="moduleName">KBaseProteinStructure</data><data key="nodeType">D</data><data key="comment">KBase protein MD5 id</data></node><node id="M.MEME.compare_motifs_with_tomtom"><data key="typeName">compare_motifs_with_tomtom</data><data key="name">M.MEME.compare_motifs_with_tomtom</data><data key="moduleName">MEME</data><data key="nodeType">M</data><data key="comment">Returns TomtomRunResult with results of a single TOMTOM run
TOMTOM will be run with -text parameter
MemePSPM query - query motifs for TOMTOM run
MemePSPMCollection target - target motifs for TOMTOM run
TomtomRunParameters params - parameters of TOMTOM run</data></node><node id="D.KBaseTrees.collapsed_node_flag"><data key="typeName">collapsed_node_flag</data><data key="name">D.KBaseTrees.collapsed_node_flag</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.KmerAnnotationByFigfam.call_genes_in_dna"><data key="typeName">call_genes_in_dna</data><data key="name">M.KmerAnnotationByFigfam.call_genes_in_dna</data><data key="moduleName">KmerAnnotationByFigfam</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.KBaseNetworks.all_dataset_sources"><data key="typeName">all_dataset_sources</data><data key="name">M.KBaseNetworks.all_dataset_sources</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">M</data><data key="comment">Returns a list of all dataset sources available in  via Networks API</data></node><node id="D.KBaseExpression.sample_annotations"><data key="typeName">sample_annotations</data><data key="name">D.KBaseExpression.sample_annotations</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">list of Sample Annotations associated with the Sample</data></node><node id="D.KBaseFBA.feature_id"><data key="typeName">feature_id</data><data key="name">D.KBaseFBA.feature_id</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Genome feature ID
@id external</data></node><node id="D.GenomeAnnotation.variant_subsystem_pairs"><data key="typeName">variant_subsystem_pairs</data><data key="name">D.GenomeAnnotation.variant_subsystem_pairs</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.KmerAnnotationByFigfam.get_default_dataset_name"><data key="typeName">get_default_dataset_name</data><data key="name">M.KmerAnnotationByFigfam.get_default_dataset_name</data><data key="moduleName">KmerAnnotationByFigfam</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.Workspace.type_string"><data key="typeName">type_string</data><data key="name">D.Workspace.type_string</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">A type string.
Specifies the type and its version in a single string in the format
[module].[typename]-[major].[minor]:

module - a string. The module name of the typespec containing the type.
typename - a string. The name of the type as assigned by the typedef
        statement.
major - an integer. The major version of the type. A change in the
        major version implies the type has changed in a non-backwards
        compatible way.
minor - an integer. The minor version of the type. A change in the
        minor version implies that the type has changed in a way that is
        backwards compatible with previous type definitions.

In many cases, the major and minor versions are optional, and if not
provided the most recent version will be used.

Example: MyModule.MyType-3.1</data></node><node id="M.Transform.methods"><data key="typeName">methods</data><data key="name">M.Transform.methods</data><data key="moduleName">Transform</data><data key="nodeType">M</data><data key="comment">Returns all available service methods, and info about them.</data></node><node id="D.AskKB.head"><data key="typeName">head</data><data key="name">D.AskKB.head</data><data key="moduleName">AskKB</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Ontology.GeneIDMap2GoInfo"><data key="typeName">GeneIDMap2GoInfo</data><data key="name">D.Ontology.GeneIDMap2GoInfo</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseBiochem.cue_id"><data key="typeName">cue_id</data><data key="name">D.KBaseBiochem.cue_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Reaction ID
@id external</data></node><node id="M.KBaseTrees.extract_node_names"><data key="typeName">extract_node_names</data><data key="name">M.KBaseTrees.extract_node_names</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Given a tree in newick format, list the names of ALL the nodes.  Note that for some trees, such as
those originating from MicrobesOnline, the names of internal nodes may be bootstrap values, but will still
be returned by this function.</data></node><node id="M.IDServerAPI.register_allocated_ids"><data key="typeName">register_allocated_ids</data><data key="name">M.IDServerAPI.register_allocated_ids</data><data key="moduleName">IDServerAPI</data><data key="nodeType">M</data><data key="comment">Register the mappings for a set of external identifiers. The
KBase identifiers used here were previously allocated using allocate_id_range.

Does not return a value.</data></node><node id="D.ERDB_Service.parameter"><data key="typeName">parameter</data><data key="name">D.ERDB_Service.parameter</data><data key="moduleName">ERDB_Service</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseGeneFamilies.date"><data key="typeName">date</data><data key="name">D.KBaseGeneFamilies.date</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">D</data><data key="comment">date in ISO 8601 format; e.g., 2014-11-26</data></node><node id="M.UserAndJobState.remove_state"><data key="typeName">remove_state</data><data key="name">M.UserAndJobState.remove_state</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Remove a key value pair without service authentication.</data></node><node id="D.Workspace.typever"><data key="typeName">typever</data><data key="name">D.Workspace.typever</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">A version of a type. 
Specifies the version of the type  in a single string in the format
[major].[minor]:

major - an integer. The major version of the type. A change in the
        major version implies the type has changed in a non-backwards
        compatible way.
minor - an integer. The minor version of the type. A change in the
        minor version implies that the type has changed in a way that is
        backwards compatible with previous type definitions.</data></node><node id="M.ProteinInfo.fids_to_eukaryotic_orthologs"><data key="typeName">fids_to_eukaryotic_orthologs</data><data key="name">M.ProteinInfo.fids_to_eukaryotic_orthologs</data><data key="moduleName">ProteinInfo</data><data key="nodeType">M</data><data key="comment">fids_to_eukaryotic_orthologs takes as input a list of
feature ids, and returns a mapping of each fid to its
orthologous fids.  It uses a different data source than
the fids_to_orthologs method.</data></node><node id="M.KBaseTrees.construct_multiple_alignment"><data key="typeName">construct_multiple_alignment</data><data key="name">M.KBaseTrees.construct_multiple_alignment</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Build a multiple sequence alignment based on gene sequences.</data></node><node id="D.KBaseBiochem.ReactionSet"><data key="typeName">ReactionSet</data><data key="name">D.KBaseBiochem.ReactionSet</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">ReactionSet object

@searchable ws_subset id name class reaction_refs type</data></node><node id="M.IDServerAPI.register_ids"><data key="typeName">register_ids</data><data key="name">M.IDServerAPI.register_ids</data><data key="moduleName">IDServerAPI</data><data key="nodeType">M</data><data key="comment">Register a set of identifiers. All will be assigned identifiers with the given
prefix.

If an identifier was already registered, we will return that existing registration.</data></node><node id="D.NarrativeJobService.step_parameter"><data key="typeName">step_parameter</data><data key="name">D.NarrativeJobService.step_parameter</data><data key="moduleName">NarrativeJobService</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.ExpressionServices.sample_id"><data key="typeName">sample_id</data><data key="name">D.ExpressionServices.sample_id</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">KBase Sample ID for the sample</data></node><node id="M.KBaseExpression.get_expression_series_designs"><data key="typeName">get_expression_series_designs</data><data key="name">M.KBaseExpression.get_expression_series_designs</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a List of SeriesIDs, returns a Hash (key : SeriesID, value: Design of Series)</data></node><node id="M.GenomeAnnotation.call_features_CDS_SEED_projection"><data key="typeName">call_features_CDS_SEED_projection</data><data key="name">M.GenomeAnnotation.call_features_CDS_SEED_projection</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseCommunities.Rarefaction"><data key="typeName">Rarefaction</data><data key="name">D.KBaseCommunities.Rarefaction</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseBiochem.MediaCompound"><data key="typeName">MediaCompound</data><data key="name">D.KBaseBiochem.MediaCompound</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">MediaCompound object</data></node><node id="M.TaxonomyTranslation.get_scientific_name_by_tax_id"><data key="typeName">get_scientific_name_by_tax_id</data><data key="name">M.TaxonomyTranslation.get_scientific_name_by_tax_id</data><data key="moduleName">TaxonomyTranslation</data><data key="nodeType">M</data><data key="comment">Returns the scientific name for a given tax id.</data></node><node id="D.KBasePhenotypes.phenosimset_id"><data key="typeName">phenosimset_id</data><data key="name">D.KBasePhenotypes.phenosimset_id</data><data key="moduleName">KBasePhenotypes</data><data key="nodeType">D</data><data key="comment">PhenotypeSimulationSet ID
@id kb</data></node><node id="D.NarrativeJobService.Status"><data key="typeName">Status</data><data key="name">D.NarrativeJobService.Status</data><data key="moduleName">NarrativeJobService</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseExpression.experimental_unit_expression_data_samples_mapping"><data key="typeName">experimental_unit_expression_data_samples_mapping</data><data key="name">D.KBaseExpression.experimental_unit_expression_data_samples_mapping</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">mapping between experimentalUnitIDs and all Samples it contains</data></node><node id="D.KBaseExpression.shock_id"><data key="typeName">shock_id</data><data key="name">D.KBaseExpression.shock_id</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">A reference to RNASeq fastq  object on shock</data></node><node id="D.KBaseExpression.gsm_data"><data key="typeName">gsm_data</data><data key="name">D.KBaseExpression.gsm_data</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">mapping kbase feature id as the key and FullMeasurement Structure as the value</data></node><node id="D.BAMBI.bambi_job_id"><data key="typeName">bambi_job_id</data><data key="name">D.BAMBI.bambi_job_id</data><data key="moduleName">BAMBI</data><data key="nodeType">D</data><data key="comment">A BAMBI job id obtained from UserAndJobState service</data></node><node id="M.ExpressionServices.get_expression_samples_data_by_series_ids"><data key="typeName">get_expression_samples_data_by_series_ids</data><data key="name">M.ExpressionServices.get_expression_samples_data_by_series_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a list of SeriesIDs returns mapping of SeriesID to expressionDataSamples : {series_id -&gt; {sample_id -&gt; expressionSampleDataStructure}}</data></node><node id="D.KBaseTrees.FilterParams"><data key="typeName">FilterParams</data><data key="name">D.KBaseTrees.FilterParams</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">cutoff_value                  =&gt; def: 0 || [any_valid_float_value]
use_cutoff_value              =&gt; def: 0 || 1
normalization_scope           =&gt; def:'per_column' || 'global'
normalization_type            =&gt; def:'none' || 'total' || 'mean' || 'max' || 'min'
normalization_post_process    =&gt; def:'none' || 'log10' || 'log2' || 'ln'</data></node><node id="M.NarrativeJobService.delete_app"><data key="typeName">delete_app</data><data key="name">M.NarrativeJobService.delete_app</data><data key="moduleName">NarrativeJobService</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.Tree.alignment"><data key="typeName">alignment</data><data key="name">D.Tree.alignment</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">String representation of a sequence alignment, the format of which may be different depending on
input options for retrieving the alignment.</data></node><node id="D.PROM.CreatePromConstraintsParameters"><data key="typeName">CreatePromConstraintsParameters</data><data key="name">D.PROM.CreatePromConstraintsParameters</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">Named parameters for 'create_prom_constraints' method.  Currently all options are required.

    genome_object_id genome_object_id            - the workspace ID of the genome to link to the prom object
    expression_data_collection_id
               expression_data_collection_id     - the workspace ID of the expression data collection needed to
                                                   build the PROM constraints.
    regulatory_network_id regulatory_network_id  - the workspace ID of the regulatory network data to use
    workspace_name workspace_name                - the name of the workspace to use
    auth_token token                             - the auth token that has permission to write in the specified workspace</data></node><node id="D.KBaseProteinStructure.align_length_t"><data key="typeName">align_length_t</data><data key="name">D.KBaseProteinStructure.align_length_t</data><data key="moduleName">KBaseProteinStructure</data><data key="nodeType">D</data><data key="comment">BLASTP alignment length</data></node><node id="D.Inferelator.expression_series_ref"><data key="typeName">expression_series_ref</data><data key="name">D.Inferelator.expression_series_ref</data><data key="moduleName">Inferelator</data><data key="nodeType">D</data><data key="comment">Represents KBase gene identifier
@id ws KBaseExpression.ExpressionSeries</data></node><node id="D.KBaseRegulation.regulon_id"><data key="typeName">regulon_id</data><data key="name">D.KBaseRegulation.regulon_id</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents regulon identifier</data></node><node id="D.Ontology.EvidenceCode"><data key="typeName">EvidenceCode</data><data key="name">D.Ontology.EvidenceCode</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">Evidence code indicates how the annotation to a particular term is supported. 
The list of evidence codes includes Experimental, Computational Analysis, Author statement, Curator statement, Automatically assigned and Obsolete evidence codes. This list will be useful in selecting the correct evidence code for an annotation. The details are given below: 

+  Experimental Evidence Codes
EXP: Inferred from Experiment
IDA: Inferred from Direct Assay
IPI: Inferred from Physical Interaction
IMP: Inferred from Mutant Phenotype
IGI: Inferred from Genetic Interaction
IEP: Inferred from Expression Pattern
    
+ Computational Analysis Evidence Codes
ISS: Inferred from Sequence or Structural Similarity
ISO: Inferred from Sequence Orthology
ISA: Inferred from Sequence Alignment
ISM: Inferred from Sequence Model
IGC: Inferred from Genomic Context
IBA: Inferred from Biological aspect of Ancestor
IBD: Inferred from Biological aspect of Descendant
IKR: Inferred from Key Residues
IRD: Inferred from Rapid Divergence
RCA: inferred from Reviewed Computational Analysis
    
+ Author Statement Evidence Codes
TAS: Traceable Author Statement
NAS: Non-traceable Author Statement
    
+ Curator Statement Evidence Codes
IC: Inferred by Curator
ND: No biological Data available
    
+ Automatically-assigned Evidence Codes
IEA: Inferred from Electronic Annotation
    
+ Obsolete Evidence Codes
NR: Not Recorded</data></node><node id="D.KBaseFBA.Biochemistry_ref"><data key="typeName">Biochemistry_ref</data><data key="name">D.KBaseFBA.Biochemistry_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a biochemistry object
@id ws KBaseBiochem.Biochemistry</data></node><node id="D.KmerAnnotationByFigfam.hit_detail"><data key="typeName">hit_detail</data><data key="name">D.KmerAnnotationByFigfam.hit_detail</data><data key="moduleName">KmerAnnotationByFigfam</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Workspace.list_workspaces_params"><data key="typeName">list_workspaces_params</data><data key="name">D.Workspace.list_workspaces_params</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Input parameters for the "list_workspaces" function. Provided for
backwards compatibility.

Optional parameters:
string auth - the authentication token of the KBase account accessing
        the list of workspaces. Overrides the client provided authorization
        credentials if they exist.
boolean excludeGlobal - if excludeGlobal is true exclude world
        readable workspaces. Defaults to false.

@deprecated Workspace.ListWorkspaceInfoParams</data></node><node id="D.KBaseFile.dna_feature_type"><data key="typeName">dna_feature_type</data><data key="name">D.KBaseFile.dna_feature_type</data><data key="moduleName">KBaseFile</data><data key="nodeType">D</data><data key="comment">A type for a DNA feature.

      CDS - A coding sequence of DNA, e.g. a protein encoding gene
      locus - a gene with potentially many mRNAs and CDSs
      mRNA - messenger RNA
      tRNA - transfer RNA
      sRNA - small RNA
      siRNA - small interfering RNA
      promoter - a promoter for a gene
      operon - an operon
      bind - a binding site
      pbind - a binding site for a protein
      operator - an operator site for a promoter
      atten - an attenuator
      term - a terminator
      CRISPR - a CRISPR
      pseudo - a pseudogene
      proph - a prophage
      ribosw - a riboswitch
      transp - a transposon
      pathis - a pathogenicity island</data></node><node id="M.ProteinInfo.domains_to_domain_annotations"><data key="typeName">domains_to_domain_annotations</data><data key="name">M.ProteinInfo.domains_to_domain_annotations</data><data key="moduleName">ProteinInfo</data><data key="nodeType">M</data><data key="comment">domains_to_domain_annotations takes as input a list of domain_ids, and
returns a mapping of each domain_id to its text annotation as provided
by its maintainer (usually retrieved from InterProScan, or from NCBI
for COG).</data></node><node id="D.KBaseCommunities.FBAModel_ref"><data key="typeName">FBAModel_ref</data><data key="name">D.KBaseCommunities.FBAModel_ref</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.KBaseTrees.get_leaf_count"><data key="typeName">get_leaf_count</data><data key="name">M.KBaseTrees.get_leaf_count</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Given a tree, return the total number of leaf nodes, (internal and root nodes are ignored).  When the
tree was based on a multiple sequence alignment, the number of leaves will match the number of sequences
that were aligned.</data></node><node id="D.KBaseProteinStructure.pdb_id_t"><data key="typeName">pdb_id_t</data><data key="name">D.KBaseProteinStructure.pdb_id_t</data><data key="moduleName">KBaseProteinStructure</data><data key="nodeType">D</data><data key="comment">PDB id</data></node><node id="D.KBaseSearch.publication"><data key="typeName">publication</data><data key="name">D.KBaseSearch.publication</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Structure for a publication (from ER API)
also want to capture authors, journal name (not in ER)</data></node><node id="D.KBaseGeneFamilies.DomainAnnotation"><data key="typeName">DomainAnnotation</data><data key="name">D.KBaseGeneFamilies.DomainAnnotation</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">D</data><data key="comment">genome_ref genome_ref - reference to genome
dms_ref used_dms_ref - domain models used for search
mapping&lt;contig_id, list&lt;annotation_element&gt;&gt; data - 
        list of entrances of different domains into proteins of annotated genome
        (annotation_element -&gt; typedef tuple&lt;string feature_id,int feature_start,int feature_stop,
                int feature_dir,mapping&lt;domain_accession,list&lt;domain_place&gt;&gt;&gt;;
        domain_place -&gt; tuple&lt;int start_in_feature,int stop_in_feature,float evalue,
                float bitscore,float domain_coverage&gt;).
mapping&lt;contig_id, tuple&lt;int size,int features&gt;&gt; contig_to_size_and_feature_count - 
        feature count and nucleotide size of every contig
mapping&lt;string feature_id, tuple&lt;contig_id,int feature_index&gt; feature_to_contig_and_index - 
        index of every feature in feature list in every contig</data></node><node id="M.MOTranslation.moLocusIds_to_fid_in_genome"><data key="typeName">moLocusIds_to_fid_in_genome</data><data key="name">M.MOTranslation.moLocusIds_to_fid_in_genome</data><data key="moduleName">MOTranslation</data><data key="nodeType">M</data><data key="comment">A method designed to map MicrobesOnline locus ids to the features of a specific target genome in kbase.  Under the hood, this
method simply fetches MicrobesOnline data and calls the 'map_to_fid' method defined in this service.  Therefore, all the caveats
and disclaimers of the 'map_to_fid' method apply to this function as well, so be sure to read the documenation for the 'map_to_fid'
method as well!</data></node><node id="D.KBaseSearch.gene_list"><data key="typeName">gene_list</data><data key="name">D.KBaseSearch.gene_list</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">A gene list is a list of gene_ids</data></node><node id="M.ServiceRegistry.enumerate_services"><data key="typeName">enumerate_services</data><data key="name">M.ServiceRegistry.enumerate_services</data><data key="moduleName">ServiceRegistry</data><data key="nodeType">M</data><data key="comment">Provide a list of available services. The enumerate_services
simply returns the entire set of services that are available.</data></node><node id="M.Ontology.get_goidlist"><data key="typeName">get_goidlist</data><data key="name">M.Ontology.get_goidlist</data><data key="moduleName">Ontology</data><data key="nodeType">M</data><data key="comment">This function call accepts three parameters: a list of kbase gene-identifiers, a list of ontology domains, and a list of evidence codes. The list of gene identifiers cannot be empty; however the list of ontology domains and the list of evidence codes can be empty. If any of the last two lists is not empty then the gene-id and go-id pairs retrieved from KBase are further filtered by using the desired ontology domains and/or evidence codes supplied as input. So, if you don't want to filter the initial results then it is recommended to provide empty domain and evidence code lists. Finally, this function returns a mapping of kbase gene id to go-ids along with go-description, ontology domain, and evidence code; note that in the returned table of results, each gene-id is associated with a list of one of more go-ids. Also, if no species is provided as input then by default, Arabidopsis thaliana is used as the input species.</data></node><node id="D.KBaseRegulation.Regulator"><data key="typeName">Regulator</data><data key="name">D.KBaseRegulation.Regulator</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents orthologous group of regulators. Can be either transcription factor or RNA regulatory element.
regulator_id regulator_id - identifier of regulator
regulation_type regulation_type - type of regulation
string regulator_name - name of regulator
string taxonomy - the same regulator name happens to be used by scientific community to reference non-orthologous regulators in different taxonomic groups.
                                  Thus taxonomy is required to uniquely identify orthologous regulators.
                                   
string tf_family - the name of TF family
string rfam_id - identifier of RNA regulatory element in RFAM database.

@optional taxonomy tf_family rfam_id</data></node><node id="D.Communities.MetagenomeProfile"><data key="typeName">MetagenomeProfile</data><data key="name">D.Communities.MetagenomeProfile</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseGwasData.VariantCallSet"><data key="typeName">VariantCallSet</data><data key="name">D.KBaseGwasData.VariantCallSet</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">list of VCF objects</data></node><node id="D.Ontology.OntologyAnnotation"><data key="typeName">OntologyAnnotation</data><data key="name">D.Ontology.OntologyAnnotation</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">Structure for OntologyAnnotation object 
@optional p_value</data></node><node id="M.Workspace.get_workspacemeta"><data key="typeName">get_workspacemeta</data><data key="name">M.Workspace.get_workspacemeta</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Retrieves the metadata associated with the specified workspace.
Provided for backwards compatibility. 
@deprecated Workspace.get_workspace_info</data></node><node id="M.InvocationService.run_pipeline2"><data key="typeName">run_pipeline2</data><data key="name">M.InvocationService.run_pipeline2</data><data key="moduleName">InvocationService</data><data key="nodeType">M</data><data key="comment">* Experimental routine.</data></node><node id="M.UserAndJobState.get_detailed_error"><data key="typeName">get_detailed_error</data><data key="name">M.UserAndJobState.get_detailed_error</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Get the detailed error message, if any</data></node><node id="D.KBaseCommunities.Table2DInt"><data key="typeName">Table2DInt</data><data key="name">D.KBaseCommunities.Table2DInt</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Ontology.DomainList"><data key="typeName">DomainList</data><data key="name">D.Ontology.DomainList</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">A list of ontology domains</data></node><node id="M.PROM.get_regulatory_network_by_genome"><data key="typeName">get_regulatory_network_by_genome</data><data key="name">M.PROM.get_regulatory_network_by_genome</data><data key="moduleName">PROM</data><data key="nodeType">M</data><data key="comment">This method fetches a regulatory network from the regulation service that is associated with the given genome id.  If there
are multiple regulome models available for the given genome, then the model with the most regulons is selected.  The method
then constructs a regulatory network object in the specified workspace.  The method returns the ID of the regulatory network
in the workspace, along with a status message that provides details on what was retrieved and if anything failed.  If the
method does fail, or if there is no regulome for the given genome, then no regulatory network ID is returned.

Note 1: this method should be migrated to the regulation service
Note 2: this method should use the type compiler auth, but for simplicity  we now just pass an auth token directly.</data></node><node id="M.UserAndJobState.get_job_owner"><data key="typeName">get_job_owner</data><data key="name">M.UserAndJobState.get_job_owner</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Get the owner of a job. Does not currently work with AWE jobs.</data></node><node id="D.KBaseExpression.experiment_meta_ids"><data key="typeName">experiment_meta_ids</data><data key="name">D.KBaseExpression.experiment_meta_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">list of KBase ExperimentMeta IDs</data></node><node id="D.KBaseCommon.bool"><data key="typeName">bool</data><data key="name">D.KBaseCommon.bool</data><data key="moduleName">KBaseCommon</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Communities.TaxonomicProfile"><data key="typeName">TaxonomicProfile</data><data key="name">D.Communities.TaxonomicProfile</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.ProbabilisticAnnotation.reaction_probability"><data key="typeName">reaction_probability</data><data key="name">D.ProbabilisticAnnotation.reaction_probability</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">Data structure to hold probability of a reaction

        reaction_id reaction - ID of the reaction
        float probability - Probability of the reaction
        string type - Type of complexes ("HASCOMPLEXES" or "NOCOMPLEXES")
        string complex_info - Detailed information on complexes
        string gene_list - List of genes most likely to be attached to reaction</data></node><node id="D.ProteinInfo.ec"><data key="typeName">ec</data><data key="name">D.ProteinInfo.ec</data><data key="moduleName">ProteinInfo</data><data key="nodeType">D</data><data key="comment">ECs are a list of Enzyme Commission identifiers.</data></node><node id="D.KBaseRegulation.regulog_collection_id"><data key="typeName">regulog_collection_id</data><data key="name">D.KBaseRegulation.regulog_collection_id</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents regulog collection identifier</data></node><node id="D.KBaseExpression.expression_platform_id"><data key="typeName">expression_platform_id</data><data key="name">D.KBaseExpression.expression_platform_id</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">id for the expression platform

@id ws KBaseExpression.ExpressionPlatform</data></node><node id="D.Workspace.ModuleVersions"><data key="typeName">ModuleVersions</data><data key="name">D.Workspace.ModuleVersions</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">A set of versions from a module.

        modulename mod - the name of the module.
        list&lt;spec_version&gt; - a set or subset of versions associated with the
                module.
        list&lt;spec_version&gt; - a set or subset of released versions associated 
                with the module.</data></node><node id="D.ExpressionServices.strain_expression_data_samples_mapping"><data key="typeName">strain_expression_data_samples_mapping</data><data key="name">D.ExpressionServices.strain_expression_data_samples_mapping</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">mapping between strainIDs and all Samples it contains</data></node><node id="D.Communities.List"><data key="typeName">List</data><data key="name">D.Communities.List</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseGenomes.GenomeComparison"><data key="typeName">GenomeComparison</data><data key="name">D.KBaseGenomes.GenomeComparison</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">GenomeComparisonData object: this object holds information about a multigenome comparison

@optional protcomp_ref pangenome_ref
@metadata ws core_functions as Core functions
    @metadata ws core_families as Core families
    @metadata ws name as Name
    @metadata ws length(genomes) as Number genomes</data></node><node id="D.ExpressionServices.GPL"><data key="typeName">GPL</data><data key="name">D.ExpressionServices.GPL</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Data structure for a GEO Platform</data></node><node id="D.CompressionBasedDistance.BuildMatrixParams"><data key="typeName">BuildMatrixParams</data><data key="name">D.CompressionBasedDistance.BuildMatrixParams</data><data key="moduleName">CompressionBasedDistance</data><data key="nodeType">D</data><data key="comment">Input parameters for build_matrix function

        list&lt;string&gt; node_ids - List of Shock node ids for input sequence files
        string format - Format of input sequence files ('fasta', 'fastq', etc.)
        string scale - Scale for distance matrix values ('std' or 'inf')
        int sequence_length - Length to trim sequence reads to (shorter reads are discarded)
        int min_reads - Minimum number of reads a sequence file must contain
        int max_reads - Maximum number of reads to use from a sequence file
        int extreme - Set to true for extreme compression (slower but hopefully better ratio)</data></node><node id="M.IDServerAPI.external_ids_to_kbase_ids"><data key="typeName">external_ids_to_kbase_ids</data><data key="name">M.IDServerAPI.external_ids_to_kbase_ids</data><data key="moduleName">IDServerAPI</data><data key="nodeType">M</data><data key="comment">Given a set of external identifiers, look up the associated KBase identifiers.
If no KBase ID is associated with the external id, no entry will be present in the return.</data></node><node id="D.PROM.boolean_gene_expression_data_id"><data key="typeName">boolean_gene_expression_data_id</data><data key="name">D.PROM.boolean_gene_expression_data_id</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">A workspace ID for a gene expression data object.</data></node><node id="D.KBaseTrees.TreeMetaData"><data key="typeName">TreeMetaData</data><data key="name">D.KBaseTrees.TreeMetaData</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">Meta data associated with a tree.

    kbase_id alignment_id - if this tree was built from an alignment, this provides that alignment id
    string type - the type of tree; possible values currently are "sequence_alignment" and "genome" for trees
                  either built from a sequence alignment, or imported directly indexed to genomes.
    string status - set to 'active' if this is the latest built tree for a particular gene family
    timestamp date_created - time at which the tree was built/loaded in seconds since the epoch
    string tree_contruction_method - the name of the software used to construct the tree
    string tree_construction_parameters - any non-default parameters of the tree construction method
    string tree_protocol - simple free-form text which may provide additional details of how the tree was built
    int node_count - total number of nodes in the tree
    int leaf_count - total number of leaf nodes in the tree (generally this cooresponds to the number of sequences)
    string source_db - the source database where this tree originated, if one exists
    string source_id - the id of this tree in an external database, if one exists</data></node><node id="D.MAK.FloatDataTableContainer"><data key="typeName">FloatDataTableContainer</data><data key="name">D.MAK.FloatDataTableContainer</data><data key="moduleName">MAK</data><data key="nodeType">D</data><data key="comment">Represents a list of data tables
string id - identifier for container
string name - name or title to display in a plot etc.
list&lt;FloatDataTable&gt; - data array
map&lt;string, string&gt; id_index - map of table ids to array positions

@optional id
@optional name
@optional id_index</data></node><node id="D.GenomeComparison.hit"><data key="typeName">hit</data><data key="name">D.GenomeComparison.hit</data><data key="moduleName">GenomeComparison</data><data key="nodeType">D</data><data key="comment">int inner_pos - position of gene name in inner genome (see dataN field in ProteomeComparison
int score - bit score of blast alignment multiplied by 100
int percent_of_best_score - best bit score of all hits connected to either of two genes from this hit</data></node><node id="M.UserAndJobState.ver"><data key="typeName">ver</data><data key="name">M.UserAndJobState.ver</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Returns the version of the userandjobstate service.</data></node><node id="D.KmerEval.call"><data key="typeName">call</data><data key="name">D.KmerEval.call</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.Workspace.set_permissions"><data key="typeName">set_permissions</data><data key="name">M.Workspace.set_permissions</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Set permissions for a workspace.</data></node><node id="D.KBaseExpression.experiment_meta_id"><data key="typeName">experiment_meta_id</data><data key="name">D.KBaseExpression.experiment_meta_id</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Kbase ExperimentMeta ID</data></node><node id="D.KBaseExpression.sample_annotation_id"><data key="typeName">sample_annotation_id</data><data key="name">D.KBaseExpression.sample_annotation_id</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Kbase SampleAnnotation ID</data></node><node id="D.Workspace.object_info"><data key="typeName">object_info</data><data key="name">D.Workspace.object_info</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Information about an object, including user provided metadata.

        obj_id objid - the numerical id of the object.
        obj_name name - the name of the object.
        type_string type - the type of the object.
        timestamp save_date - the save date of the object.
        obj_ver ver - the version of the object.
        username saved_by - the user that saved or copied the object.
        ws_id wsid - the workspace containing the object.
        ws_name workspace - the workspace containing the object.
        string chsum - the md5 checksum of the object.
        int size - the size of the object in bytes.
        usermeta meta - arbitrary user-supplied metadata about
                the object.</data></node><node id="M.UserAndJobState.get_results"><data key="typeName">get_results</data><data key="name">M.UserAndJobState.get_results</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Get the job results.</data></node><node id="D.KmerAnnotationByFigfam.kmer_annotation_figfam_parameters"><data key="typeName">kmer_annotation_figfam_parameters</data><data key="name">D.KmerAnnotationByFigfam.kmer_annotation_figfam_parameters</data><data key="moduleName">KmerAnnotationByFigfam</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseGwasData.shock_id"><data key="typeName">shock_id</data><data key="name">D.KBaseGwasData.shock_id</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">A reference to Variation fastq  object on shock</data></node><node id="D.KmerEval.otu_set_counts"><data key="typeName">otu_set_counts</data><data key="name">D.KmerEval.otu_set_counts</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Workspace.get_object_output"><data key="typeName">get_object_output</data><data key="name">D.Workspace.get_object_output</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Output generated by the "get_object" function. Provided for backwards
compatibility.
        
UnspecifiedObject data - The object's data.
object_metadata metadata - Metadata for object retrieved/
        
@deprecated Workspaces.ObjectData</data></node><node id="D.KBaseTrees.ref_type"><data key="typeName">ref_type</data><data key="name">D.KBaseTrees.ref_type</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">An enumeration of reference types for a node.  Either the one letter abreviation or full
name can be given.  For large trees, it is strongly advised you use the one letter abreviations.
Supported types are:
    g | genome  =&gt; genome typed object or CDS data
    p | protein =&gt; protein sequence object or CDS data, often given as the MD5 of the sequence
    n | dna     =&gt; dna sequence object or CDS data, often given as the MD5 of the sequence
    f | feature =&gt; feature object or CDS data</data></node><node id="D.KBaseOntology.ComplexRole"><data key="typeName">ComplexRole</data><data key="name">D.KBaseOntology.ComplexRole</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment">ComplexRole object containing data relating to role in complex

@searchable ws_subset role_ref optionalRole type triggering</data></node><node id="D.KBaseTrees.genome_ref"><data key="typeName">genome_ref</data><data key="name">D.KBaseTrees.genome_ref</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">A convenience type representing a genome id reference. This might be a kbase_id (in the case of 
a CDM genome) or, more likely, a workspace reference of the structure "ws/obj/ver"</data></node><node id="D.KBaseTrees.tree_elt_id"><data key="typeName">tree_elt_id</data><data key="name">D.KBaseTrees.tree_elt_id</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">may include leaves, nodes, and branches</data></node><node id="D.KBaseFBA.FBABiomassVariable"><data key="typeName">FBABiomassVariable</data><data key="name">D.KBaseFBA.FBABiomassVariable</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">FBABiomassVariable object</data></node><node id="D.ExpressionServices.ontology_definition"><data key="typeName">ontology_definition</data><data key="name">D.ExpressionServices.ontology_definition</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Kbase OntologyDefinition</data></node><node id="D.GenomeAnnotation.fid_data_tuples"><data key="typeName">fid_data_tuples</data><data key="name">D.GenomeAnnotation.fid_data_tuples</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KmerEval.comment"><data key="typeName">comment</data><data key="name">D.KmerEval.comment</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBasePPI.GenomeWSID"><data key="typeName">GenomeWSID</data><data key="name">D.KBasePPI.GenomeWSID</data><data key="moduleName">KBasePPI</data><data key="nodeType">D</data><data key="comment">@id ws KBaseGenomes.Genome</data></node><node id="M.Workspace.get_permissions"><data key="typeName">get_permissions</data><data key="name">M.Workspace.get_permissions</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Get permissions for a workspace.</data></node><node id="D.KBaseFBA.ETCStep"><data key="typeName">ETCStep</data><data key="name">D.KBaseFBA.ETCStep</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">ETCStep object</data></node><node id="D.KBaseGeneFamilies.domain_place"><data key="typeName">domain_place</data><data key="name">D.KBaseGeneFamilies.domain_place</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">D</data><data key="comment">@id ws KBaseGeneFamilies.DomainCluster
        typedef string domain_cluster_ref;</data></node><node id="D.GenomeAnnotation.analysis_event"><data key="typeName">analysis_event</data><data key="name">D.GenomeAnnotation.analysis_event</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.KBaseExpression.get_expression_samples_external_source_ids"><data key="typeName">get_expression_samples_external_source_ids</data><data key="name">M.KBaseExpression.get_expression_samples_external_source_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a List of SampleIDs, returns a Hash (key : SampleID, value: External_Source_ID of Sample (typically GSM))</data></node><node id="D.KBaseFBA.FBAMinimalMediaResult"><data key="typeName">FBAMinimalMediaResult</data><data key="name">D.KBaseFBA.FBAMinimalMediaResult</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">FBAMinimalMediaResult object</data></node><node id="D.AbstractHandle.Handle"><data key="typeName">Handle</data><data key="name">D.AbstractHandle.Handle</data><data key="moduleName">AbstractHandle</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseExpression.RNASeqDifferentialExpressionFile"><data key="typeName">RNASeqDifferentialExpressionFile</data><data key="name">D.KBaseExpression.RNASeqDifferentialExpressionFile</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">RNASeqDifferentialExpression file structure</data></node><node id="D.KBaseFBA.complex_ref"><data key="typeName">complex_ref</data><data key="name">D.KBaseFBA.complex_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a complex object
@id subws KBaseOntology.Mapping.complexes.[*].id</data></node><node id="D.Tree.node_name"><data key="typeName">node_name</data><data key="name">D.Tree.node_name</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">The string representation of the parsed node name (may be a kbase_id, but does not have to be).  Note that this
is not the full, raw label in a newick_tree (which may include comments).</data></node><node id="D.KBaseSearch.search_featureset_ref"><data key="typeName">search_featureset_ref</data><data key="name">D.KBaseSearch.search_featureset_ref</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Reference to a FeatureSet object in the workspace
@id ws KBaseSearch.SearchFeatureSet</data></node><node id="M.KBaseExpression.get_expression_series_summaries"><data key="typeName">get_expression_series_summaries</data><data key="name">M.KBaseExpression.get_expression_series_summaries</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a List of SeriesIDs, returns a Hash (key : SeriesID, value: Summary of Series)</data></node><node id="D.KBaseExpression.persons"><data key="typeName">persons</data><data key="name">D.KBaseExpression.persons</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">list of Persons</data></node><node id="M.AMETHSTService.results"><data key="typeName">results</data><data key="name">M.AMETHSTService.results</data><data key="moduleName">AMETHSTService</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.UserAndJobState.start_job"><data key="typeName">start_job</data><data key="name">M.UserAndJobState.start_job</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Start a job and specify the job parameters.</data></node><node id="D.ExpressionServices.experiment_meta_id"><data key="typeName">experiment_meta_id</data><data key="name">D.ExpressionServices.experiment_meta_id</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Kbase ExperimentMeta ID</data></node><node id="D.KBaseFBA.TFtoTGmap"><data key="typeName">TFtoTGmap</data><data key="name">D.KBaseFBA.TFtoTGmap</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Object required by the prom_constraints object, this maps a transcription factor 
 to a group of regulatory target genes.

    string transcriptionFactor_ref                       - reference to the transcription factor
    list&lt;TargetGeneProbabilities&gt; targetGeneProbs        - collection of target genes for the TF
                                                            along with associated joint probabilities for each
                                                            target to be on given that the TF is on or off.</data></node><node id="M.Tree.get_tree_ids_by_feature"><data key="typeName">get_tree_ids_by_feature</data><data key="name">M.Tree.get_tree_ids_by_feature</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">Given a list of feature ids in kbase, the protein sequence of each feature (if the sequence exists)
is identified and used to retrieve all trees by ID that were built using the given protein sequence.</data></node><node id="D.PROM.prom_constraints_id"><data key="typeName">prom_constraints_id</data><data key="name">D.PROM.prom_constraints_id</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">A workspace ID for the prom constraints object in a user's workpace</data></node><node id="D.KBaseFBA.fba_ref"><data key="typeName">fba_ref</data><data key="name">D.KBaseFBA.fba_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a FBA object
@id ws KBaseFBA.FBA</data></node><node id="D.KBaseGenomes.Pangenome_ref"><data key="typeName">Pangenome_ref</data><data key="name">D.KBaseGenomes.Pangenome_ref</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Reference to a Pangenome object in the workspace
@id ws KBaseGenomes.Pangenome</data></node><node id="D.KmerEval.strand"><data key="typeName">strand</data><data key="name">D.KmerEval.strand</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.UserAndJobState.InitProgress"><data key="typeName">InitProgress</data><data key="name">D.UserAndJobState.InitProgress</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">Initialization information for progress tracking. Currently 3 choices:

progress_type ptype - one of 'none', 'percent', or 'task'
max_progress max- required only for task based tracking. The 
        total number of tasks until the job is complete.</data></node><node id="D.KBaseTrees.sequence"><data key="typeName">sequence</data><data key="name">D.KBaseTrees.sequence</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Workspace.SaveObjectsParams"><data key="typeName">SaveObjectsParams</data><data key="name">D.Workspace.SaveObjectsParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Input parameters for the "save_objects" function.

        One, and only one, of the following is required:
        ws_id id - the numerical ID of the workspace.
        ws_name workspace - name of the workspace or the workspace ID in KBase
                format, e.g. kb|ws.78.
        
        Required arguments:
        list&lt;ObjectSaveData&gt; objects - the objects to save.</data></node><node id="D.MAK.MAKBicluster"><data key="typeName">MAKBicluster</data><data key="name">D.MAK.MAKBicluster</data><data key="moduleName">MAK</data><data key="nodeType">D</data><data key="comment">Bicluster 

        string bicluster_type - type of bicluster (determined by source data, e.g. expression, fitness, metagenomic, metabolite, integrated)
        string bicluster_id - id
        int num_genes - number of genes
        int num_conditions - number of conditions
        list&lt;string&gt; condition_ids - condition ids
        list&lt;string&gt; condition_labels - condition labels
        list&lt;string&gt; gene_ids - gene ids
        list&lt;string&gt; gene_labels - gene labels
        float exp_mean - expression mean
        float exp_mean_crit - expression mean criterion value
        float exp_crit - expression criterion value
        float ppi_crit - PPI criterion value
        float TF_crit - TF criterion value
        float ortho_crit - orthology criterion value
        float full_crit - full criterion value
        float miss_frxn - fraction of missing data
        mapping&lt;string, string&gt; enriched_terms - enriched terms

        @searchable ws_subset bicluster_id gene_ids gene_labels condition_ids condition_labels enriched_terms</data></node><node id="D.KBaseBiochem.bool"><data key="typeName">bool</data><data key="name">D.KBaseBiochem.bool</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.ExpressionServices.gsm_warnings"><data key="typeName">gsm_warnings</data><data key="name">D.ExpressionServices.gsm_warnings</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">List of GSM level warnings</data></node><node id="D.KBaseFBA.gapfill_id"><data key="typeName">gapfill_id</data><data key="name">D.KBaseFBA.gapfill_id</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Gapfill ID
@id kb</data></node><node id="D.KBaseNarrative.Worksheet"><data key="typeName">Worksheet</data><data key="name">D.KBaseNarrative.Worksheet</data><data key="moduleName">KBaseNarrative</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.Workspace.hide_objects"><data key="typeName">hide_objects</data><data key="name">M.Workspace.hide_objects</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Hide objects. All versions of an object are hidden, regardless of
the version specified in the ObjectIdentity. Hidden objects do not
appear in the list_objects method.</data></node><node id="M.KBaseTrees.get_tree_ids_by_protein_sequence"><data key="typeName">get_tree_ids_by_protein_sequence</data><data key="name">M.KBaseTrees.get_tree_ids_by_protein_sequence</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Given a list of kbase ids of a protein sequences (their MD5s), retrieve the tree ids of trees that
were built based on these sequences.</data></node><node id="D.KBaseFBA.FBAModelSetElement"><data key="typeName">FBAModelSetElement</data><data key="name">D.KBaseFBA.FBAModelSetElement</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">This type represents an element of a FBAModelSet.
@optional metadata</data></node><node id="M.AbstractHandle.give"><data key="typeName">give</data><data key="name">M.AbstractHandle.give</data><data key="moduleName">AbstractHandle</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.InvocationService.command_group_desc"><data key="typeName">command_group_desc</data><data key="name">D.InvocationService.command_group_desc</data><data key="moduleName">InvocationService</data><data key="nodeType">D</data><data key="comment">* Description of a command group, a set of common commands.</data></node><node id="D.KBaseGenomes.Feature_id"><data key="typeName">Feature_id</data><data key="name">D.KBaseGenomes.Feature_id</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">KBase Feature ID
@id external</data></node><node id="M.Workspace.undelete_workspace"><data key="typeName">undelete_workspace</data><data key="name">M.Workspace.undelete_workspace</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Undelete a workspace. All objects contained in the workspace are
undeleted, regardless of their state at the time the workspace was
deleted.</data></node><node id="D.GenomeAnnotation.subsystem"><data key="typeName">subsystem</data><data key="name">D.GenomeAnnotation.subsystem</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseFBA.ModelReactionReagent"><data key="typeName">ModelReactionReagent</data><data key="name">D.KBaseFBA.ModelReactionReagent</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">ModelReactionReagent object

    @searchable ws_subset modelcompound_ref coefficient</data></node><node id="M.GWAS.prepare_variation"><data key="typeName">prepare_variation</data><data key="name">M.GWAS.prepare_variation</data><data key="moduleName">GWAS</data><data key="nodeType">M</data><data key="comment">gwas_prepare_variation_for_gwas_async prepares variation data in proper format and allows option for minor allele frequecy based filtering</data></node><node id="M.TaxonomyTranslation.get_all_names_by_tax_id"><data key="typeName">get_all_names_by_tax_id</data><data key="name">M.TaxonomyTranslation.get_all_names_by_tax_id</data><data key="moduleName">TaxonomyTranslation</data><data key="nodeType">M</data><data key="comment">Returns a list of names for a given tax id.</data></node><node id="D.KBaseSearch.Contig"><data key="typeName">Contig</data><data key="name">D.KBaseSearch.Contig</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Type spec for a "Contig" subobject in the "ContigSet" object

                contig_id id - ID of contig in contigset
                string md5 - unique hash of contig sequence
                string sequence - sequence of the contig
                string description - Description of the contig (e.g. everything after the ID in a FASTA file)

                @optional length name description
                @searchable ws_subset id md5</data></node><node id="M.MEME.find_motifs_with_meme"><data key="typeName">find_motifs_with_meme</data><data key="name">M.MEME.find_motifs_with_meme</data><data key="moduleName">MEME</data><data key="nodeType">M</data><data key="comment">Returns results of a single MEME run
MEME will be run with -dna -text parameters
SequenceSet sequenceSet - input set of sequences
MemeRunParameters params - parameters of MEME run</data></node><node id="M.KBaseProteinStructure.lookup_pdb_by_md5"><data key="typeName">lookup_pdb_by_md5</data><data key="name">M.KBaseProteinStructure.lookup_pdb_by_md5</data><data key="moduleName">KBaseProteinStructure</data><data key="nodeType">M</data><data key="comment">of each to a list of PDBMatch records</data></node><node id="D.KBaseRegulation.transcription_factor_id"><data key="typeName">transcription_factor_id</data><data key="name">D.KBaseRegulation.transcription_factor_id</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents transcription factor identifier</data></node><node id="D.Communities.BiomMetagenome"><data key="typeName">BiomMetagenome</data><data key="name">D.Communities.BiomMetagenome</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment">BiomMetagenome
A KBase object for a metagenome profile in BIOM format
@optional url matrix_element_value metagenomes
searchable BiomMetagenome.*</data></node><node id="M.RDPTools.probematch"><data key="typeName">probematch</data><data key="name">M.RDPTools.probematch</data><data key="moduleName">RDPTools</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.Workspace.ref_chain"><data key="typeName">ref_chain</data><data key="name">D.Workspace.ref_chain</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">A chain of objects with references to one another.

        An object reference chain consists of a list of objects where the nth
        object possesses a reference, either in the object itself or in the
        object provenance, to the n+1th object.</data></node><node id="D.KBaseExpression.GPL"><data key="typeName">GPL</data><data key="name">D.KBaseExpression.GPL</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Data structure for a GEO Platform</data></node><node id="D.Communities.Heatmap"><data key="typeName">Heatmap</data><data key="name">D.Communities.Heatmap</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment">Heatmap Typespec</data></node><node id="M.AbstractHandle.list_handles"><data key="typeName">list_handles</data><data key="name">M.AbstractHandle.list_handles</data><data key="moduleName">AbstractHandle</data><data key="nodeType">M</data><data key="comment">The list function returns the set of handles that were
created by the user.</data></node><node id="D.KBaseTrees.abundance_data"><data key="typeName">abundance_data</data><data key="name">D.KBaseTrees.abundance_data</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">map the name of the profile with the profile data</data></node><node id="D.Workspace.ProvenanceAction"><data key="typeName">ProvenanceAction</data><data key="name">D.Workspace.ProvenanceAction</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">A provenance action.

        A provenance action is an action taken while transforming one data
        object to another. There may be several provenance actions taken in
        series. An action is typically running a script, running an api
        command, etc. All of the following are optional, but more information
        provided equates to better data provenance.
        
        resolved_ws_objects should never be set by the user; it is set by the
        workspace service when returning data.
        
        The maximum size of the entire provenance object, including all actions,
        is 1MB.
        
        timestamp time - the time the action was started.
        string service - the name of the service that performed this action.
        string service_ver - the version of the service that performed this action.
        string method - the method of the service that performed this action.
        list&lt;UnspecifiedObject&gt; method_params - the parameters of the method
                that performed this action. If an object in the parameters is a
                workspace object, also put the object reference in the
                input_ws_object list.
        string script - the name of the script that performed this action.
        string script_ver - the version of the script that performed this action.
        string script_command_line - the command line provided to the script
                that performed this action. If workspace objects were provided in
                the command line, also put the object reference in the
                input_ws_object list.
        list&lt;obj_ref&gt; input_ws_objects - the workspace objects that
                were used as input to this action; typically these will also be
                present as parts of the method_params or the script_command_line
                arguments.
        list&lt;obj_ref&gt; resolved_ws_objects - the workspace objects ids from 
                input_ws_objects resolved to permanent workspace object references
                by the workspace service.
        list&lt;string&gt; intermediate_incoming - if the previous action produced 
                output that 1) was not stored in a referrable way, and 2) is
                used as input for this action, provide it with an arbitrary and
                unique ID here, in the order of the input arguments to this action.
                These IDs can be used in the method_params argument.
        list&lt;string&gt; intermediate_outgoing - if this action produced output
                that 1) was not stored in a referrable way, and 2) is
                used as input for the next action, provide it with an arbitrary and
                unique ID here, in the order of the output values from this action.
                These IDs can be used in the intermediate_incoming argument in the
                next action.
        list&lt;ExternalDataUnit&gt; external_data - data external to the workspace
                that was either imported to the workspace or used to create a
                workspace object.
        string description - a free text description of this action.</data></node><node id="D.KBasePPI.InteractionDetectionTypeID"><data key="typeName">InteractionDetectionTypeID</data><data key="name">D.KBasePPI.InteractionDetectionTypeID</data><data key="moduleName">KBasePPI</data><data key="nodeType">D</data><data key="comment">@id kb</data></node><node id="M.GenomeAnnotation.genomeTO_to_feature_data"><data key="typeName">genomeTO_to_feature_data</data><data key="name">M.GenomeAnnotation.genomeTO_to_feature_data</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.UserAndJobState.get_has_state"><data key="typeName">get_has_state</data><data key="name">M.UserAndJobState.get_has_state</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Get the state of a key for a service, and do not throw an error if the
key doesn't exist. If the key doesn't exist, has_key will be false
and the key value will be null.</data></node><node id="M.Workspace.request_module_ownership"><data key="typeName">request_module_ownership</data><data key="name">M.Workspace.request_module_ownership</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Request ownership of a module name. A Workspace administrator
must approve the request.</data></node><node id="M.Workspace.list_referencing_objects"><data key="typeName">list_referencing_objects</data><data key="name">M.Workspace.list_referencing_objects</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">List objects that reference one or more objects.</data></node><node id="D.MAK.gene_id"><data key="typeName">gene_id</data><data key="name">D.MAK.gene_id</data><data key="moduleName">MAK</data><data key="nodeType">D</data><data key="comment">Represents KBase gene identifier
@id external</data></node><node id="M.GenomeAnnotation.call_features_CDS_FragGeneScan"><data key="typeName">call_features_CDS_FragGeneScan</data><data key="name">M.GenomeAnnotation.call_features_CDS_FragGeneScan</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.GenomeAnnotation.export_genome"><data key="typeName">export_genome</data><data key="name">M.GenomeAnnotation.export_genome</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Export genome typed object to one of the supported output formats:
* genbank, embl, or gff.
* If feature_types is a non-empty list, limit the output to the given
* feature types.</data></node><node id="D.AssemblyInputHandle.SingleEndLibrary"><data key="typeName">SingleEndLibrary</data><data key="name">D.AssemblyInputHandle.SingleEndLibrary</data><data key="moduleName">AssemblyInputHandle</data><data key="nodeType">D</data><data key="comment">Represents a handle to a single end library</data></node><node id="D.KBaseExpression.ContactPerson"><data key="typeName">ContactPerson</data><data key="name">D.KBaseExpression.ContactPerson</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Data structure for GSM ContactPerson</data></node><node id="D.KBaseExpression.sample_ids_averaged_from"><data key="typeName">sample_ids_averaged_from</data><data key="name">D.KBaseExpression.sample_ids_averaged_from</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">List of KBase Sample IDs that this sample was averaged from</data></node><node id="M.AMETHSTService.delete_job"><data key="typeName">delete_job</data><data key="name">M.AMETHSTService.delete_job</data><data key="moduleName">AMETHSTService</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.GWAS.calculate_kinship_matrix"><data key="typeName">calculate_kinship_matrix</data><data key="name">M.GWAS.calculate_kinship_matrix</data><data key="moduleName">GWAS</data><data key="nodeType">M</data><data key="comment">gwas_calculate_kinship_matrix_emma_async calculates kinship matrix from variation data.
Currently the method support emma and will support different methods.</data></node><node id="D.Ontology.ontology_id"><data key="typeName">ontology_id</data><data key="name">D.Ontology.ontology_id</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">GoID : Unique GO term id (Source: external Gene Ontology database - http://www.geneontology.org/)</data></node><node id="D.KBaseBiochem.BiochemistryStructures"><data key="typeName">BiochemistryStructures</data><data key="name">D.KBaseBiochem.BiochemistryStructures</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">BiochemistryStructures object

@optional description name
@searchable ws_subset id name structures</data></node><node id="D.KBaseCommunities.FBAModelSet"><data key="typeName">FBAModelSet</data><data key="name">D.KBaseCommunities.FBAModelSet</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Ontology.gene_id"><data key="typeName">gene_id</data><data key="name">D.Ontology.gene_id</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">Unique identifier of a species specific Gene (aka Feature entity in KBase parlence). This ID is an external identifier that exists in the public databases such as Gramene, Ensembl, NCBI etc.</data></node><node id="M.UserProfile.get_user_profile"><data key="typeName">get_user_profile</data><data key="name">M.UserProfile.get_user_profile</data><data key="moduleName">UserProfile</data><data key="nodeType">M</data><data key="comment">Given a list of usernames, returns a list of UserProfiles in the same order.
If no UserProfile was found for a username, the UserProfile at that position will
be null.</data></node><node id="D.KBaseFBA.TemplateBiomassComponent"><data key="typeName">TemplateBiomassComponent</data><data key="name">D.KBaseFBA.TemplateBiomassComponent</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">TemplateBiomassComponent object holds data on a compound of biomass in template</data></node><node id="M.GenomeAnnotation.call_features_insertion_sequences"><data key="typeName">call_features_insertion_sequences</data><data key="name">M.GenomeAnnotation.call_features_insertion_sequences</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Given a genome typed object, call insertion sequences.</data></node><node id="D.ExpressionServices.comparison_denominator_label"><data key="typeName">comparison_denominator_label</data><data key="name">D.ExpressionServices.comparison_denominator_label</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">denominator label is the label for the denominator in a comparison.  
This label can be a single sampleId (default or defined) or a comma separated list of sampleIds that were averaged.</data></node><node id="M.Ontology.get_go_enrichment"><data key="typeName">get_go_enrichment</data><data key="name">M.Ontology.get_go_enrichment</data><data key="moduleName">Ontology</data><data key="nodeType">M</data><data key="comment">For a given list of kbase gene ids from a particular genome (for example "Athaliana" ) find out the significantly enriched GO terms in your gene set. This function accepts four parameters: A list of kbase gene-identifiers, a list of ontology domains (e.g."biological process", "molecular function", "cellular component"), a list of evidence codes (e.g."IEA","IDA","IEP" etc.), and test type (e.g. "hypergeometric"). The list of kbase gene identifiers cannot be empty; however the list of ontology domains and the list of evidence codes can be empty. If any of these two lists is not empty then the gene-id and the go-id pairs retrieved from KBase are further filtered by using the desired ontology domains and/or evidence codes supplied as input. So, if you don't want to filter the initial results then it is recommended to provide empty domain and evidence code lists. Final filtered list of the kbase gene-id to go-ids mapping is used to calculate GO enrichment using hypergeometric test and provides pvalues.The default pvalue cutoff is used as 0.05.  
The current released version ignores test type and by default, it uses hypergeometric test. So even if you do not provide TestType, it will do hypergeometric test.</data></node><node id="M.Workspace.clone_workspace"><data key="typeName">clone_workspace</data><data key="name">M.Workspace.clone_workspace</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Clones a workspace.</data></node><node id="D.KBaseExpression.FullMeasurement"><data key="typeName">FullMeasurement</data><data key="name">D.KBaseExpression.FullMeasurement</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Measurement data structure</data></node><node id="D.PROM.expression_data_collection_id"><data key="typeName">expression_data_collection_id</data><data key="name">D.PROM.expression_data_collection_id</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">A workspace id for a set of expression data on/off calls</data></node><node id="D.Workspace.SubObjectIdentity"><data key="typeName">SubObjectIdentity</data><data key="name">D.Workspace.SubObjectIdentity</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">An object subset identifier.

Select a subset of an object by:
EITHER
        One, and only one, of the numerical id or name of the workspace,
        where the name can also be a KBase ID including the numerical id,
        e.g. kb|ws.35.
                ws_id wsid - the numerical ID of the workspace.
                ws_name workspace - name of the workspace or the workspace ID
                        in KBase format, e.g. kb|ws.78.
        AND 
        One, and only one, of the numerical id or name of the object.
                obj_id objid- the numerical ID of the object.
                obj_name name - name of the object.
        OPTIONALLY
                obj_ver ver - the version of the object.
OR an object reference string:
        obj_ref ref - an object reference string.
AND a subset specification:
        list&lt;object_path&gt; included - the portions of the object to include
                in the object subset.</data></node><node id="M.Workspace.list_workspace_info"><data key="typeName">list_workspace_info</data><data key="name">M.Workspace.list_workspace_info</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">List workspaces viewable by the user.</data></node><node id="M.InvocationService.copy"><data key="typeName">copy</data><data key="name">M.InvocationService.copy</data><data key="moduleName">InvocationService</data><data key="nodeType">M</data><data key="comment">* Copy the given file to the given destination.</data></node><node id="D.ProbabilisticAnnotation.probanno_id"><data key="typeName">probanno_id</data><data key="name">D.ProbabilisticAnnotation.probanno_id</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">A string identifier for a probabilistic annotation object.</data></node><node id="M.Workspace.undelete_objects"><data key="typeName">undelete_objects</data><data key="name">M.Workspace.undelete_objects</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Undelete objects. All versions of an object are undeleted, regardless
of the version specified in the ObjectIdentity. If an object is not
deleted, no error is thrown.</data></node><node id="M.KBaseExpression.get_expression_float_data_table_by_genome"><data key="typeName">get_expression_float_data_table_by_genome</data><data key="name">M.KBaseExpression.get_expression_float_data_table_by_genome</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a list of genome_id and the string of what type of numerical interpretation 
it returns a FloatDataTable. 
Gives all samples and features for expression data that match the numerical interpretation
Numerical_interpretation options : 'FPKM', 'Log2 level intensities', 'Log2 level ratios' or 'Log2 level ratios genomic DNA control'</data></node><node id="M.GenomeAnnotation.call_features_ProtoCDS_kmer_v1"><data key="typeName">call_features_ProtoCDS_kmer_v1</data><data key="name">M.GenomeAnnotation.call_features_ProtoCDS_kmer_v1</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.GenomeAnnotation.call_features_ProtoCDS_kmer_v2"><data key="typeName">call_features_ProtoCDS_kmer_v2</data><data key="name">M.GenomeAnnotation.call_features_ProtoCDS_kmer_v2</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.MEME.compare_motifs_with_tomtom_by_collection_from_ws"><data key="typeName">compare_motifs_with_tomtom_by_collection_from_ws</data><data key="name">M.MEME.compare_motifs_with_tomtom_by_collection_from_ws</data><data key="moduleName">MEME</data><data key="nodeType">M</data><data key="comment">Returns kbase ID of TomtomRunResult with results of a single TOMTOM run
string ws_name - workspace id 
TOMTOM will be run with -text parameter
TomtomRunParameters params - parameters of TOMTOM run</data></node><node id="D.KBaseGwasData.populationTraitUnit"><data key="typeName">populationTraitUnit</data><data key="name">D.KBaseGwasData.populationTraitUnit</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">Population - Trait tuble</data></node><node id="D.KmerEval.frame"><data key="typeName">frame</data><data key="name">D.KmerEval.frame</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.MAK.MAKBiclusterSet"><data key="typeName">MAKBiclusterSet</data><data key="name">D.MAK.MAKBiclusterSet</data><data key="moduleName">MAK</data><data key="nodeType">D</data><data key="comment">Bicluster set 

        string id - id
        string time_stamp - time stamp for the results
        string version - MAK version
        int number - number of biclusters in set
        int min_genes - min genes for bicluster in set
        int max_genes - max genes for bicluster in set
        int min_conditions - max genes for bicluster in set
        int max_conditions - max conditions for bicluster in set
        string taxon - NCBI taxonomy id
        string bicluster_type - type of bicluster (determined by source data, e.g. expression, fitness, metagenomic, metabolite, integrated)                
        list&lt;MAKBicluster&gt; biclusters - biclusters
        map&lt;string, string&gt; id_index - map of bicluster ids to array indices (translates between kb id and ws id)
        
@optional id_index

@searchable ws_subset id taxon</data></node><node id="D.KBaseExpression.ExpressionSeries"><data key="typeName">ExpressionSeries</data><data key="name">D.KBaseExpression.ExpressionSeries</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Data structure for the workspace expression series.  The ExpressionSeries typed object.
publication should need to eventually have ws objects, will not include it for now.

@optional title summary design publication_id 

@searchable ws_subset id source_id publication_id title summary design genome_expression_sample_ids_map</data></node><node id="D.Ontology.Species"><data key="typeName">Species</data><data key="name">D.Ontology.Species</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">Plant Species names.
    
     The current list of plant species includes: 
     Alyrata: Arabidopsis lyrata
     Athaliana: Arabidopsis thaliana
     Bdistachyon: Brachypodium distachyon
     Creinhardtii: Chlamydomonas reinhardtii
     Gmax: Glycine max
     Oglaberrima: Oryza glaberrima
     Oindica: Oryza sativa indica
     Osativa: Oryza sativa japonica
     Ptrichocarpa: Populus trichocarpa 
     Sbicolor: Sorghum bicolor 
     Smoellendorffii:  Selaginella moellendorffii
     Vvinifera: Vitis vinefera 
     Zmays: Zea mays</data></node><node id="D.Workspace.ListWorkspaceInfoParams"><data key="typeName">ListWorkspaceInfoParams</data><data key="name">D.Workspace.ListWorkspaceInfoParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Input parameters for the "list_workspace_info" function.

Optional parameters:
permission perm - filter workspaces by minimum permission level. 'None'
        and 'readable' are ignored.
list&lt;username&gt; owners - filter workspaces by owner.
usermeta meta - filter workspaces by the user supplied metadata. NOTE:
        only one key/value pair is supported at this time. A full map
        is provided as input for the possibility for expansion in the
        future.
timestamp after - only return workspaces that were modified after this
        date.
timestamp before - only return workspaces that were modified before
        this date.
boolean excludeGlobal - if excludeGlobal is true exclude world
        readable workspaces. Defaults to false.
boolean showDeleted - show deleted workspaces that are owned by the
        user.
boolean showOnlyDeleted - only show deleted workspaces that are owned
        by the user.</data></node><node id="M.UserAndJobState.complete_job"><data key="typeName">complete_job</data><data key="name">M.UserAndJobState.complete_job</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Complete the job. After the job is completed, total_progress always
equals max_progress. If detailed_err is anything other than null,
the job is considered to have errored out.</data></node><node id="D.KBaseSearch.GenomeSet"><data key="typeName">GenomeSet</data><data key="name">D.KBaseSearch.GenomeSet</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">A type describing a set of Genomes, where each element of the set 
is an embedded Genome object or a Genome object reference.</data></node><node id="D.KBaseGeneFamilies.DomainModelSet"><data key="typeName">DomainModelSet</data><data key="name">D.KBaseGeneFamilies.DomainModelSet</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">D</data><data key="comment">string set_name - name of model set</data></node><node id="M.NarrativeJobService.list_config"><data key="typeName">list_config</data><data key="name">M.NarrativeJobService.list_config</data><data key="moduleName">NarrativeJobService</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.ERDB_Service.parameters"><data key="typeName">parameters</data><data key="name">D.ERDB_Service.parameters</data><data key="moduleName">ERDB_Service</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.Workspace.get_workspace_info"><data key="typeName">get_workspace_info</data><data key="name">M.Workspace.get_workspace_info</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Get information associated with a workspace.</data></node><node id="D.ExpressionServices.GseObject"><data key="typeName">GseObject</data><data key="name">D.ExpressionServices.GseObject</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">GSE OBJECT</data></node><node id="D.ExpressionServices.Protocol"><data key="typeName">Protocol</data><data key="name">D.ExpressionServices.Protocol</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Data structure for Protocol  (TEMPORARY WORKSPACE TYPED OBJECT SHOULD BE HANDLED IN THE FUTURE IN WORKSPACE COMMON)</data></node><node id="M.GenomeAnnotation.add_contigs_from_handle"><data key="typeName">add_contigs_from_handle</data><data key="name">M.GenomeAnnotation.add_contigs_from_handle</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Add a set of contigs to the genome object, loading the contigs
* from the given handle service handle.</data></node><node id="D.KBaseBiochem.compartment_id"><data key="typeName">compartment_id</data><data key="name">D.KBaseBiochem.compartment_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Reaction ID
@id external</data></node><node id="D.Workspace.GetObjectInfoNewParams"><data key="typeName">GetObjectInfoNewParams</data><data key="name">D.Workspace.GetObjectInfoNewParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Input parameters for the "get_object_info_new" function.

        Required arguments:
        list&lt;ObjectIdentity&gt; objects - the objects for which the information
                should be fetched
        
        Optional arguments:
        boolean includeMetadata - include the object metadata in the returned
                information. Default false.
        boolean ignoreErrors - Don't throw an exception if an object cannot
                be accessed; return null for that object's information instead.
                Default false.</data></node><node id="M.Workspace.list_all_types"><data key="typeName">list_all_types</data><data key="name">M.Workspace.list_all_types</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">List all released types with released version from all modules. Return
mapping from module name to mapping from type name to released type
version.</data></node><node id="M.Workspace.rename_workspace"><data key="typeName">rename_workspace</data><data key="name">M.Workspace.rename_workspace</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Rename a workspace.</data></node><node id="D.ExpressionServices.expression_ontology_terms"><data key="typeName">expression_ontology_terms</data><data key="name">D.ExpressionServices.expression_ontology_terms</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">list of ExpressionsOntologies</data></node><node id="D.UserAndJobState.max_progress"><data key="typeName">max_progress</data><data key="name">D.UserAndJobState.max_progress</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">The maximum possible progress of a job.</data></node><node id="D.KBaseFBA.phenotypeset_ref"><data key="typeName">phenotypeset_ref</data><data key="name">D.KBaseFBA.phenotypeset_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a phenotype set object
@id ws KBasePhenotypes.PhenotypeSet</data></node><node id="D.KBaseFBA.modelreaction_ref"><data key="typeName">modelreaction_ref</data><data key="name">D.KBaseFBA.modelreaction_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a reaction object in a model
@id subws KBaseFBA.FBAModel.modelreactions.[*].id</data></node><node id="M.ProbabilisticAnnotation.annotate"><data key="typeName">annotate</data><data key="name">M.ProbabilisticAnnotation.annotate</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">M</data><data key="comment">Generate alternative annotations for every gene in a genome together with
their likelihoods.  Results are stored in a ProbAnno object. Returns the
job ID of the submitted job.</data></node><node id="D.KBaseRegulation.TranscriptionFactor"><data key="typeName">TranscriptionFactor</data><data key="name">D.KBaseRegulation.TranscriptionFactor</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents a transcription factor controlling genes
transcription_factor_id transcription_factor_id - transcription factor identifier
string locus_tag - locus tag of a transcription factor
string name - transcription factor name

@optional locus_tag name</data></node><node id="M.MEME.get_pspm_collection_from_meme_result_job_from_ws"><data key="typeName">get_pspm_collection_from_meme_result_job_from_ws</data><data key="name">M.MEME.get_pspm_collection_from_meme_result_job_from_ws</data><data key="moduleName">MEME</data><data key="nodeType">M</data><data key="comment">Returns ID of job object that contains ID of MemePSPMCollection converted from MemeRunResult
string ws_name - workspace id
string meme_run_result_id - KBase ID of source MemeRunResult</data></node><node id="D.KBaseExpression.RNASeqSampleAlignmentSet"><data key="typeName">RNASeqSampleAlignmentSet</data><data key="name">D.KBaseExpression.RNASeqSampleAlignmentSet</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">list of RNASeqSampleAlignment</data></node><node id="D.KBaseGenomes.atomic_regulon"><data key="typeName">atomic_regulon</data><data key="name">D.KBaseGenomes.atomic_regulon</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Structure for an atomic regulon (from CDMI API)</data></node><node id="M.ExpressionServices.get_expression_series_ids_by_series_external_source_ids"><data key="typeName">get_expression_series_ids_by_series_external_source_ids</data><data key="name">M.ExpressionServices.get_expression_series_ids_by_series_external_source_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">get series ids by the series's external source id : Takes a list of series external source ids, and returns a list of series ids</data></node><node id="D.KBasePPI.InteractionDataset"><data key="typeName">InteractionDataset</data><data key="name">D.KBasePPI.InteractionDataset</data><data key="moduleName">KBasePPI</data><data key="nodeType">D</data><data key="comment">This is a denormalized version of an entire PPI dataset,
in which all the relevant data are returned in a single
InteractionDataset object:
searchable kb_id;
searchable description;
searchable data_source;
searchable genomes;
searchable genomeRefs;
searchable interactions.id;
searchable interactions.description;
searchable interactions.method.id;
searchable interactions.method.description;
searchable interactions.interaction_proteins.feature_id;
searchable interactions.publication;
@optional kb_id url genomeRefs
@author JMC</data></node><node id="D.UserAndJobState.total_progress"><data key="typeName">total_progress</data><data key="name">D.UserAndJobState.total_progress</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">The total progress of a job.</data></node><node id="D.KBaseGwasData.kbase_gene_id"><data key="typeName">kbase_gene_id</data><data key="name">D.KBaseGwasData.kbase_gene_id</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">A reference to kbase genome id in central store
     @id kb</data></node><node id="M.UserAndJobState.list_job_services"><data key="typeName">list_job_services</data><data key="name">M.UserAndJobState.list_job_services</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">List all job services. Does not currently list AWE services.</data></node><node id="D.KBaseSearch.co_occurring_fid"><data key="typeName">co_occurring_fid</data><data key="name">D.KBaseSearch.co_occurring_fid</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Structure for co-occurring fids (from CDMI API)</data></node><node id="D.KBaseGeneFamilies.DomainLibrary"><data key="typeName">DomainLibrary</data><data key="name">D.KBaseGeneFamilies.DomainLibrary</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">D</data><data key="comment">id - id of library
source - source of library (e.g., Cog, Pfam, ...)
source_url - ftp/http url where library can be downloaded 
version - version of library release
release_date - release date of library
program - program for running domain search
domain_prefix - prefix of domain accession defining library
dbxref_prefix - url prefix for db-external referencing
library_files - library files stored in Shock storage
domains - domain information</data></node><node id="D.KBaseOntology.map_id"><data key="typeName">map_id</data><data key="name">D.KBaseOntology.map_id</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment">ID of map object
@id kb</data></node><node id="M.ExpressionServices.get_expression_samples_titles"><data key="typeName">get_expression_samples_titles</data><data key="name">M.ExpressionServices.get_expression_samples_titles</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a List of SampleIDs, returns a Hash (key : SampleID, value: Title of Sample)</data></node><node id="D.Workspace.ListModuleVersionsParams"><data key="typeName">ListModuleVersionsParams</data><data key="name">D.Workspace.ListModuleVersionsParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Parameters for the list_module_versions function.

        Required arguments:
        One of:
        modulename mod - returns all versions of the module.
        type_string type - returns all versions of the module associated with
                the type.</data></node><node id="D.KBaseExpression.log2_ratio"><data key="typeName">log2_ratio</data><data key="name">D.KBaseExpression.log2_ratio</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Log2Ratio Log2Level of sample over log2Level of another sample for a given feature.  
Note if the Ratio is consumed by On Off Call function it will have 1(on), 0(unknown), -1(off) for its values</data></node><node id="D.ExpressionServices.sample_annotations"><data key="typeName">sample_annotations</data><data key="name">D.ExpressionServices.sample_annotations</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">list of Sample Annotations associated with the Sample</data></node><node id="D.KBaseGwasData.idnameUnit"><data key="typeName">idnameUnit</data><data key="name">D.KBaseGwasData.idnameUnit</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.ExpressionServices.feature_ids"><data key="typeName">feature_ids</data><data key="name">D.ExpressionServices.feature_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">KBase list of Feature IDs , typically CDS/PEG</data></node><node id="D.PROM.status"><data key="typeName">status</data><data key="name">D.PROM.status</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">Status message used by this service to provide information on the final status of a step</data></node><node id="D.KBaseBiochem.biochem_id"><data key="typeName">biochem_id</data><data key="name">D.KBaseBiochem.biochem_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Biochemistry ID
@id kb</data></node><node id="D.KBaseBiochem.map_id"><data key="typeName">map_id</data><data key="name">D.KBaseBiochem.map_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Metabolic map ID
@id external</data></node><node id="M.KBaseTrees.get_leaf_to_feature_map"><data key="typeName">get_leaf_to_feature_map</data><data key="name">M.KBaseTrees.get_leaf_to_feature_map</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Given a tree id, this method returns a mapping from a tree's unique internal ID to
a KBase feature ID if and only if a cannonical feature id exists.</data></node><node id="D.KBasePhenotypes.PhenotypeSet"><data key="typeName">PhenotypeSet</data><data key="name">D.KBasePhenotypes.PhenotypeSet</data><data key="moduleName">KBasePhenotypes</data><data key="nodeType">D</data><data key="comment">PhenotypeSet object contains a set of phenotype objects
            
@optional name
    @metadata ws source_id as Source ID
    @metadata ws source as Source
    @metadata ws name as Name
    @metadata ws length(phenotypes) as Number phenotypes
    @metadata ws type as Type</data></node><node id="D.KBaseSearch.GenomeSetElement"><data key="typeName">GenomeSetElement</data><data key="name">D.KBaseSearch.GenomeSetElement</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">This type represents an element of a GenomeSet.
Either ref or data is defined for an element, but not both.
@optional metadata
@optional ref
@optional data</data></node><node id="D.KmerEval.seq_triple"><data key="typeName">seq_triple</data><data key="name">D.KmerEval.seq_triple</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBasePPI.Interaction"><data key="typeName">Interaction</data><data key="name">D.KBasePPI.Interaction</data><data key="moduleName">KBasePPI</data><data key="nodeType">D</data><data key="comment">searchable kb_id;
searchable description;
searchable method.id;
searchable method.description;
searchable interaction_proteins.feature_id;
searchable publication;
@optional kb_id confidence url method publication
@author JMC</data></node><node id="D.RDPTools.Sequence"><data key="typeName">Sequence</data><data key="name">D.RDPTools.Sequence</data><data key="moduleName">RDPTools</data><data key="nodeType">D</data><data key="comment">A structure of representing DNA sequences.

string seqid

This parameter is the sequence ID.  The format is an 'S'
followed by 9 numbers.

string bases

This parameter represents the bases in the sequence.  Possible
values are any combination of 'A', 'C', 'T', 'G' or their 
lowercase equivalents.</data></node><node id="D.KBaseGenomes.ProbabilisticAnnotation_id"><data key="typeName">ProbabilisticAnnotation_id</data><data key="name">D.KBaseGenomes.ProbabilisticAnnotation_id</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">ProbabilisticAnnotation ID
@id kb</data></node><node id="D.Inferelator.gene_list_ref"><data key="typeName">gene_list_ref</data><data key="name">D.Inferelator.gene_list_ref</data><data key="moduleName">Inferelator</data><data key="nodeType">D</data><data key="comment">Represents KBase gene identifier
@id ws Inferelator.GeneList</data></node><node id="M.ExpressionServices.get_expression_samples_data_by_strain_ids"><data key="typeName">get_expression_samples_data_by_strain_ids</data><data key="name">M.ExpressionServices.get_expression_samples_data_by_strain_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a list of Strains, and a SampleType (controlled vocabulary : microarray, RNA-Seq, qPCR, or proteomics) , it returns a StrainExpressionDataSamplesMapping,  
StrainId -&gt; ExpressionSampleDataStructure {strain_id -&gt; {sample_id -&gt; expressionSampleDataStructure}}</data></node><node id="D.KBaseFBA.QuantOptBiomassMod"><data key="typeName">QuantOptBiomassMod</data><data key="name">D.KBaseFBA.QuantOptBiomassMod</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseSearch.FeatureSet"><data key="typeName">FeatureSet</data><data key="name">D.KBaseSearch.FeatureSet</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">A type describing a set of Genomes, where each element of the set 
is an embedded Genome object or a Genome object reference.</data></node><node id="D.KBaseGenomes.MetagenomeAnnotationOTU"><data key="typeName">MetagenomeAnnotationOTU</data><data key="name">D.KBaseGenomes.MetagenomeAnnotationOTU</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Structure for the "MetagenomeAnnotationOTU" object

        string name - name of metagenome OTU
        string kbid - KBase ID of OTU of metagenome object
        string source_id - ID used for OTU in metagenome source
        string source - source OTU ID
        list&lt;MetagenomeAnnotationOTUFunction&gt; functions - list of functions in OTU
        
    @searchable ws_subset id name source_id source functions.[*].(id,abundance,confidence,functional_role)</data></node><node id="D.ProbabilisticAnnotation.job_id"><data key="typeName">job_id</data><data key="name">D.ProbabilisticAnnotation.job_id</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">A string identifier for a job object.</data></node><node id="M.ProteinInfo.fidlist_to_neighbors"><data key="typeName">fidlist_to_neighbors</data><data key="name">M.ProteinInfo.fidlist_to_neighbors</data><data key="moduleName">ProteinInfo</data><data key="nodeType">M</data><data key="comment">fidlist_to_neighbors takes as input a list of feature ids, and
a minimal neighbor score, and returns a mapping of each fid to
its neighbors, based on neighbor score &gt;= threshold</data></node><node id="D.KBaseOntology.Role"><data key="typeName">Role</data><data key="name">D.KBaseOntology.Role</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment">Role object containing data relating to functional role
            
@optional name seedfeature
@searchable ws_subset id seedfeature name</data></node><node id="D.ExpressionServices.gse_samples"><data key="typeName">gse_samples</data><data key="name">D.ExpressionServices.gse_samples</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Mapping of Key GSMID to GSM Object</data></node><node id="D.MAK.MAKResult"><data key="typeName">MAKResult</data><data key="name">D.MAK.MAKResult</data><data key="moduleName">MAK</data><data key="nodeType">D</data><data key="comment">Represents data from a single run of MAK
string id - identifier of MAK run
string start_time - start time of MAK run
string finish_time - end time of MAK run
MAKParameters parameters - run parameters
list&lt;MAKBiclusterSet&gt; sets - set of biclusters</data></node><node id="D.Ontology.GeneIDList"><data key="typeName">GeneIDList</data><data key="name">D.Ontology.GeneIDList</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">A list of gene identifiers from same species</data></node><node id="D.KBaseSearch.region_of_dna"><data key="typeName">region_of_dna</data><data key="name">D.KBaseSearch.region_of_dna</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">A region of DNA is maintained as a tuple of four components:

                the contig
                the beginning position (from 1)
                the strand
                the length

           We often speak of "a region".  By "location", we mean a sequence
           of regions from the same genome (perhaps from distinct contigs).</data></node><node id="D.KBaseGwasData.GwasGeneList_obj_id"><data key="typeName">GwasGeneList_obj_id</data><data key="name">D.KBaseGwasData.GwasGeneList_obj_id</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">A reference to GWAS top/significant genelist object
     @id ws  KBaseGwasData.GwasGeneList</data></node><node id="M.GenomeAnnotation.call_features_tRNA_trnascan"><data key="typeName">call_features_tRNA_trnascan</data><data key="name">M.GenomeAnnotation.call_features_tRNA_trnascan</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Given a genome typed object, find instances of tRNAs in
* the genome.</data></node><node id="D.KBaseRegulation.regulome_source"><data key="typeName">regulome_source</data><data key="name">D.KBaseRegulation.regulome_source</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">The source of regulome model. The value can be one of the following:
        
        REGPRECISE_CURATED - indicates that regulome is based on the curated regulons from RegPrecise database
        REGPRECISE_PROPAGATED - indicates that regulom model was automatically built by conservation propagation of RegPrecise reference regulons</data></node><node id="D.GenomeAnnotation.md5s"><data key="typeName">md5s</data><data key="name">D.GenomeAnnotation.md5s</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.GenomeAnnotation.annotate_proteins_kmer_v1"><data key="typeName">annotate_proteins_kmer_v1</data><data key="name">M.GenomeAnnotation.annotate_proteins_kmer_v1</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.GenomeAnnotation.annotate_proteins_kmer_v2"><data key="typeName">annotate_proteins_kmer_v2</data><data key="name">M.GenomeAnnotation.annotate_proteins_kmer_v2</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseProteinStructure.feature_id_t"><data key="typeName">feature_id_t</data><data key="name">D.KBaseProteinStructure.feature_id_t</data><data key="moduleName">KBaseProteinStructure</data><data key="nodeType">D</data><data key="comment">KBase feature id, ala "kb|g.0.peg.781"</data></node><node id="D.KBaseBiochem.CompoundStructure"><data key="typeName">CompoundStructure</data><data key="name">D.KBaseBiochem.CompoundStructure</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">ReactionSet object

@searchable ws_subset id type</data></node><node id="D.Communities.MetagenomeSet"><data key="typeName">MetagenomeSet</data><data key="name">D.Communities.MetagenomeSet</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment">A type describing a set of Metagenomes, where each element of the set 
is an embedded Metagenome object or a Metagenome object reference.</data></node><node id="D.Ontology.ontology_description_list"><data key="typeName">ontology_description_list</data><data key="name">D.Ontology.ontology_description_list</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">a list of GO terms description</data></node><node id="D.Ontology.TestType"><data key="typeName">TestType</data><data key="name">D.Ontology.TestType</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">Test type, whether it's "hypergeometric" and "chisq"</data></node><node id="D.Communities.BiomMatrixEntry"><data key="typeName">BiomMatrixEntry</data><data key="name">D.Communities.BiomMatrixEntry</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment">BiomMatrixEntry
A KBase object for a profile entry in the metagenome profile object
@optional name metadata metagenome
#searchable BiomMetagenomeEntry.*</data></node><node id="D.ERDB_Service.fieldValues"><data key="typeName">fieldValues</data><data key="name">D.ERDB_Service.fieldValues</data><data key="moduleName">ERDB_Service</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Tree.boolean"><data key="typeName">boolean</data><data key="name">D.Tree.boolean</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">indicates true or false values, false &lt;= 0, true &gt;=1</data></node><node id="D.ProteinInfo.fid"><data key="typeName">fid</data><data key="name">D.ProteinInfo.fid</data><data key="moduleName">ProteinInfo</data><data key="nodeType">D</data><data key="comment">A fid is a unique identifier of a feature.</data></node><node id="M.Workspace.unhide_objects"><data key="typeName">unhide_objects</data><data key="name">M.Workspace.unhide_objects</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Unhide objects. All versions of an object are unhidden, regardless
of the version specified in the ObjectIdentity.</data></node><node id="D.Ontology.test_type"><data key="typeName">test_type</data><data key="name">D.Ontology.test_type</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">Test type, whether it's "hypergeometric" and "chisq"</data></node><node id="D.UserProfile.UserProfile"><data key="typeName">UserProfile</data><data key="name">D.UserProfile.UserProfile</data><data key="moduleName">UserProfile</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.KBaseExpression.get_expression_sample_ids_by_experimental_unit_ids"><data key="typeName">get_expression_sample_ids_by_experimental_unit_ids</data><data key="name">M.KBaseExpression.get_expression_sample_ids_by_experimental_unit_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a list of ExperimentalUnitIDs returns a list of Sample IDs</data></node><node id="D.GWAS.CalculateKinshipMatrixParams"><data key="typeName">CalculateKinshipMatrixParams</data><data key="name">D.GWAS.CalculateKinshipMatrixParams</data><data key="moduleName">GWAS</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.MEME.find_sites_with_mast_by_collection_from_ws"><data key="typeName">find_sites_with_mast_by_collection_from_ws</data><data key="name">M.MEME.find_sites_with_mast_by_collection_from_ws</data><data key="moduleName">MEME</data><data key="nodeType">M</data><data key="comment">Returns kbase ID of MastRunResult containing list of MAST hits
MAST will be run with -hit_list parameter
string ws_name - workspace id 
MastRunParameters params - parameters of MAST run</data></node><node id="M.Workspace.list_objects"><data key="typeName">list_objects</data><data key="name">M.Workspace.list_objects</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">List objects in one or more workspaces.</data></node><node id="D.Workspace.ObjectProvenanceInfo"><data key="typeName">ObjectProvenanceInfo</data><data key="name">D.Workspace.ObjectProvenanceInfo</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">The provenance and supplemental info for an object.

        object_info info - information about the object.
        list&lt;ProvenanceAction&gt; provenance - the object's provenance.
        username creator - the user that first saved the object to the
                workspace.
        timestamp created - the date the object was first saved to the
                workspace.
        list&lt;obj_ref&gt; - the references contained within the object.
        obj_ref copied - the reference of the source object if this object is
                a copy and the copy source exists and is accessible.
                null otherwise.
        boolean copy_source_inaccessible - true if the object was copied from
                another object, but that object is no longer accessible to the
                user. False otherwise.
        mapping&lt;id_type, list&lt;extracted_id&gt;&gt; extracted_ids - any ids extracted
                from the object.
        string handle_error - if an error occurs while setting ACLs on
                embedded handle IDs, it will be reported here.
        string handle_stacktrace - the stacktrace for handle_error.</data></node><node id="D.KBaseFBA.TargetGeneProbabilities"><data key="typeName">TargetGeneProbabilities</data><data key="name">D.KBaseFBA.TargetGeneProbabilities</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Object required by the prom_constraints object which defines the computed probabilities for a target gene.  The
TF regulating this target can be deduced based on the TFtoTGmap object.

    string target_gene_ref           - reference to the target gene
    float probTGonGivenTFoff    - PROB(target=ON|TF=OFF)
                                the probability that the target gene is ON, given that the
                                transcription factor is not expressed.  Set to null or empty if
                                this probability has not been calculated yet.
    float probTGonGivenTFon   - PROB(target=ON|TF=ON)
                                the probability that the transcriptional target is ON, given that the
                                transcription factor is expressed.    Set to null or empty if
                                this probability has not been calculated yet.</data></node><node id="D.MOTranslation.genomeId"><data key="typeName">genomeId</data><data key="name">D.MOTranslation.genomeId</data><data key="moduleName">MOTranslation</data><data key="nodeType">D</data><data key="comment">genomeId is a kbase id of a genome</data></node><node id="D.KBaseGwasData.GwasPopulationVariation"><data key="typeName">GwasPopulationVariation</data><data key="name">D.KBaseGwasData.GwasPopulationVariation</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">Details of nucleotide variation in the population


     @optional  parent_variation_obj_id minor_allele_frequency 

      GwasPopulation_obj_id - object id of the GwasPopulation
      filetypes - filetype for the vcf file eg. VCF, HAPMAP, PLINK
      comment - Placeholder for comments
      assay - The assay method for genotyping or identifying SNPs
      originator - PI / LAB
      genome - genome_details 
      variation_file - shock property of variation file
      string GwasPopulationVariation_obj_id - parent object id: VCF-FILTERING use case
      minor_allele_frequency - minor allele frequency filtering

     Search indexing: Donot index --&gt; variation_file</data></node><node id="M.RDPTools.probematchSeqs"><data key="typeName">probematchSeqs</data><data key="name">M.RDPTools.probematchSeqs</data><data key="moduleName">RDPTools</data><data key="nodeType">M</data><data key="comment">calling ProbeMatch with the default reference file or without reference file</data></node><node id="M.KBaseNetworks.build_first_neighbor_network"><data key="typeName">build_first_neighbor_network</data><data key="name">M.KBaseNetworks.build_first_neighbor_network</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">M</data><data key="comment">Returns a "first-neighbor" network constructed based on a given list of datasets. A first-neighbor network contains 
"source" nodes and all other nodes that have at least one interaction with the "source" nodes. 
Only interactions of given types are considered.    
          list&lt;string&gt; dataset_ids - List of dataset identifiers to be used for building a network
       list&lt;string&gt; entity_ids - List of entity identifiers to be used as source nodes
          list&lt;edge_type&gt; edge_types - List of possible edge types to be considered for building a network</data></node><node id="D.InvocationService.command_desc"><data key="typeName">command_desc</data><data key="name">D.InvocationService.command_desc</data><data key="moduleName">InvocationService</data><data key="nodeType">D</data><data key="comment">* Description of a command. Contains the command name and a link to documentation.</data></node><node id="D.KBaseTrees.ws_tree_id"><data key="typeName">ws_tree_id</data><data key="name">D.KBaseTrees.ws_tree_id</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">A workspace ID that references a Tree data object.
@id ws KBaseTrees.Tree</data></node><node id="D.KBaseFile.singlelib_id"><data key="typeName">singlelib_id</data><data key="name">D.KBaseFile.singlelib_id</data><data key="moduleName">KBaseFile</data><data key="nodeType">D</data><data key="comment">A workspace id for a single end library.
@id ws KBaseFile.SingleEndLibrary</data></node><node id="D.KBaseCommunities.MetagenomeSet"><data key="typeName">MetagenomeSet</data><data key="name">D.KBaseCommunities.MetagenomeSet</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.InvocationService.exit_session"><data key="typeName">exit_session</data><data key="name">M.InvocationService.exit_session</data><data key="moduleName">InvocationService</data><data key="nodeType">M</data><data key="comment">* Exit the session.</data></node><node id="D.GWAS.RunGWASParams"><data key="typeName">RunGWASParams</data><data key="name">D.GWAS.RunGWASParams</data><data key="moduleName">GWAS</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.KBaseNetworks.all_datasets"><data key="typeName">all_datasets</data><data key="name">M.KBaseNetworks.all_datasets</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">M</data><data key="comment">Returns a list of all datasets that can be used to create a network</data></node><node id="M.GWAS.variations_to_genes"><data key="typeName">variations_to_genes</data><data key="name">M.GWAS.variations_to_genes</data><data key="moduleName">GWAS</data><data key="nodeType">M</data><data key="comment">gwas_variations_to_genes gets genes close to the SNPs</data></node><node id="M.AbstractHandle.upload_metadata"><data key="typeName">upload_metadata</data><data key="name">M.AbstractHandle.upload_metadata</data><data key="moduleName">AbstractHandle</data><data key="nodeType">M</data><data key="comment">The upload_metadata function uploads metadata to an existing
handle. This means that the data that the handle represents
has already been uploaded. Uploading meta data before the data
has been uploaded is not currently supported.

[client_implemented]</data></node><node id="D.ExpressionServices.person_id"><data key="typeName">person_id</data><data key="name">D.ExpressionServices.person_id</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Kbase Person ID</data></node><node id="M.AbstractHandle.is_readable"><data key="typeName">is_readable</data><data key="name">M.AbstractHandle.is_readable</data><data key="moduleName">AbstractHandle</data><data key="nodeType">M</data><data key="comment">Given a handle id, this function queries the underlying
data store to see if the data being referred to is
readable to by the caller.</data></node><node id="D.KBaseGeneFamilies.DomainModel"><data key="typeName">DomainModel</data><data key="name">D.KBaseGeneFamilies.DomainModel</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">D</data><data key="comment">accession - accession of domain model (e.g., PF00244.1, or COG0001)
cdd_id - (optional) in case of CDD it's inner id which is reported by rps-blast program
name - name of domain model
description - description of domain model
length - length of profile
model_type - domain model type
trusted_cutoff - (optional) trusted cutoff of domain model for HMM libraries
@optional cdd_id trusted_cutoff</data></node><node id="D.KBaseFBA.fbamodel_ref"><data key="typeName">fbamodel_ref</data><data key="name">D.KBaseFBA.fbamodel_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to metabolic model
@id ws KBaseFBA.FBAModel</data></node><node id="D.ExpressionServices.gse_errors"><data key="typeName">gse_errors</data><data key="name">D.ExpressionServices.gse_errors</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">List of GSE level errors</data></node><node id="D.KBaseExpression.expression_data_samples_map"><data key="typeName">expression_data_samples_map</data><data key="name">D.KBaseExpression.expression_data_samples_map</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Mapping between sampleID and ExpressionDataSample</data></node><node id="M.UserAndJobState.create_and_start_job"><data key="typeName">create_and_start_job</data><data key="name">M.UserAndJobState.create_and_start_job</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Create and start a job.</data></node><node id="D.ProbabilisticAnnotation.CalculateParams"><data key="typeName">CalculateParams</data><data key="name">D.ProbabilisticAnnotation.CalculateParams</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">Input parameters for the "calculate" function.

            probanno_id probanno - ID of ProbAnno object
            workspace_id probanno_workspace - ID of workspace where ProbAnno object is stored
            bool verbose - True to print verbose messages</data></node><node id="M.ExpressionServices.get_top_changers"><data key="typeName">get_top_changers</data><data key="name">M.ExpressionServices.get_top_changers</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">Takes in comparison results. Direction must equal 'up', 'down', or 'both'.  Count is the number of changers returned in each direction.
returns SampleComparisonMapping {numerator_sample_id(or label)-&gt;{denominator_sample_id(or label)-&gt;{feature_id(or label) -&gt; log2Ratio (note that the features listed will be limited to the top changers)}}}</data></node><node id="D.KBaseSearch.FeatureSetElement"><data key="typeName">FeatureSetElement</data><data key="name">D.KBaseSearch.FeatureSetElement</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">This type represents an element of a GenomeSet.
Either ref or data is defined for an element, but not both.
@optional metadata
@optional ref
@optional data</data></node><node id="D.ExpressionServices.SampleAnnotation"><data key="typeName">SampleAnnotation</data><data key="name">D.ExpressionServices.SampleAnnotation</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Data structure for top level information for sample annotation and ontology</data></node><node id="D.KBaseOntology.evidence_code"><data key="typeName">evidence_code</data><data key="name">D.KBaseOntology.evidence_code</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment">A code for evidence</data></node><node id="D.KBaseBiochem.source_id"><data key="typeName">source_id</data><data key="name">D.KBaseBiochem.source_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Source ID
@id external</data></node><node id="D.KBaseFBA.gapfillsol_id"><data key="typeName">gapfillsol_id</data><data key="name">D.KBaseFBA.gapfillsol_id</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Gapfill solution ID
@id external</data></node><node id="D.KBaseFBA.FBACompoundBound"><data key="typeName">FBACompoundBound</data><data key="name">D.KBaseFBA.FBACompoundBound</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">FBACompoundBound object</data></node><node id="D.KBasePhenotypes.phenotypeset_id"><data key="typeName">phenotypeset_id</data><data key="name">D.KBasePhenotypes.phenotypeset_id</data><data key="moduleName">KBasePhenotypes</data><data key="nodeType">D</data><data key="comment">PhenotypeSet ID
@id kb</data></node><node id="D.GenomeAnnotation.genomeTO"><data key="typeName">genomeTO</data><data key="name">D.GenomeAnnotation.genomeTO</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment">All of the information about particular genome</data></node><node id="D.KBaseGwasData.shock_ref"><data key="typeName">shock_ref</data><data key="name">D.KBaseGwasData.shock_ref</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">A reference to Variation fastq  object</data></node><node id="M.KBaseExpression.get_expression_samples_descriptions"><data key="typeName">get_expression_samples_descriptions</data><data key="name">M.KBaseExpression.get_expression_samples_descriptions</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a List of SampleIDs, returns a Hash (key : SampleID, value: Description of Sample)</data></node><node id="D.Inferelator.cmonkey_run_result_ref"><data key="typeName">cmonkey_run_result_ref</data><data key="name">D.Inferelator.cmonkey_run_result_ref</data><data key="moduleName">Inferelator</data><data key="nodeType">D</data><data key="comment">Represents KBase gene identifier
@id ws Cmonkey.CmonkeyRunResult</data></node><node id="D.Ontology.Domain"><data key="typeName">Domain</data><data key="name">D.Ontology.Domain</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">Captures which branch of knowledge the GO terms refers to e.g. "biological_process", "molecular_function", "cellular_component" etc.</data></node><node id="D.KBaseBiochem.compoundset_id"><data key="typeName">compoundset_id</data><data key="name">D.KBaseBiochem.compoundset_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Compound set ID
@id external</data></node><node id="M.KBaseNetworks.taxon2datasets"><data key="typeName">taxon2datasets</data><data key="name">M.KBaseNetworks.taxon2datasets</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">M</data><data key="comment">Returns a list of all datasets that can be used to build a network for a particular genome represented by NCBI taxonomy id. 
       taxon taxon - NCBI taxonomy id</data></node><node id="D.KBaseExpression.series_string_map"><data key="typeName">series_string_map</data><data key="name">D.KBaseExpression.series_string_map</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Mapping between sample id and corresponding value.   Used as return for get_series_(titles,summaries,designs,external_source_ids)</data></node><node id="M.Transform.convert"><data key="typeName">convert</data><data key="name">M.Transform.convert</data><data key="moduleName">Transform</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseProteinStructure.md5_ids_t"><data key="typeName">md5_ids_t</data><data key="name">D.KBaseProteinStructure.md5_ids_t</data><data key="moduleName">KBaseProteinStructure</data><data key="nodeType">D</data><data key="comment">list of protein MD5s</data></node><node id="D.Tree.position"><data key="typeName">position</data><data key="name">D.Tree.position</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">integer number indicating a 1-based position in an amino acid / nucleotide sequence</data></node><node id="D.KBaseExpression.feature_sample_measurement_mapping"><data key="typeName">feature_sample_measurement_mapping</data><data key="name">D.KBaseExpression.feature_sample_measurement_mapping</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">mapping between FeatureIds and the mappings between samples and log2level mapping</data></node><node id="D.KBaseGeneFamilies.model_type"><data key="typeName">model_type</data><data key="name">D.KBaseGeneFamilies.model_type</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">D</data><data key="comment">enum: PSSM, HMM-Family, HMM-Domain, HMM-Repeat, HMM-Motif</data></node><node id="D.KBasePhenotypes.media_ref"><data key="typeName">media_ref</data><data key="name">D.KBasePhenotypes.media_ref</data><data key="moduleName">KBasePhenotypes</data><data key="nodeType">D</data><data key="comment">Reference to a mapping object
@id ws KBaseBiochem.Media</data></node><node id="M.Workspace.list_modules"><data key="typeName">list_modules</data><data key="name">M.Workspace.list_modules</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">List typespec modules.</data></node><node id="D.ExpressionServices.meta_data_only"><data key="typeName">meta_data_only</data><data key="name">D.ExpressionServices.meta_data_only</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Single integer 1= metaDataOnly, 0 means returns data</data></node><node id="D.ProbabilisticAnnotation.GetProbannoParams"><data key="typeName">GetProbannoParams</data><data key="name">D.ProbabilisticAnnotation.GetProbannoParams</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">Inputs for get_probanno function.
probanno_id probanno - ID for probanno object
workspace_id probanno_workspace - ID for workspace in which ProbAnno object is held.</data></node><node id="D.Tree.newick_tree"><data key="typeName">newick_tree</data><data key="name">D.Tree.newick_tree</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">Trees are represented in KBase by default in newick format (http://en.wikipedia.org/wiki/Newick_format)
and are returned to you in this format by default.</data></node><node id="M.Tree.draw_html_tree"><data key="typeName">draw_html_tree</data><data key="name">M.Tree.draw_html_tree</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">Given a tree structure in newick, render it in HTML/JAVASCRIPT and return the page as a string. display_options
provides a way to pass parameters to the tree rendering algorithm, but currently no options are recognized.</data></node><node id="D.ExpressionServices.expression_sample_ids"><data key="typeName">expression_sample_ids</data><data key="name">D.ExpressionServices.expression_sample_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">list of expression sample ids</data></node><node id="D.KBaseGenomes.MetagenomeAnnotationOTUFunction"><data key="typeName">MetagenomeAnnotationOTUFunction</data><data key="name">D.KBaseGenomes.MetagenomeAnnotationOTUFunction</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Structure for the "MetagenomeAnnotationOTUFunction" object

list&lt;string&gt; reference_genes - list of genes associated with hit
string functional_role - annotated function
string kbid - kbase ID of OTU function in metagenome
int abundance - number of hits with associated role and OTU
float confidence - confidence of functional role hit
string confidence_type - type of functional role hit

            @searchable ws_subset id abundance confidence functional_role</data></node><node id="M.NarrativeJobService.status"><data key="typeName">status</data><data key="name">M.NarrativeJobService.status</data><data key="moduleName">NarrativeJobService</data><data key="nodeType">M</data><data key="comment">Simply check the status of this service to see queue details</data></node><node id="M.Workspace.ver"><data key="typeName">ver</data><data key="name">M.Workspace.ver</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Returns the version of the workspace service.</data></node><node id="D.KBaseNetworks.InteractionSet"><data key="typeName">InteractionSet</data><data key="name">D.KBaseNetworks.InteractionSet</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">D</data><data key="comment">Represents a set of interactions
string id - interaction set identifier
string name - interaction set name
                string type - interaction set type. If specified, all interactions are expected to be of the same type.
\                string description - interaction set description
                DatasetSource source - source
                list&lt;taxon&gt; taxons - taxons
              list&lt;Interaction&gt; interactions - list of interactions

               @optional description type taxons</data></node><node id="D.KBaseGenomes.MetagenomeAnnotation"><data key="typeName">MetagenomeAnnotation</data><data key="name">D.KBaseGenomes.MetagenomeAnnotation</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Structure for the "MetagenomeAnnotation" object

        string type - type of metagenome object
        string name - name of metagenome object
        string kbid - KBase ID of metagenome object
        string source_id - ID used in metagenome source
        string source - source of metagenome data
        string confidence_type - type of confidence score
        list&lt;MetagenomeAnnotationOTU&gt; otus - list of otus in metagenome
        
    @searchable ws_subset type name id source_id source confidence_type otus.[*].(id,name,source_id,source,functions.[*].(id,abundance,confidence,functional_role))
        @metadata ws type as Type
        @metadata ws name as Name
        @metadata ws source_id as Source ID
        @metadata ws source as Source
        @metadata ws length(otus) as Number OTUs</data></node><node id="D.Cmonkey.gene_id"><data key="typeName">gene_id</data><data key="name">D.Cmonkey.gene_id</data><data key="moduleName">Cmonkey</data><data key="nodeType">D</data><data key="comment">Represents KBase gene identifier
@id external</data></node><node id="D.PROM.genome_id"><data key="typeName">genome_id</data><data key="name">D.PROM.genome_id</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">A KBase ID for a genome</data></node><node id="D.KBaseFBA.compartment_ref"><data key="typeName">compartment_ref</data><data key="name">D.KBaseFBA.compartment_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a compartment object
@id subws KBaseBiochem.Biochemistry.compartments.[*].id</data></node><node id="M.GenomeAnnotation.call_features_strep_suis_repeat"><data key="typeName">call_features_strep_suis_repeat</data><data key="name">M.GenomeAnnotation.call_features_strep_suis_repeat</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Interface to Strep repeats and "boxes" tools</data></node><node id="D.ExpressionServices.ExpressionReplicateGroup"><data key="typeName">ExpressionReplicateGroup</data><data key="name">D.ExpressionServices.ExpressionReplicateGroup</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Simple Grouping of Samples that belong to the same replicate group.  ExpressionReplicateGroup yuped object.

@searchable ws_subset id expression_sample_ids</data></node><node id="M.ExpressionServices.get_expression_samples_data_by_genome_ids"><data key="typeName">get_expression_samples_data_by_genome_ids</data><data key="name">M.ExpressionServices.get_expression_samples_data_by_genome_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a list of Genomes, a SampleType ( controlled vocabulary : microarray, RNA-Seq, qPCR, or proteomics) 
and a int indicating WildTypeOnly (1 = true, 0 = false) , it returns a GenomeExpressionDataSamplesMapping   ,  
GenomeId -&gt; StrainId -&gt; ExpressionDataSample.  StrainId -&gt; ExpressionSampleDataStructure {genome_id -&gt; {strain_id -&gt; {sample_id -&gt; expressionSampleDataStructure}}}</data></node><node id="M.GenomeAnnotation.call_features_CDS_glimmer3"><data key="typeName">call_features_CDS_glimmer3</data><data key="name">M.GenomeAnnotation.call_features_CDS_glimmer3</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseGenomes.co_occurring_fid"><data key="typeName">co_occurring_fid</data><data key="name">D.KBaseGenomes.co_occurring_fid</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Structure for co-occurring fids (from CDMI API)</data></node><node id="M.Tree.get_tree"><data key="typeName">get_tree</data><data key="name">M.Tree.get_tree</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">Returns the specified tree in the specified format, or an empty string if the tree does not exist.
The options hash provides a way to return the tree with different labels replaced or with different attached meta
information.  Currently, the available flags and understood options are listed below. 

    options = [
        format =&gt; 'newick',
        newick_label =&gt; 'none' || 'raw' || 'feature_id' || 'protein_sequence_id' ||
                        'contig_sequence_id' || 'best_feature_id' || 'best_genome_id',
        newick_bootstrap =&gt; 'none' || 'internal_node_labels'
        newick_distance =&gt; 'none' || 'raw'
    ];
 
The 'format' key indicates what string format the tree should be returned in.  Currently, there is only
support for 'newick'. The default value if not specified is 'newick'.

The 'newick_label' key only affects trees returned as newick format, and specifies what should be
placed in the label of each leaf.  'none' indicates that no label is added, so you get the structure
of the tree only.  'raw' indicates that the raw label mapping the leaf to an alignement row is used.
'feature_id' indicates that the label will have an examplar feature_id in each label (typically the
feature that was originally used to define the sequence). Note that exemplar feature_ids are not
defined for all trees, so this may result in an empty tree! 'protein_sequence_id' indicates that the
kbase id of the protein sequence used in the alignment is used.  'contig_sequence_id' indicates that
the contig sequence id is added.  Note that trees are typically built with protein sequences OR
contig sequences. If you select one type of sequence, but the tree was built with the other type, then
no labels will be added.  'best_feature_id' is used in the frequent case where a protein sequence has
been mapped to multiple feature ids, and an example feature_id is used.  Similarly, 'best_genome_id'
replaces the labels with the best example genome_id.  The default value if none is specified is 'raw'.

The 'newick_bootstrap' key allows control over whether bootstrap values are returned if they exist, and
how they are returned.  'none' indicates that no bootstrap values are returned. 'internal_node_labels'
indicates that bootstrap values are returned as internal node labels.  Default value is 'internal_node_labels';

The 'newick_distance' key allows control over whether distance labels are generated or not.  If set to
'none', no distances will be output. Default is 'raw', which outputs the distances exactly as they appeared
when loaded into KBase.</data></node><node id="D.KBasePPI.InteractionDetectionType"><data key="typeName">InteractionDetectionType</data><data key="name">D.KBasePPI.InteractionDetectionType</data><data key="moduleName">KBasePPI</data><data key="nodeType">D</data><data key="comment">A method for experimentally detecting and/or annotating PPI
@optional kb_id</data></node><node id="D.KBaseGeneFamilies.annotation_element"><data key="typeName">annotation_element</data><data key="name">D.KBaseGeneFamilies.annotation_element</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">D</data><data key="comment">domain_accession model - reference to domain model
domain_cluster_ref parent_ref - optional reference to parent cluster (containing data 
        describing some common set of genomes)
mapping&lt;genome_ref,list&lt;domain_cluster_element&gt;&gt; data - list of entrances of this domain 
        into different genomes (domain_cluster_element -&gt; ;
        domain_place -&gt; tuple&lt;int start_in_feature,int stop_in_feature,float evalue,
                float bitscore,float domain_coverage&gt;).
ws_alignment_id msa_ref - reference to multiple alignment object where all domain 
        sequences are collected (keys in this MSA object are constructed according to this 
        pattern: &lt;genome_ref&gt;_&lt;feature_id&gt;_&lt;start_in_feature&gt;), field is not set in case
        clusters are stored inside DomainClusterSearchResult object, use 'msas' field of
        DomainClusterSearchResult object instead.
@optional parent_ref
@optional msa_ref
        typedef structure {
domain_accession model;
domain_cluster_ref parent_ref;
mapping&lt;genome_ref,list&lt;domain_cluster_element&gt;&gt; data;
ws_alignment_id msa_ref;
        } DomainCluster;</data></node><node id="D.GenomeAnnotation.special_protein_hit"><data key="typeName">special_protein_hit</data><data key="name">D.GenomeAnnotation.special_protein_hit</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.HandleMngr.is_readable"><data key="typeName">is_readable</data><data key="name">M.HandleMngr.is_readable</data><data key="moduleName">HandleMngr</data><data key="nodeType">M</data><data key="comment">The is_readable function will return true if the
underlying shock object is readable by the owner of the
token. The token is passed by the client.</data></node><node id="D.KBaseExpression.series_expression_data_samples_mapping"><data key="typeName">series_expression_data_samples_mapping</data><data key="name">D.KBaseExpression.series_expression_data_samples_mapping</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">mapping between seriesIDs and all Samples it contains</data></node><node id="D.ExpressionServices.external_source_id"><data key="typeName">external_source_id</data><data key="name">D.ExpressionServices.external_source_id</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">externalSourceId (could be for Platform, Sample or Series)(typically maps to a GPL, GSM or GSE from GEO)</data></node><node id="D.KBaseGwasData.GwasPopulation"><data key="typeName">GwasPopulation</data><data key="name">D.KBaseGwasData.GwasPopulation</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">GwasPopulation object stores metadata for each ecotype/germplasm in the population

      genome - details of genome
      GwasPopulation_description - A brief description of  the population
      observation_unit_details - list of observation_unit_details 
      originator - Lab or PI
      pubmed_id - Pubmed id related to the population
      comment - comment
     Search indexing: Index everything</data></node><node id="D.KBaseExpression.gsm_errors"><data key="typeName">gsm_errors</data><data key="name">D.KBaseExpression.gsm_errors</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">List of GSM level errors</data></node><node id="D.KBaseAssembly.AssemblyReport"><data key="typeName">AssemblyReport</data><data key="name">D.KBaseAssembly.AssemblyReport</data><data key="moduleName">KBaseAssembly</data><data key="nodeType">D</data><data key="comment">@optional log server_url user job_id</data></node><node id="D.KBaseGwasData.topvariationGenelistUnit"><data key="typeName">topvariationGenelistUnit</data><data key="name">D.KBaseGwasData.topvariationGenelistUnit</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">TopVariation -Genelist Unit</data></node><node id="D.KBaseBiochem.modelcompound_id"><data key="typeName">modelcompound_id</data><data key="name">D.KBaseBiochem.modelcompound_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Model compound ID
@id external</data></node><node id="M.UserAndJobState.update_job"><data key="typeName">update_job</data><data key="name">M.UserAndJobState.update_job</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Update the status for a job.</data></node><node id="D.KBaseAssembly.bool"><data key="typeName">bool</data><data key="name">D.KBaseAssembly.bool</data><data key="moduleName">KBaseAssembly</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseBiochem.biochemstruct_id"><data key="typeName">biochemstruct_id</data><data key="name">D.KBaseBiochem.biochemstruct_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Biochemistry structure ID
@id kb</data></node><node id="D.KBaseFile.SingleEndLibrary"><data key="typeName">SingleEndLibrary</data><data key="name">D.KBaseFile.SingleEndLibrary</data><data key="moduleName">KBaseFile</data><data key="nodeType">D</data><data key="comment">A library of single end reads.
lib - the reads
strain - information about the genetic source
source - information about the source of this data
sequencing_tech - the technology used to sequence the genetic information
read_count - the number of reads in the this dataset
read_size - the total size of the reads, in bases
gc_content - the GC content of the reads.
single_genome - true or missing if the reads are from a single genome.
    False if the reads are from a metagenome.

@optional gc_content source strain read_count read_size single_genome
@metadata ws strain.genus
@metadata ws strain.species
@metadata ws strain.strain
@metadata ws strain.ncbi_taxid
@metadata ws source.source
@metadata ws source.source_id
@metadata ws source.project_id
@metadata ws read_count
@metadata ws read_size
@metadata ws gc_content
@metadata ws sequencing_tech
@metadata ws single_genome</data></node><node id="D.KBaseGenomes.Fasta_ref"><data key="typeName">Fasta_ref</data><data key="name">D.KBaseGenomes.Fasta_ref</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Reference to a fasta file in shock
@id shock</data></node><node id="D.KBaseGwasData.GwasPopulationTrait_obj_id"><data key="typeName">GwasPopulationTrait_obj_id</data><data key="name">D.KBaseGwasData.GwasPopulationTrait_obj_id</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">A reference to GWAS population trait object
     @id ws  KBaseGwasData.GwasPopulationTrait</data></node><node id="D.KBaseProteinStructure.PDBMatches"><data key="typeName">PDBMatches</data><data key="name">D.KBaseProteinStructure.PDBMatches</data><data key="moduleName">KBaseProteinStructure</data><data key="nodeType">D</data><data key="comment">list of match records</data></node><node id="D.MAK.MAK_network_id"><data key="typeName">MAK_network_id</data><data key="name">D.MAK.MAK_network_id</data><data key="moduleName">MAK</data><data key="nodeType">D</data><data key="comment">Represents WS MAKBiclusterSet identifier
id subws MAK.MAKBiclusterSet</data></node><node id="M.KBaseExpression.get_expression_series_titles"><data key="typeName">get_expression_series_titles</data><data key="name">M.KBaseExpression.get_expression_series_titles</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a List of SeriesIDs, returns a Hash (key : SeriesID, value: Title of Series)</data></node><node id="D.NarrativeJobService.service_method"><data key="typeName">service_method</data><data key="name">D.NarrativeJobService.service_method</data><data key="moduleName">NarrativeJobService</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.AbstractHandle.ids_to_handles"><data key="typeName">ids_to_handles</data><data key="name">M.AbstractHandle.ids_to_handles</data><data key="moduleName">AbstractHandle</data><data key="nodeType">M</data><data key="comment">Given a list of node ids, this function returns
a list of handles.</data></node><node id="M.ExpressionServices.get_expression_samples_data_by_experiment_meta_ids"><data key="typeName">get_expression_samples_data_by_experiment_meta_ids</data><data key="name">M.ExpressionServices.get_expression_samples_data_by_experiment_meta_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a list of ExperimentMetaIDs returns mapping of {experimentMetaID -&gt; {experimentalUnitId -&gt; {sample_id -&gt; expressionSampleDataStructure}}}</data></node><node id="D.UserAndJobState.service_name"><data key="typeName">service_name</data><data key="name">D.UserAndJobState.service_name</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">A service name. Alphanumerics and the underscore are allowed.</data></node><node id="M.BAMBI.find_motifs"><data key="typeName">find_motifs</data><data key="name">M.BAMBI.find_motifs</data><data key="moduleName">BAMBI</data><data key="nodeType">M</data><data key="comment">Search motifs for a given sequence set. When job is done, a reference to a BambiRunResult can be 
obtained from UserAndJobState service using a provided job_id.

workspace_id target_ws_id - target workspace id to place results to
ws_sequence_set_ref sequenceset_ref - workspace id of the input set of sequences        

BambiRunParameters params - parameters of BAMBI run</data></node><node id="M.KBaseExpression.get_expression_data_by_feature_ids"><data key="typeName">get_expression_data_by_feature_ids</data><data key="name">M.KBaseExpression.get_expression_data_by_feature_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a list of FeatureIDs, a SampleType ( controlled vocabulary : microarray, RNA-Seq, qPCR, or proteomics) 
and an int indicating WildType Only (1 = true, 0 = false) returns a FeatureSampleMeasurementMapping: {featureID-&gt;{sample_id-&gt;measurement}}</data></node><node id="D.KBasePhenotypes.feature_ref"><data key="typeName">feature_ref</data><data key="name">D.KBasePhenotypes.feature_ref</data><data key="moduleName">KBasePhenotypes</data><data key="nodeType">D</data><data key="comment">Reference to a feature of a genome object
@id subws KBaseGenomes.Genome.features.[*].id</data></node><node id="D.KBaseFBA.ClassifierResult"><data key="typeName">ClassifierResult</data><data key="name">D.KBaseFBA.ClassifierResult</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseFBA.ActivatedReaction"><data key="typeName">ActivatedReaction</data><data key="name">D.KBaseFBA.ActivatedReaction</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">ActivatedReaction object holds data on a reaction activated by gapfilling analysis

@optional round</data></node><node id="D.ExpressionServices.strain_ids"><data key="typeName">strain_ids</data><data key="name">D.ExpressionServices.strain_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">list of KBase StrainIDs</data></node><node id="M.MAK.runsingle_MAK_job_from_ws"><data key="typeName">runsingle_MAK_job_from_ws</data><data key="name">M.MAK.runsingle_MAK_job_from_ws</data><data key="moduleName">MAK</data><data key="nodeType">M</data><data key="comment">Starts MAK server job and returns job ID of the run
string ws_id - workspace id
tring kbgid - kbase genome id kbgid
MAKBicluster makb - starting point bicluster
string job_id - identifier of MAK job</data></node><node id="M.MOTranslation.map_to_fid_fast"><data key="typeName">map_to_fid_fast</data><data key="name">M.MOTranslation.map_to_fid_fast</data><data key="moduleName">MOTranslation</data><data key="nodeType">M</data><data key="comment">Performs the same function as map_to_fid, except it does not require protein sequences to be defined. Instead, it assumes
genomes are identical and simply looks for genes on the same strand that overlap by at least 50%. Since no sequences are
compared, this method is fast.  But, since no sequences are compared, this method only makes sense for identical genomes</data></node><node id="D.ExpressionServices.GsmObject"><data key="typeName">GsmObject</data><data key="name">D.ExpressionServices.GsmObject</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">GSM OBJECT</data></node><node id="D.KBasePhenotypes.genome_ref"><data key="typeName">genome_ref</data><data key="name">D.KBasePhenotypes.genome_ref</data><data key="moduleName">KBasePhenotypes</data><data key="nodeType">D</data><data key="comment">Reference to a feature of a genome object
@id ws KBaseGenomes.Genome</data></node><node id="D.KBaseFBA.TintleProbabilitySample"><data key="typeName">TintleProbabilitySample</data><data key="name">D.KBaseFBA.TintleProbabilitySample</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">collection of tintle probability scores for each feature in a genome,
representing a single gene probability sample</data></node><node id="D.KBaseTrees.scientific_name"><data key="typeName">scientific_name</data><data key="name">D.KBaseTrees.scientific_name</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">A string representation of the scientific name of a species.</data></node><node id="D.Inferelator.InferelatorHit"><data key="typeName">InferelatorHit</data><data key="name">D.Inferelator.InferelatorHit</data><data key="moduleName">Inferelator</data><data key="nodeType">D</data><data key="comment">Represents a single interaction found by Inferelator
gene_id tf_id - id of regulatory gene
string bicluster_id - id of bicluster
double coeff - coefficient</data></node><node id="D.ExpressionServices.series_expression_data_samples_mapping"><data key="typeName">series_expression_data_samples_mapping</data><data key="name">D.ExpressionServices.series_expression_data_samples_mapping</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">mapping between seriesIDs and all Samples it contains</data></node><node id="D.KBaseExpression.ExpressionSample"><data key="typeName">ExpressionSample</data><data key="name">D.KBaseExpression.ExpressionSample</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Data structure for the workspace expression sample.  The Expression Sample typed object.

protocol, persons and strain should need to eventually have common ws objects.  I will make expression ones for now.
RMA_normalized (1 = true, non 1 = false)

we may need a link to experimentMetaID later.

@optional description title data_quality_level original_median expression_ontology_terms platform_id default_control_sample characteristics
@optional averaged_from_samples protocol strain persons molecule data_source shock_url processing_comments expression_series_ids RMA_normalized

@searchable ws_subset id source_id type data_quality_level genome_id platform_id description title data_source characteristics keys_of(expression_levels) 
@searchable ws_subset persons.[*].email persons.[*].last_name persons.[*].institution  
@searchable ws_subset strain.genome_id strain.reference_strain strain.wild_type          
@searchable ws_subset protocol.name protocol.description 
@searchable ws_subset expression_ontology_terms.[*].expression_ontology_term_id expression_ontology_terms.[*].expression_ontology_term_name</data></node><node id="D.KBaseGenomes.function_probability"><data key="typeName">function_probability</data><data key="name">D.KBaseGenomes.function_probability</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">A function_probability is a (annotation, probability) pair associated with a gene
An annotation is a "///"-delimited list of roles that could be associated with that gene.</data></node><node id="D.KBaseFBA.modelcompartment_ref"><data key="typeName">modelcompartment_ref</data><data key="name">D.KBaseFBA.modelcompartment_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a compartment object in a model
@id subws KBaseFBA.FBAModel.modelcompartments.[*].id</data></node><node id="D.Workspace.object_path"><data key="typeName">object_path</data><data key="name">D.Workspace.object_path</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">A path into an object. 
Identify a sub portion of an object by providing the path, delimited by
a slash (/), to that portion of the object. Thus the path may not have
slashes in the structure or mapping keys. Examples:
/foo/bar/3 - specifies the bar key of the foo mapping and the 3rd
        entry of the array if bar maps to an array or the value mapped to
        the string "3" if bar maps to a map.
/foo/bar/[*]/baz - specifies the baz field of all the objects in the
        list mapped by the bar key in the map foo.
/foo/asterisk/baz - specifies the baz field of all the objects in the
        values of the foo mapping. Swap 'asterisk' for * in the path.</data></node><node id="D.ExpressionServices.series_string_map"><data key="typeName">series_string_map</data><data key="name">D.ExpressionServices.series_string_map</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Mapping between sample id and corresponding value.   Used as return for get_series_(titles,summaries,designs,external_source_ids)</data></node><node id="D.KBaseTrees.AlignmentMetaData"><data key="typeName">AlignmentMetaData</data><data key="name">D.KBaseTrees.AlignmentMetaData</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">Meta data associated with an alignment.

    list&lt;kbase_id&gt; tree_ids - the set of trees that were built from this alignment
    string status - set to 'active' if this is the latest alignment for a particular set of sequences
    string sequence_type - indicates what type of sequence is aligned (e.g. protein vs. dna)
    boolean is_concatenation - true if the alignment is based on the concatenation of multiple non-contiguous
                            sequences, false if each row cooresponds to exactly one sequence (possibly with gaps)
    timestamp date_created - time at which the alignment was built/loaded in seconds since the epoch
    int n_rows - number of rows in the alignment
    int n_cols - number of columns in the alignment
    string alignment_construction_method - the name of the software tool used to build the alignment
    string alignment_construction_parameters - set of non-default parameters used to construct the alignment
    string alignment_protocol - simple free-form text which may provide additional details of how the alignment was built
    string source_db - the source database where this alignment originated, if one exists
    string source_id - the id of this alignment in an external database, if one exists</data></node><node id="D.Communities.DataType"><data key="typeName">DataType</data><data key="name">D.Communities.DataType</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment">Data type , is controlled vocabulary. e.g. AbundanceData , Genome, Metagenome, ...</data></node><node id="D.KBaseFBA.FBATintleResult"><data key="typeName">FBATintleResult</data><data key="name">D.KBaseFBA.FBATintleResult</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">FBATintleResult object</data></node><node id="D.ExpressionServices.contact_first_name"><data key="typeName">contact_first_name</data><data key="name">D.ExpressionServices.contact_first_name</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">First Name of GSM contact person</data></node><node id="D.ExpressionServices.experiment_meta_expression_data_samples_mapping"><data key="typeName">experiment_meta_expression_data_samples_mapping</data><data key="name">D.ExpressionServices.experiment_meta_expression_data_samples_mapping</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">mapping between experimentMetaIDs and ExperimentalUnitExpressionDataSamplesMapping it contains</data></node><node id="D.ProbabilisticAnnotation.timestamp"><data key="typeName">timestamp</data><data key="name">D.ProbabilisticAnnotation.timestamp</data><data key="moduleName">ProbabilisticAnnotation</data><data key="nodeType">D</data><data key="comment">Exact time for workspace operations. e.g. 2012-12-17T23:24:06</data></node><node id="D.ERDB_Service.filterClause"><data key="typeName">filterClause</data><data key="name">D.ERDB_Service.filterClause</data><data key="moduleName">ERDB_Service</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.InvocationService.rename_file"><data key="typeName">rename_file</data><data key="name">M.InvocationService.rename_file</data><data key="moduleName">InvocationService</data><data key="nodeType">M</data><data key="comment">* Rename the given file.</data></node><node id="D.KBasePPI.Publication"><data key="typeName">Publication</data><data key="name">D.KBasePPI.Publication</data><data key="moduleName">KBasePPI</data><data key="nodeType">D</data><data key="comment">searchable kb_id
searchable title
@optional kb_id pubdate link title
@author JMC</data></node><node id="M.Workspace.revert_object"><data key="typeName">revert_object</data><data key="name">M.Workspace.revert_object</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Revert an object.

        The object specified in the ObjectIdentity is reverted to the version
        specified in the ObjectIdentity.</data></node><node id="D.MOTranslation.query_md5"><data key="typeName">query_md5</data><data key="name">D.MOTranslation.query_md5</data><data key="moduleName">MOTranslation</data><data key="nodeType">D</data><data key="comment">A structure for specifying the input md5 queries for the map_to_fid_fast method.  This structure assumes
you will be making queries with identical genomes, so it requires the start and stop.

        protein_id id         - arbitrary ID that must be unique within the set of query sequences
        protein md5           - the computed md5 of the protein sequence
        position start        - the start position of the start codon in the genome contig (may be a larger
                                number than stop if the gene is on the reverse strand)
        position stop         - the last position of he stop codon in the genome contig</data></node><node id="M.Workspace.administer"><data key="typeName">administer</data><data key="name">M.Workspace.administer</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">The administration interface.</data></node><node id="D.KBaseExpression.samples_string_map"><data key="typeName">samples_string_map</data><data key="name">D.KBaseExpression.samples_string_map</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Mapping between sample id and corresponding value.   Used as return for get_expression_samples_(titles,descriptions,molecules,types,external_source_ids)</data></node><node id="D.KBasePPI.DatasetSource"><data key="typeName">DatasetSource</data><data key="name">D.KBasePPI.DatasetSource</data><data key="moduleName">KBasePPI</data><data key="nodeType">D</data><data key="comment">enum: MO, EcoCyc, IntAct, or PPI</data></node><node id="D.GenomeAnnotation.similarity_parameters"><data key="typeName">similarity_parameters</data><data key="name">D.GenomeAnnotation.similarity_parameters</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.GWAS.gwas_genelist_to_networks"><data key="typeName">gwas_genelist_to_networks</data><data key="name">M.GWAS.gwas_genelist_to_networks</data><data key="moduleName">GWAS</data><data key="nodeType">M</data><data key="comment">KBaseGwasData.GeneList to Network</data></node><node id="D.KBaseExpression.gse_samples"><data key="typeName">gse_samples</data><data key="name">D.KBaseExpression.gse_samples</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Mapping of Key GSMID to GSM Object</data></node><node id="D.UserAndJobState.progress"><data key="typeName">progress</data><data key="name">D.UserAndJobState.progress</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">The amount of progress the job has made since the last update. This will
be summed to the total progress so far.</data></node><node id="D.KBaseSearch.location"><data key="typeName">location</data><data key="name">D.KBaseSearch.location</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">a "location" refers to a list of regions of DNA on contigs</data></node><node id="D.KBaseTrees.label"><data key="typeName">label</data><data key="name">D.KBaseTrees.label</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.UserAndJobState.list_state_services"><data key="typeName">list_state_services</data><data key="name">M.UserAndJobState.list_state_services</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">List all state services.</data></node><node id="D.UserAndJobState.Result"><data key="typeName">Result</data><data key="name">D.UserAndJobState.Result</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">A place where the results of a job may be found.
All fields except description are required.

string server_type - the type of server storing the results. Typically
        either "Shock" or "Workspace". No more than 100 characters.
string url - the url of the server. No more than 1000 characters.
string id - the id of the result in the server. Typically either a
        workspace id or a shock node. No more than 1000 characters.
string description - a free text description of the result.
         No more than 1000 characters.</data></node><node id="M.UserAndJobState.list_jobs"><data key="typeName">list_jobs</data><data key="name">M.UserAndJobState.list_jobs</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">List jobs. Leave 'services' empty or null to list jobs from all
services.</data></node><node id="D.KBaseTrees.abundance_profile"><data key="typeName">abundance_profile</data><data key="name">D.KBaseTrees.abundance_profile</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">map an id to a number (e.g. feature_id mapped to a log2 normalized abundance value)</data></node><node id="M.MEME.find_sites_with_mast_job_by_collection_from_ws"><data key="typeName">find_sites_with_mast_job_by_collection_from_ws</data><data key="name">M.MEME.find_sites_with_mast_job_by_collection_from_ws</data><data key="moduleName">MEME</data><data key="nodeType">M</data><data key="comment">Returns ID of job object that contains ID of MastRunResult
MAST will be run with -hit_list parameter
string ws_name - workspace id 
MastRunParameters params - parameters of MAST run</data></node><node id="D.MEME.TomtomRunResult"><data key="typeName">TomtomRunResult</data><data key="name">D.MEME.TomtomRunResult</data><data key="moduleName">MEME</data><data key="nodeType">D</data><data key="comment">Represents result of a single TOMTOM run
string id - KBase ID of TomtomRunResult
string timestamp - timestamp for creation time of TomtomRunResult
TomtomRunParameters params - run parameters
list&lt;TomtomHit&gt; hits - A list of all hits found by TOMTOM

@optional timestamp hits</data></node><node id="D.GenomeComparison.blast_proteomes_params"><data key="typeName">blast_proteomes_params</data><data key="name">D.GenomeComparison.blast_proteomes_params</data><data key="moduleName">GenomeComparison</data><data key="nodeType">D</data><data key="comment">string genome1ws - workspace of genome1
string genome1id - id of genome1
string genome2ws - workspace of genome2
string genome2id - id of genome2
float sub_bbh_percent - optional parameter, minimum percent of bit score compared to best bit score, default is 90
string max_evalue -  optional parameter, maximum evalue, default is 1e-10
string output_ws - workspace of output object
string output_id - future id of output object</data></node><node id="D.KBaseExpression.gsm_data_errors"><data key="typeName">gsm_data_errors</data><data key="name">D.KBaseExpression.gsm_data_errors</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">List of GSM Data level errors</data></node><node id="D.KBaseSearch.feature_ref"><data key="typeName">feature_ref</data><data key="name">D.KBaseSearch.feature_ref</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">@id ws KBaseGenomes.Feature</data></node><node id="D.ExpressionServices.ontology_expression_data_sample_mapping"><data key="typeName">ontology_expression_data_sample_mapping</data><data key="name">D.ExpressionServices.ontology_expression_data_sample_mapping</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">mapping between ontologyIDs (concatenated if searched for with the and operator) and all the Samples that match that term(s)</data></node><node id="M.MEME.find_sites_with_mast"><data key="typeName">find_sites_with_mast</data><data key="name">M.MEME.find_sites_with_mast</data><data key="moduleName">MEME</data><data key="nodeType">M</data><data key="comment">Returns MastRunResult containing list of MAST hits
MAST will be run with -hit_list parameter
MemePSPM query - query PSPM for MAST run
SequenceSet target - target sequences for MAST run
MastRunParameters params - parameters of MAST run</data></node><node id="D.KBaseExpression.RNASeqDifferentialExpression"><data key="typeName">RNASeqDifferentialExpression</data><data key="name">D.KBaseExpression.RNASeqDifferentialExpression</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Object for the RNASeq Differential Expression</data></node><node id="D.Tree.fasta_alignment"><data key="typeName">fasta_alignment</data><data key="name">D.Tree.fasta_alignment</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">String representation of an alignment in FASTA format.  The precise alphabet and syntax of the alignment
string is not yet specified, but will be similar to sequences stored in KBase  with '-' to denote gaps in
alignments.</data></node><node id="D.KBaseFBA.WorkspaceGenomeClassData"><data key="typeName">WorkspaceGenomeClassData</data><data key="name">D.KBaseFBA.WorkspaceGenomeClassData</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.Tree.get_alignment_ids_by_feature"><data key="typeName">get_alignment_ids_by_feature</data><data key="name">M.Tree.get_alignment_ids_by_feature</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">Given a list of feature ids in kbase, the protein sequence of each feature (if the sequence exists)
is identified and used to retrieve all alignments by ID that were built using the given protein sequence.</data></node><node id="D.ExpressionServices.series_ids"><data key="typeName">series_ids</data><data key="name">D.ExpressionServices.series_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">list of KBase Series IDs</data></node><node id="D.PROM.TFMap"><data key="typeName">TFMap</data><data key="name">D.PROM.TFMap</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">Object required by the prom_constraints object, this maps a transcription factor by its uuid (in some
annotation namespace) to a group of regulatory target genes.

    string transcriptionFactor_uuid                       - id of the TF in the annotation object namespace
    list &lt;regulatory_target&gt; transcriptionFactorMapTarget - collection of regulatory target genes for the TF
                                                            along with associated joint probabilities for each
                                                            target to be on given that the TF is on or off.

@deprecated</data></node><node id="D.KBaseSearch.coexpressed_fid"><data key="typeName">coexpressed_fid</data><data key="name">D.KBaseSearch.coexpressed_fid</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Structure for coexpressed fids (from CDMI API)</data></node><node id="M.KBaseExpression.get_expression_sample_ids_by_genome_ids"><data key="typeName">get_expression_sample_ids_by_genome_ids</data><data key="name">M.KBaseExpression.get_expression_sample_ids_by_genome_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a list of GenomeIDs, a SampleType ( controlled vocabulary : microarray, RNA-Seq, qPCR, or proteomics) 
and a int indicating WildType Only (1 = true, 0 = false) , it returns a list of Sample IDs</data></node><node id="D.KBaseOntology.OntologyTermAnnotation"><data key="typeName">OntologyTermAnnotation</data><data key="name">D.KBaseOntology.OntologyTermAnnotation</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment">Structure for OntologyTermAnnotation object
@optional ontology_type ontology_description</data></node><node id="D.Workspace.boolean"><data key="typeName">boolean</data><data key="name">D.Workspace.boolean</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">A boolean. 0 = false, other = true.</data></node><node id="D.GenomeAnnotation.feature"><data key="typeName">feature</data><data key="name">D.GenomeAnnotation.feature</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment">A feature object represents a feature on the genome. It contains 
the location on the contig with a type, the translation if it
represents a protein, associated aliases, etc. It also contains
information gathered during the annotation process that is involved
in stages that perform overlap removal, quality testing, etc.</data></node><node id="D.Workspace.object_metadata"><data key="typeName">object_metadata</data><data key="name">D.Workspace.object_metadata</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Meta data associated with an object stored in a workspace. Provided for
backwards compatibility.
        
obj_name id - name of the object.
type_string type - type of the object.
timestamp moddate - date when the object was saved
obj_ver instance - the version of the object
string command - Deprecated. Always returns the empty string.
username lastmodifier - name of the user who last saved the object,
        including copying the object
username owner - Deprecated. Same as lastmodifier.
ws_name workspace - name of the workspace in which the object is
        stored
string ref - Deprecated. Always returns the empty string.
string chsum - the md5 checksum of the object.
usermeta metadata - arbitrary user-supplied metadata about
        the object.
obj_id objid - the numerical id of the object.</data></node><node id="D.KBaseBiochem.reaction_ref"><data key="typeName">reaction_ref</data><data key="name">D.KBaseBiochem.reaction_ref</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Reference to a reaction object in a biochemistry
@id subws KBaseBiochem.Biochemistry.reactions.[*].id</data></node><node id="D.Tree.FilterParams"><data key="typeName">FilterParams</data><data key="name">D.Tree.FilterParams</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">cutoff_value                  =&gt; def: 0 || [any_valid_float_value]
use_cutoff_value              =&gt; def: 0 || 1
normalization_scope           =&gt; def:'per_column' || 'global'
normalization_type            =&gt; def:'none' || 'total' || 'mean' || 'max' || 'min'
normalization_post_process    =&gt; def:'none' || 'log10' || 'log2' || 'ln'</data></node><node id="D.ExpressionServices.FullMeasurement"><data key="typeName">FullMeasurement</data><data key="name">D.ExpressionServices.FullMeasurement</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Measurement data structure</data></node><node id="D.KBaseFBA.metagenome_ref"><data key="typeName">metagenome_ref</data><data key="name">D.KBaseFBA.metagenome_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a metagenome object
@id ws KBaseGenomes.MetagenomeAnnotation</data></node><node id="D.KBaseExpression.expression_ontology_terms"><data key="typeName">expression_ontology_terms</data><data key="name">D.KBaseExpression.expression_ontology_terms</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">list of ExpressionsOntologies</data></node><node id="D.KBaseExpression.experimental_unit_id"><data key="typeName">experimental_unit_id</data><data key="name">D.KBaseExpression.experimental_unit_id</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Kbase ExperimentalUnit ID</data></node><node id="D.ExpressionServices.experimental_unit_id"><data key="typeName">experimental_unit_id</data><data key="name">D.ExpressionServices.experimental_unit_id</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Kbase ExperimentalUnit ID</data></node><node id="D.MOTranslation.query_sequence"><data key="typeName">query_sequence</data><data key="name">D.MOTranslation.query_sequence</data><data key="moduleName">MOTranslation</data><data key="nodeType">D</data><data key="comment">A structure for specifying the input sequence queries for the map_to_fid method.  This structure, for
now, assumes you will be making queries with identical genomes, so it requires the start and stop.  In the
future, if this assumption is relaxed, then start and stop will be optional parameters.  We should probably
also add an MD5 string which can optionally be provided so that we don't have to compute it on the fly.

        protein_id id         - arbitrary ID that must be unique within the set of query sequences
        protein_sequence seq  - the one letter code AA sequence of the protein
        position start        - the start position of the start codon in the genome contig (may be a larger
                                number than stop if the gene is on the reverse strand)
        position stop         - the last position of he stop codon in the genome contig</data></node><node id="D.Workspace.CreateWorkspaceParams"><data key="typeName">CreateWorkspaceParams</data><data key="name">D.Workspace.CreateWorkspaceParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Input parameters for the "create_workspace" function.

        Required arguments:
        ws_name workspace - name of the workspace to be created.
        
        Optional arguments:
        permission globalread - 'r' to set the new workspace globally readable,
                default 'n'.
        string description - A free-text description of the new workspace, 1000
                characters max. Longer strings will be mercilessly and brutally
                truncated.
        usermeta meta - arbitrary user-supplied metadata for the workspace.</data></node><node id="D.MAK.FloatDataTable"><data key="typeName">FloatDataTable</data><data key="name">D.MAK.FloatDataTable</data><data key="moduleName">MAK</data><data key="nodeType">D</data><data key="comment">Represents data for a single data table, convention is biological features on y-axis and samples etc. on x
string id - identifier for data table
string name - name or title to display in a plot etc.
list&lt;string&gt; row_ids - kb ids for the objects
list&lt;string&gt; row_labels - label text to display
list&lt;string&gt; row_groups - group labels for row
list&lt;string&gt; row_groups_ids - kb ids for group objects
list&lt;string&gt; column_ids - kb ids for the objects
list&lt;string&gt; column_labels - label text to display
list&lt;string&gt; column_groups - group labels for columns
list&lt;string&gt; column_groups_ids - kb ids for group objects
list&lt;list&lt;float&gt;&gt; data - a list of rows of floats, non-numeric values represented as 'null'

@optional id
@optional name
@optional row_ids
@optional row_groups
@optional row_groups_ids
@optional column_ids
@optional column_groups
@optional column_groups_ids</data></node><node id="M.KBaseExpression.get_expression_samples_original_log2_medians"><data key="typeName">get_expression_samples_original_log2_medians</data><data key="name">M.KBaseExpression.get_expression_samples_original_log2_medians</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a List of SampleIDs, returns a Hash (key : SampleID, value: OriginalLog2Median of Sample)</data></node><node id="M.Workspace.list_referencing_object_counts"><data key="typeName">list_referencing_object_counts</data><data key="name">M.Workspace.list_referencing_object_counts</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">List the number of times objects have been referenced.

This count includes both provenance and object-to-object references
and, unlike list_referencing_objects, includes objects that are
inaccessible to the user.</data></node><node id="D.GenomeAnnotation.variant"><data key="typeName">variant</data><data key="name">D.GenomeAnnotation.variant</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseTrees.viz_val_int"><data key="typeName">viz_val_int</data><data key="name">D.KBaseTrees.viz_val_int</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KmerAnnotationByFigfam.dna_hit"><data key="typeName">dna_hit</data><data key="name">D.KmerAnnotationByFigfam.dna_hit</data><data key="moduleName">KmerAnnotationByFigfam</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.MOTranslation.fid"><data key="typeName">fid</data><data key="name">D.MOTranslation.fid</data><data key="moduleName">MOTranslation</data><data key="nodeType">D</data><data key="comment">fid is a feature id in KBase.</data></node><node id="M.KmerEval.check_contig_set"><data key="typeName">check_contig_set</data><data key="name">M.KmerEval.check_contig_set</data><data key="moduleName">KmerEval</data><data key="nodeType">M</data><data key="comment"></data></node><node id="M.KBaseExpression.get_expression_sample_ids_by_strain_ids"><data key="typeName">get_expression_sample_ids_by_strain_ids</data><data key="name">M.KBaseExpression.get_expression_sample_ids_by_strain_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a list of Strains, and a SampleType, it returns a list of Sample IDs</data></node><node id="D.KBaseCommunities.Table2DString"><data key="typeName">Table2DString</data><data key="name">D.KBaseCommunities.Table2DString</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Workspace.obj_name"><data key="typeName">obj_name</data><data key="name">D.Workspace.obj_name</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">A string used as a name for an object.
Any string consisting of alphanumeric characters and the characters
        |._- that is not an integer is acceptable.</data></node><node id="D.KBaseFBA.biomass_id"><data key="typeName">biomass_id</data><data key="name">D.KBaseFBA.biomass_id</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Biomass reaction ID
@id external</data></node><node id="D.KBaseNarrative.Cell"><data key="typeName">Cell</data><data key="name">D.KBaseNarrative.Cell</data><data key="moduleName">KBaseNarrative</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.KBaseExpression.get_expression_samples_types"><data key="typeName">get_expression_samples_types</data><data key="name">M.KBaseExpression.get_expression_samples_types</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">given a List of SampleIDs, returns a Hash (key : SampleID, value: Type of Sample)</data></node><node id="D.Communities.Project"><data key="typeName">Project</data><data key="name">D.Communities.Project</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KmerEval.otu_set"><data key="typeName">otu_set</data><data key="name">D.KmerEval.otu_set</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.IDServerAPI.kbase_ids_to_external_ids"><data key="typeName">kbase_ids_to_external_ids</data><data key="name">M.IDServerAPI.kbase_ids_to_external_ids</data><data key="moduleName">IDServerAPI</data><data key="nodeType">M</data><data key="comment">Given a set of KBase identifiers, look up the associated external identifiers.
If no external ID is associated with the KBase id, no entry will be present in the return.</data></node><node id="D.GenomeAnnotation.md5"><data key="typeName">md5</data><data key="name">D.GenomeAnnotation.md5</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseFBA.QuantOptSolution"><data key="typeName">QuantOptSolution</data><data key="name">D.KBaseFBA.QuantOptSolution</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KmerEval.frames"><data key="typeName">frames</data><data key="name">D.KmerEval.frames</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseFBA.fbamodel_id"><data key="typeName">fbamodel_id</data><data key="name">D.KBaseFBA.fbamodel_id</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">FBAModel ID
@id kb</data></node><node id="D.KBaseTrees.MSA"><data key="typeName">MSA</data><data key="name">D.KBaseTrees.MSA</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">Type for multiple sequence alignment.
sequence_type - 'protein' in case sequences are amino acids, 'dna' in case of 
        nucleotides.
int alignment_length - number of columns in alignment.
mapping&lt;row_id, sequence&gt; alignment - mapping from sequence id to aligned sequence.
list&lt;row_id&gt; row_order - list of sequence ids defining alignment order (optional). 
ws_alignment_id parent_msa_ref - reference to parental alignment object to which 
        this object adds some new aligned sequences (it could be useful in case of
        profile alignments where you don't need to insert new gaps in original msa).
@optional name description sequence_type
@optional trim_info alignment_attributes row_order 
@optional default_row_labels ws_refs kb_refs
@optional parent_msa_ref</data></node><node id="M.KmerEval.call_prot_with_kmers"><data key="typeName">call_prot_with_kmers</data><data key="name">M.KmerEval.call_prot_with_kmers</data><data key="moduleName">KmerEval</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseTrees.parent_md5"><data key="typeName">parent_md5</data><data key="name">D.KBaseTrees.parent_md5</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.KmerEval.call_dna_with_kmers"><data key="typeName">call_dna_with_kmers</data><data key="name">M.KmerEval.call_dna_with_kmers</data><data key="moduleName">KmerEval</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.MEME.MemePSPM"><data key="typeName">MemePSPM</data><data key="name">D.MEME.MemePSPM</data><data key="moduleName">MEME</data><data key="nodeType">D</data><data key="comment">Represents a position-specific probability matrix fot MEME motif
string id - KBase ID of the matrix object
string source_id - KBase ID of source object
string description - description of motif
string alphabet - ALPHABET field of MEME output ("ACGT" for nucleotide motifs)
int width - width of motif
int nsites - number of sites
float evalue - E-value of motif
list&lt;list&lt;float&gt;&gt; matrix - The letter probability matrix is a table of probabilities where the rows are positions in the motif and the columns are letters in the alphabet. The columns are ordered alphabetically so for DNA the first column is A, the second is C, the third is G and the last is T.

@optional source_id description width nsites evalue</data></node><node id="D.PROM.auth_token"><data key="typeName">auth_token</data><data key="name">D.PROM.auth_token</data><data key="moduleName">PROM</data><data key="nodeType">D</data><data key="comment">The string representation of the bearer token needed to authenticate on the workspace service, this will eventually
be eliminated when this service is updated to use the auto type-compiler auth functionality</data></node><node id="M.KBaseExpression.get_expression_sample_ids_by_sample_external_source_ids"><data key="typeName">get_expression_sample_ids_by_sample_external_source_ids</data><data key="name">M.KBaseExpression.get_expression_sample_ids_by_sample_external_source_ids</data><data key="moduleName">KBaseExpression</data><data key="nodeType">M</data><data key="comment">get sample ids by the sample's external source id : Takes a list of sample external source ids, and returns a list of sample ids</data></node><node id="D.GenomeAnnotation.analysis_event_id"><data key="typeName">analysis_event_id</data><data key="name">D.GenomeAnnotation.analysis_event_id</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseFBA.templatebiomass_id"><data key="typeName">templatebiomass_id</data><data key="name">D.KBaseFBA.templatebiomass_id</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Template biomass ID
@id external</data></node><node id="M.ExpressionServices.get_expression_series_summaries"><data key="typeName">get_expression_series_summaries</data><data key="name">M.ExpressionServices.get_expression_series_summaries</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a List of SeriesIDs, returns a Hash (key : SeriesID, value: Summary of Series)</data></node><node id="D.ExpressionServices.ExpressionSample"><data key="typeName">ExpressionSample</data><data key="name">D.ExpressionServices.ExpressionSample</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Data structure for the workspace expression sample.  The Expression Sample typed object.

protocol, persons and strain should need to eventually have common ws objects.  I will make expression ones for now.

we may need a link to experimentMetaID later.

@optional description title data_quality_level original_median expression_ontology_terms platform_id default_control_sample 
@optional averaged_from_samples protocol strain persons molecule data_source characteristics

@searchable ws_subset id source_id type data_quality_level genome_id platform_id description title data_source characteristics keys_of(expression_levels) 
@searchable ws_subset persons.[*].email persons.[*].last_name persons.[*].institution  
@searchable ws_subset strain.genome_id strain.reference_strain strain.wild_type          
@searchable ws_subset protocol.name protocol.description 
@searchable ws_subset expression_ontology_terms.[*].expression_ontology_term_id expression_ontology_terms.[*].expression_ontology_term_name</data></node><node id="D.Tree.abundance_data"><data key="typeName">abundance_data</data><data key="name">D.Tree.abundance_data</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">map the name of the profile with the profile data</data></node><node id="D.KBaseFBA.modelcompartment_id"><data key="typeName">modelcompartment_id</data><data key="name">D.KBaseFBA.modelcompartment_id</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Model compartment ID
@id external</data></node><node id="D.InvocationService.directory"><data key="typeName">directory</data><data key="name">D.InvocationService.directory</data><data key="moduleName">InvocationService</data><data key="nodeType">D</data><data key="comment">* A directory entry. Used as the return from list_files.</data></node><node id="D.KBaseExpression.contact_first_name"><data key="typeName">contact_first_name</data><data key="name">D.KBaseExpression.contact_first_name</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">First Name of GSM contact person</data></node><node id="D.KBaseFBA.bool"><data key="typeName">bool</data><data key="name">D.KBaseFBA.bool</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBasePPI.ProteinID"><data key="typeName">ProteinID</data><data key="name">D.KBasePPI.ProteinID</data><data key="moduleName">KBasePPI</data><data key="nodeType">D</data><data key="comment">@id kb</data></node><node id="M.KBaseTrees.draw_html_tree"><data key="typeName">draw_html_tree</data><data key="name">M.KBaseTrees.draw_html_tree</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Given a tree structure in newick, render it in HTML/JAVASCRIPT and return the page as a string. display_options
provides a way to pass parameters to the tree rendering algorithm, but currently no options are recognized.</data></node><node id="M.Workspace.get_type_info"><data key="typeName">get_type_info</data><data key="name">M.Workspace.get_type_info</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseBiochem.biomass_id"><data key="typeName">biomass_id</data><data key="name">D.KBaseBiochem.biomass_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Genome ID
@id external</data></node><node id="D.ExpressionServices.experimental_unit_expression_data_samples_mapping"><data key="typeName">experimental_unit_expression_data_samples_mapping</data><data key="name">D.ExpressionServices.experimental_unit_expression_data_samples_mapping</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">mapping between experimentalUnitIDs and all Samples it contains</data></node><node id="M.GenomeAnnotation.call_features_scan_for_matches"><data key="typeName">call_features_scan_for_matches</data><data key="name">M.GenomeAnnotation.call_features_scan_for_matches</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.KBaseFBA.modelcompound_id"><data key="typeName">modelcompound_id</data><data key="name">D.KBaseFBA.modelcompound_id</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Model compound ID
@id external</data></node><node id="D.KBaseGwasData.populationUnit"><data key="typeName">populationUnit</data><data key="name">D.KBaseGwasData.populationUnit</data><data key="moduleName">KBaseGwasData</data><data key="nodeType">D</data><data key="comment">Population Unit</data></node><node id="D.KBaseExpression.strain_id"><data key="typeName">strain_id</data><data key="name">D.KBaseExpression.strain_id</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">KBase StrainID</data></node><node id="D.ExpressionServices.ExpressionDataSample"><data key="typeName">ExpressionDataSample</data><data key="name">D.ExpressionServices.ExpressionDataSample</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Data structure for all the top level metadata and value data for an expression sample.  Essentially a expression Sample object.</data></node><node id="D.KBaseGenomes.annotation"><data key="typeName">annotation</data><data key="name">D.KBaseGenomes.annotation</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">a notation by a curator of the genome object</data></node><node id="D.Tree.timestamp"><data key="typeName">timestamp</data><data key="name">D.Tree.timestamp</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">time in units of number of seconds since the epoch</data></node><node id="D.Tree.abundance_profile"><data key="typeName">abundance_profile</data><data key="name">D.Tree.abundance_profile</data><data key="moduleName">Tree</data><data key="nodeType">D</data><data key="comment">map an id to a number (e.g. feature_id mapped to a log2 normalized abundance value)</data></node><node id="D.ERDB_Service.SQLstring"><data key="typeName">SQLstring</data><data key="name">D.ERDB_Service.SQLstring</data><data key="moduleName">ERDB_Service</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.Tree.extract_node_names"><data key="typeName">extract_node_names</data><data key="name">M.Tree.extract_node_names</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">Given a tree in newick format, list the names of ALL the nodes.  Note that for some trees, such as
those originating from MicrobesOnline, the names of internal nodes may be bootstrap values, but will still
be returned by this function.</data></node><node id="D.KBaseCommunities.URI"><data key="typeName">URI</data><data key="name">D.KBaseCommunities.URI</data><data key="moduleName">KBaseCommunities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.Workspace.grant_module_ownership"><data key="typeName">grant_module_ownership</data><data key="name">M.Workspace.grant_module_ownership</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Grant ownership of a module. You must have grant ability on the
module.</data></node><node id="M.MEME.get_pspm_collection_from_meme_result"><data key="typeName">get_pspm_collection_from_meme_result</data><data key="name">M.MEME.get_pspm_collection_from_meme_result</data><data key="moduleName">MEME</data><data key="nodeType">M</data><data key="comment">Converts MemeRunResult into MemePSPMCollection 
MemeRunResult meme_run_result - source MemeRunResult</data></node><node id="M.GenomeAnnotation.create_genome_from_RAST"><data key="typeName">create_genome_from_RAST</data><data key="name">M.GenomeAnnotation.create_genome_from_RAST</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">M</data><data key="comment">* Create a new genome object based on a RAST genome.</data></node><node id="D.KBaseTrees.trim_info"><data key="typeName">trim_info</data><data key="name">D.KBaseTrees.trim_info</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseFBA.FBAPromResult"><data key="typeName">FBAPromResult</data><data key="name">D.KBaseFBA.FBAPromResult</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">FBAPromResult object</data></node><node id="M.PROM.create_prom_constraints"><data key="typeName">create_prom_constraints</data><data key="name">M.PROM.create_prom_constraints</data><data key="moduleName">PROM</data><data key="nodeType">M</data><data key="comment">This method creates a set of Prom constraints for a given genome annotation based on a regulatory network
and a collection of gene expression data stored on a workspace.  Parameters are specified in the
create_prom_constraints_parameters object.  A status object is returned indicating success or failure along
with a message on what went wrong or statistics on the retrieved objects.  If the method was successful, the
ID of the new Prom constraints object is also returned. The Prom constraints can then be used in conjunction
with an FBA model using FBA Model Services.</data></node><node id="D.ProteinInfo.domains"><data key="typeName">domains</data><data key="name">D.ProteinInfo.domains</data><data key="moduleName">ProteinInfo</data><data key="nodeType">D</data><data key="comment">Domains are a list of domain_ids.</data></node><node id="D.KBaseSearch.genome_ref"><data key="typeName">genome_ref</data><data key="name">D.KBaseSearch.genome_ref</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">@id ws KBaseGenomes.Genome</data></node><node id="D.KBaseSearch.Ontology"><data key="typeName">Ontology</data><data key="name">D.KBaseSearch.Ontology</data><data key="moduleName">KBaseSearch</data><data key="nodeType">D</data><data key="comment">Structure for Ontology object

@optional evidence_codes</data></node><node id="D.KBaseGenomes.Feature"><data key="typeName">Feature</data><data key="name">D.KBaseGenomes.Feature</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Structure for a single feature of a genome
    
    Should genome_id contain the genome_id in the Genome object,
    the workspace id of the Genome object, a genomeref,
    something else?
    Should sequence be in separate objects too?
    We may want to add additional fields for other CDM functions
    (e.g., atomic regulons, coexpressed fids, co_occurring fids,...)

    @optional orthologs quality feature_creation_event md5 location function protein_translation protein_families subsystems publications subsystem_data aliases annotations regulon_data atomic_regulons coexpressed_fids co_occurring_fids dna_sequence protein_translation_length dna_sequence_length</data></node><node id="D.ExpressionServices.sample_ids"><data key="typeName">sample_ids</data><data key="name">D.ExpressionServices.sample_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">List of KBase Sample IDs</data></node><node id="M.NarrativeJobService.ver"><data key="typeName">ver</data><data key="name">M.NarrativeJobService.ver</data><data key="moduleName">NarrativeJobService</data><data key="nodeType">M</data><data key="comment">Returns the current running version of the NarrativeJobService.</data></node><node id="M.Tree.filter_abundance_profile"><data key="typeName">filter_abundance_profile</data><data key="name">M.Tree.filter_abundance_profile</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">ORDER OF OPERATIONS:
1) using normalization scope, defines whether process should occur per column or globally over every column
2) using normalization type, normalize by dividing values by the option indicated
3) apply normalization post process if set (ie take log of the result)
4) apply the cutoff_value threshold to all records, eliminating any that are not above the specified threshold
5) apply the cutoff_number_of_records (always applies per_column!!!), discarding any record that are not in the top N record values for that column

- if a value is not a valid number, it is ignored</data></node><node id="D.KBaseFBA.FBAMinimalReactionsResult"><data key="typeName">FBAMinimalReactionsResult</data><data key="name">D.KBaseFBA.FBAMinimalReactionsResult</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">FBAMinimalReactionsResult object</data></node><node id="M.IDServerAPI.allocate_id_range"><data key="typeName">allocate_id_range</data><data key="name">M.IDServerAPI.allocate_id_range</data><data key="moduleName">IDServerAPI</data><data key="nodeType">M</data><data key="comment">Allocate a set of identifiers. This allows efficient registration of a large
number of identifiers (e.g. several thousand features in a genome).

The return is the first identifier allocated.</data></node><node id="D.KBaseOntology.Ontology"><data key="typeName">Ontology</data><data key="name">D.KBaseOntology.Ontology</data><data key="moduleName">KBaseOntology</data><data key="nodeType">D</data><data key="comment">Structure for Ontology object

@optional evidence_codes gene_list</data></node><node id="D.Workspace.RenameWorkspaceParams"><data key="typeName">RenameWorkspaceParams</data><data key="name">D.Workspace.RenameWorkspaceParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Input parameters for the 'rename_workspace' function.

Required arguments:
WorkspaceIdentity wsi - the workspace to rename.
ws_name new_name - the new name for the workspace.</data></node><node id="D.KBaseTrees.substructure"><data key="typeName">substructure</data><data key="name">D.KBaseTrees.substructure</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseRegulation.Effector"><data key="typeName">Effector</data><data key="name">D.KBaseRegulation.Effector</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents an effector (inducer) that can activate or deactivate regulator
effector_id effector_id - identifier of effector
string effector_class - effector class
string effector_name - effector name</data></node><node id="M.KBaseTrees.get_tree_ids_by_feature"><data key="typeName">get_tree_ids_by_feature</data><data key="name">M.KBaseTrees.get_tree_ids_by_feature</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Given a list of feature ids in kbase, the protein sequence of each feature (if the sequence exists)
is identified and used to retrieve all trees by ID that were built using the given protein seqence.</data></node><node id="D.KBaseBiochem.MapReaction"><data key="typeName">MapReaction</data><data key="name">D.KBaseBiochem.MapReaction</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">MapReaction object

@optional link</data></node><node id="D.KBaseNetworks.Network"><data key="typeName">Network</data><data key="name">D.KBaseNetworks.Network</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">D</data><data key="comment">Represents a network
string id - A unique  identifier of a network 
        string name - String representation of a network. It should be a concise but informative representation that is easy for a person to read.
list&lt;Edge&gt; edges - A list of all edges in a network
list&lt;Node&gt; nodes - A list of all nodes in a network
list&lt;Dataset&gt; datasets - A list of all datasets used to build a network
mapping&lt;string,string&gt; properties - Other properties of a network
mapping&lt;string,string&gt; user_annotations - User annotations of a network</data></node><node id="D.ExpressionServices.data_expression_levels_for_sample"><data key="typeName">data_expression_levels_for_sample</data><data key="name">D.ExpressionServices.data_expression_levels_for_sample</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">mapping kbase feature id as the key and measurement as the value</data></node><node id="M.MAK.search_MAK_results_from_cds"><data key="typeName">search_MAK_results_from_cds</data><data key="name">M.MAK.search_MAK_results_from_cds</data><data key="moduleName">MAK</data><data key="nodeType">M</data><data key="comment">Starts MAK server job for searching precomputed biclusters from the CDS and returns job ID of the run
string ws_id - workspace id
string kbgid - kbase genome id kbgid
list&lt;string&gt; geneids - list of kb gene ids
MAKBiclusterSet set - MAKBiclusterSet</data></node><node id="D.KBaseExpression.sample_measurement_mapping"><data key="typeName">sample_measurement_mapping</data><data key="name">D.KBaseExpression.sample_measurement_mapping</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">mapping kbase sample id as the key and a single measurement (for a specified feature id, one mapping higher) as the value</data></node><node id="D.GenomeAnnotation.role"><data key="typeName">role</data><data key="name">D.GenomeAnnotation.role</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.Ontology.GoTermInfo"><data key="typeName">GoTermInfo</data><data key="name">D.Ontology.GoTermInfo</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseBiochem.reactionset_id"><data key="typeName">reactionset_id</data><data key="name">D.KBaseBiochem.reactionset_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Reaction set ID
@id external</data></node><node id="D.Inferelator.GeneList"><data key="typeName">GeneList</data><data key="name">D.Inferelator.GeneList</data><data key="moduleName">Inferelator</data><data key="nodeType">D</data><data key="comment">Represents a list of gene ids
string id - workspace name of the list
string source_id - id of source genome
string description
list &lt;gene_id&gt; genes; - list of gene ids 

@optional description</data></node><node id="D.KBaseGenomes.regulon_data"><data key="typeName">regulon_data</data><data key="name">D.KBaseGenomes.regulon_data</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Structure for regulon data (from CDMI API)</data></node><node id="D.KBaseBiochem.MapReactionReactant"><data key="typeName">MapReactionReactant</data><data key="name">D.KBaseBiochem.MapReactionReactant</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">MapReactionReactant object</data></node><node id="M.ExpressionServices.get_expression_sample_ids_by_ontology_ids"><data key="typeName">get_expression_sample_ids_by_ontology_ids</data><data key="name">M.ExpressionServices.get_expression_sample_ids_by_ontology_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a list of ontologyIDs, AndOr operator (and requires sample to have all ontology IDs, or sample has to have any of the terms), GenomeId, 
SampleType ( controlled vocabulary : microarray, RNA-Seq, qPCR, or proteomics), wildTypeOnly returns a list of SampleIDs</data></node><node id="D.Communities.Library"><data key="typeName">Library</data><data key="name">D.Communities.Library</data><data key="moduleName">Communities</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.KBaseFBA.Trainingset_ref"><data key="typeName">Trainingset_ref</data><data key="name">D.KBaseFBA.Trainingset_ref</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Reference to a training set object
@id ws KBaseFBA.ClassifierTrainingSet</data></node><node id="D.UserAndJobState.job_id"><data key="typeName">job_id</data><data key="name">D.UserAndJobState.job_id</data><data key="moduleName">UserAndJobState</data><data key="nodeType">D</data><data key="comment">A job id.</data></node><node id="M.Workspace.get_objectmeta"><data key="typeName">get_objectmeta</data><data key="name">M.Workspace.get_objectmeta</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Retrieves the metadata for a specified object from the specified
workspace. Provides access to metadata for all versions of the object
via the instance parameter. Provided for backwards compatibility.

@deprecated Workspace.get_object_info</data></node><node id="M.AbstractHandle.delete_handles"><data key="typeName">delete_handles</data><data key="name">M.AbstractHandle.delete_handles</data><data key="moduleName">AbstractHandle</data><data key="nodeType">M</data><data key="comment">The delete_handles function takes a list of handles
and deletes them on the handle service server.</data></node><node id="D.KBaseTrees.boolean"><data key="typeName">boolean</data><data key="name">D.KBaseTrees.boolean</data><data key="moduleName">KBaseTrees</data><data key="nodeType">D</data><data key="comment">Indicates true or false values, false = 0, true = 1
@range [0,1]</data></node><node id="D.MEME.TomtomRunParameters"><data key="typeName">TomtomRunParameters</data><data key="name">D.MEME.TomtomRunParameters</data><data key="moduleName">MEME</data><data key="nodeType">D</data><data key="comment">Contains parameters of a TOMTOM run
meme_pspm_collection_ref query_ref - query motifs for TOMTOM run
meme_pspm_collection_ref target_ref - target motifs for TOMTOM run
string pspm_id - KBase ID of a MemePSPM from the query collection that will be used. When empty string provided, all motifs in the query collection will be used
float thresh - thresh parameter of TOMTOM run, must be smaller than or equal to 1.0 unless evalueTomtom == 1
int evalue - evalue parameter of TOMTOM run (accepable values are "0" and "1")
string dist - value of dist parameter of TOMTOM run (accepable values are "allr", "ed", "kullback", "pearson", "sandelin")
int internal - internal parameter of TOMTOM run (accepable values are "0" and "1")
int min_overlap - value of min-overlap parameter of TOMTOM run. In case a query motif is smaller than minOverlapTomtom specified, then the motif's width is used as the minimum overlap for that query.

@optional query_ref target_ref pspm_id thresh evalue dist internal min_overlap</data></node><node id="M.Tree.compute_abundance_profile"><data key="typeName">compute_abundance_profile</data><data key="name">M.Tree.compute_abundance_profile</data><data key="moduleName">Tree</data><data key="nodeType">M</data><data key="comment">Given an input KBase tree built from a sequence alignment, a metagenomic sample, and a protein family, this method
will tabulate the number of reads that match to every leaf of the input tree.  First, a set of assembled reads from
a metagenomic sample are pulled from the KBase communities service which have been determined to be a likely hit
to the specified protein family.  Second, the sequences aligned to generate the tree are retrieved.  Third, UCLUST [1]
is used to map reads to target sequences of the tree.  Finally, for each leaf in the tree, the number of hits matching
the input search criteria is tabulated and returned.  See the defined objects 'abundance_params' and 'abundance_result'
for additional details on specifying the input parameters and handling the results.

[1] Edgar, R.C. (2010) Search and clustering orders of magnitude faster than BLAST, Bioinformatics 26(19), 2460-2461.</data></node><node id="M.KBaseTrees.get_alignment"><data key="typeName">get_alignment</data><data key="name">M.KBaseTrees.get_alignment</data><data key="moduleName">KBaseTrees</data><data key="nodeType">M</data><data key="comment">Returns the specified alignment in the specified format, or an empty string if the alignment does not exist.
The options hash provides a way to return the alignment with different labels replaced or with different attached meta
information.  Currently, the available flags and understood options are listed below. 

    options = [
        format =&gt; 'fasta',
        sequence_label =&gt; 'none' || 'raw' || 'feature_id' || 'protein_sequence_id' || 'contig_sequence_id',
    ];
 
The 'format' key indicates what string format the alignment should be returned in.  Currently, there is only
support for 'fasta'. The default value if not specified is 'fasta'.

The 'sequence_label' specifies what should be placed in the label of each sequence.  'none' indicates that
no label is added, so you get the sequence only.  'raw' indicates that the raw label of the alignement row
is used. 'feature_id' indicates that the label will have an examplar feature_id in each label (typically the
feature that was originally used to define the sequence). Note that exemplar feature_ids are not
defined for all alignments, so this may result in an unlabeled alignment.  'protein_sequence_id' indicates
that the kbase id of the protein sequence used in the alignment is used.  'contig_sequence_id' indicates that
the contig sequence id is used.  Note that trees are typically built with protein sequences OR
contig sequences. If you select one type of sequence, but the alignment was built with the other type, then
no labels will be added.  The default value if none is specified is 'raw'.</data></node><node id="D.KmerEval.function"><data key="typeName">function</data><data key="name">D.KmerEval.function</data><data key="moduleName">KmerEval</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.IDServerAPI.external_db"><data key="typeName">external_db</data><data key="name">D.IDServerAPI.external_db</data><data key="moduleName">IDServerAPI</data><data key="nodeType">D</data><data key="comment">Each external database is represented using a short string. Microbes Online is "MOL",
the SEED is "SEED", etc.</data></node><node id="M.UserAndJobState.get_state"><data key="typeName">get_state</data><data key="name">M.UserAndJobState.get_state</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Get the state of a key for a service.</data></node><node id="M.RDPTools.probematch_check"><data key="typeName">probematch_check</data><data key="name">M.RDPTools.probematch_check</data><data key="moduleName">RDPTools</data><data key="nodeType">M</data><data key="comment"></data></node><node id="D.Ontology.Enrichment"><data key="typeName">Enrichment</data><data key="name">D.Ontology.Enrichment</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">A composite data structure to capture ontology enrichment type object</data></node><node id="D.KBaseExpression.RNASeqSamplesMetaData"><data key="typeName">RNASeqSamplesMetaData</data><data key="name">D.KBaseExpression.RNASeqSamplesMetaData</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Complete List of RNASeq MetaData</data></node><node id="D.KBaseExpression.sample_comparison_mapping"><data key="typeName">sample_comparison_mapping</data><data key="name">D.KBaseExpression.sample_comparison_mapping</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">mapping Sample Id for the numerator to a DenominatorSampleComparison.  This is the comparison data structure {NumeratorSampleId-&gt;{denominatorLabel -&gt; {feature -&gt; log2ratio}}}</data></node><node id="D.KBaseFBA.FBAMetaboliteProductionResult"><data key="typeName">FBAMetaboliteProductionResult</data><data key="name">D.KBaseFBA.FBAMetaboliteProductionResult</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">FBAMetaboliteProductionResult object</data></node><node id="D.ExpressionServices.ExpressionSeries"><data key="typeName">ExpressionSeries</data><data key="name">D.ExpressionServices.ExpressionSeries</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Data structure for the workspace expression series.  The ExpressionSeries typed object.
publication should need to eventually have ws objects, will not include it for now.

@optional title summary design publication_id 

@searchable ws_subset id source_id publication_id title summary design genome_expression_sample_ids_map</data></node><node id="M.KBaseNetworks.network_type2datasets"><data key="typeName">network_type2datasets</data><data key="name">M.KBaseNetworks.network_type2datasets</data><data key="moduleName">KBaseNetworks</data><data key="nodeType">M</data><data key="comment">Returns a list of all datasets that can be used to build a network of a given type.
          network_type networkType - The type of network</data></node><node id="D.KBaseBiochem.structure_id"><data key="typeName">structure_id</data><data key="name">D.KBaseBiochem.structure_id</data><data key="moduleName">KBaseBiochem</data><data key="nodeType">D</data><data key="comment">Compound structure ID
@id external</data></node><node id="D.IDServerAPI.kbase_id_prefix"><data key="typeName">kbase_id_prefix</data><data key="name">D.IDServerAPI.kbase_id_prefix</data><data key="moduleName">IDServerAPI</data><data key="nodeType">D</data><data key="comment">A KBase identifier prefix. This is a string that starts with "kb|" and includes either a
single type designator (e.g. "kb|g") or is a prefix for a hierarchical identifier (e.g.
"kb|g.1234.fp").</data></node><node id="D.AskKB.row"><data key="typeName">row</data><data key="name">D.AskKB.row</data><data key="moduleName">AskKB</data><data key="nodeType">D</data><data key="comment"></data></node><node id="M.Workspace.delete_objects"><data key="typeName">delete_objects</data><data key="name">M.Workspace.delete_objects</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Delete objects. All versions of an object are deleted, regardless of
the version specified in the ObjectIdentity.</data></node><node id="D.KBaseRegulation.regulog_id"><data key="typeName">regulog_id</data><data key="name">D.KBaseRegulation.regulog_id</data><data key="moduleName">KBaseRegulation</data><data key="nodeType">D</data><data key="comment">Represents regulog identifier</data></node><node id="D.KBaseExpression.shock_ref"><data key="typeName">shock_ref</data><data key="name">D.KBaseExpression.shock_ref</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">A reference to RNASeq fastq  object</data></node><node id="D.ExpressionServices.sample_comparison_mapping"><data key="typeName">sample_comparison_mapping</data><data key="name">D.ExpressionServices.sample_comparison_mapping</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">mapping Sample Id for the numerator to a DenominatorSampleComparison.  This is the comparison data structure {NumeratorSampleId-&gt;{denominatorLabel -&gt; {feature -&gt; log2ratio}}}</data></node><node id="D.KBaseExpression.RNASeqDifferentialExpressionSet"><data key="typeName">RNASeqDifferentialExpressionSet</data><data key="name">D.KBaseExpression.RNASeqDifferentialExpressionSet</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">list of RNASeqDifferentialExpression files</data></node><node id="M.InvocationService.remove_directory"><data key="typeName">remove_directory</data><data key="name">M.InvocationService.remove_directory</data><data key="moduleName">InvocationService</data><data key="nodeType">M</data><data key="comment">* Remove a directory.</data></node><node id="D.TaxonomyTranslation.Translations"><data key="typeName">Translations</data><data key="name">D.TaxonomyTranslation.Translations</data><data key="moduleName">TaxonomyTranslation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.ExpressionServices.experiment_meta_ids"><data key="typeName">experiment_meta_ids</data><data key="name">D.ExpressionServices.experiment_meta_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">list of KBase ExperimentMeta IDs</data></node><node id="M.ExpressionServices.get_expression_samples_data"><data key="typeName">get_expression_samples_data</data><data key="name">M.ExpressionServices.get_expression_samples_data</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">core function used by many others.  Given a list of KBase SampleIds returns mapping of SampleId to expressionSampleDataStructure (essentially the core Expression Sample Object) : 
{sample_id -&gt; expressionSampleDataStructure}</data></node><node id="M.Workspace.get_object"><data key="typeName">get_object</data><data key="name">M.Workspace.get_object</data><data key="moduleName">Workspace</data><data key="nodeType">M</data><data key="comment">Retrieves the specified object from the specified workspace.
Both the object data and metadata are returned.
Provided for backwards compatibility.

@deprecated Workspace.get_objects</data></node><node id="M.UserAndJobState.create_job"><data key="typeName">create_job</data><data key="name">M.UserAndJobState.create_job</data><data key="moduleName">UserAndJobState</data><data key="nodeType">M</data><data key="comment">Create a new job status report.</data></node><node id="M.ExpressionServices.get_expression_sample_ids_by_experiment_meta_ids"><data key="typeName">get_expression_sample_ids_by_experiment_meta_ids</data><data key="name">M.ExpressionServices.get_expression_sample_ids_by_experiment_meta_ids</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a list of ExperimentMetaIDs returns a list of Sample IDs</data></node><node id="D.ExpressionServices.ExpressionOntologyTerm"><data key="typeName">ExpressionOntologyTerm</data><data key="name">D.ExpressionServices.ExpressionOntologyTerm</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Temporary workspace typed object for ontology.  Should be replaced by a ontology workspace typed object.
Currently supports EO, PO and ENVO ontology terms.</data></node><node id="M.ExpressionServices.get_expression_series_titles"><data key="typeName">get_expression_series_titles</data><data key="name">M.ExpressionServices.get_expression_series_titles</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">given a List of SeriesIDs, returns a Hash (key : SeriesID, value: Title of Series)</data></node><node id="D.Workspace.WorkspaceIdentity"><data key="typeName">WorkspaceIdentity</data><data key="name">D.Workspace.WorkspaceIdentity</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">A workspace identifier.

                Select a workspace by one, and only one, of the numerical id or name,
                        where the name can also be a KBase ID including the numerical id,
                        e.g. kb|ws.35.
                ws_id id - the numerical ID of the workspace.
                ws_name workspace - name of the workspace or the workspace ID in KBase
                        format, e.g. kb|ws.78.</data></node><node id="M.ProteinInfo.fids_to_ipr"><data key="typeName">fids_to_ipr</data><data key="name">M.ProteinInfo.fids_to_ipr</data><data key="moduleName">ProteinInfo</data><data key="nodeType">M</data><data key="comment">fids_to_ipr takes as input a list of feature ids, and returns
a mapping of each fid to its IPR assignments. These can come from
HMMER or from non-HMM-based InterProScan results.</data></node><node id="D.ExpressionServices.contact_last_name"><data key="typeName">contact_last_name</data><data key="name">D.ExpressionServices.contact_last_name</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Last Name of GSM contact person</data></node><node id="D.Ontology.ontology_description"><data key="typeName">ontology_description</data><data key="name">D.Ontology.ontology_description</data><data key="moduleName">Ontology</data><data key="nodeType">D</data><data key="comment">GoDesc : Human readable text description of the corresponding GO term</data></node><node id="D.KBaseExpression.wild_type_only"><data key="typeName">wild_type_only</data><data key="name">D.KBaseExpression.wild_type_only</data><data key="moduleName">KBaseExpression</data><data key="nodeType">D</data><data key="comment">Single integer 1= WildTypeonly, 0 means all strains ok</data></node><node id="M.ExpressionServices.compare_samples_vs_default_controls"><data key="typeName">compare_samples_vs_default_controls</data><data key="name">M.ExpressionServices.compare_samples_vs_default_controls</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">Compares each sample vs its defined default control.  If the Default control is not specified for a sample, then nothing is returned for that sample .
Takes a list of sampleIDs returns SampleComparisonMapping {sample_id -&gt;{denominator_default_control sample_id -&gt;{feature_id -&gt; log2Ratio}}}</data></node><node id="D.GenomeAnnotation.repeat_region_SEED_parameters"><data key="typeName">repeat_region_SEED_parameters</data><data key="name">D.GenomeAnnotation.repeat_region_SEED_parameters</data><data key="moduleName">GenomeAnnotation</data><data key="nodeType">D</data><data key="comment"></data></node><node id="D.ExpressionServices.sample_type"><data key="typeName">sample_type</data><data key="name">D.ExpressionServices.sample_type</data><data key="moduleName">ExpressionServices</data><data key="nodeType">D</data><data key="comment">Sample type controlled vocabulary : microarray, RNA-Seq, qPCR, or proteomics</data></node><node id="D.KBaseGenomes.Contig_ref"><data key="typeName">Contig_ref</data><data key="name">D.KBaseGenomes.Contig_ref</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Reference to an individual contig in a ContigSet object
@id subws KBase.ContigSet.contigs.[*].id</data></node><node id="D.KBaseGenomes.ContigSet"><data key="typeName">ContigSet</data><data key="name">D.KBaseGenomes.ContigSet</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">Type spec for the "ContigSet" object

                contigset_id id - unique kbase ID of the contig set
                string name - name of the contig set
                string type - type of the contig set (values are: Genome,Transcripts,Environment,Collection)
                source_id source_id - source ID of the contig set
                string source - source of the contig set
                list&lt;Contig&gt; contigs - list of contigs in the contig set
                reads_ref reads_ref - reference to the shocknode with the rawreads from which contigs were assembled
                fasta_ref fasta_ref - reference to fasta file from which contig set were read

                @optional name type reads_ref fasta_ref
            @metadata ws type as Type
                @metadata ws source_id as Source ID
                @metadata ws source as Source
                @metadata ws name as Name
                @metadata ws length(contigs) as Number contigs</data></node><node id="D.BAMBI.ws_sequence_set_ref"><data key="typeName">ws_sequence_set_ref</data><data key="name">D.BAMBI.ws_sequence_set_ref</data><data key="moduleName">BAMBI</data><data key="nodeType">D</data><data key="comment">Workspace object id of sequence set
@id ws KBaseSequences.SequenceSet</data></node><node id="D.Workspace.ListObjectsParams"><data key="typeName">ListObjectsParams</data><data key="name">D.Workspace.ListObjectsParams</data><data key="moduleName">Workspace</data><data key="nodeType">D</data><data key="comment">Parameters for the 'list_objects' function.

                At least one of the following filters must be provided. It is strongly
                recommended that the list is restricted to the workspaces of interest,
                or the results may be very large:
                list&lt;ws_id&gt; ids - the numerical IDs of the workspaces of interest.
                list&lt;ws_name&gt; workspaces - names of the workspaces of interest or the
                        workspace IDs in KBase format, e.g. kb|ws.78.
                type_string type - type of the objects to be listed.  Here, omitting
                        version information will find any objects that match the provided
                        type - e.g. Foo.Bar-0 will match Foo.Bar-0.X where X is any
                        existing version.
                
                Optional arguments:
                permission perm - filter objects by minimum permission level. 'None'
                        and 'readable' are ignored.
                list&lt;username&gt; savedby - filter objects by the user that saved or
                        copied the object.
                usermeta meta - filter objects by the user supplied metadata. NOTE:
                        only one key/value pair is supported at this time. A full map
                        is provided as input for the possibility for expansion in the
                        future.
                timestamp after - only return objects that were created after this
                        date.
                timestamp before - only return objects that were created before this
                        date.
                boolean showDeleted - show deleted objects in workspaces to which the
                        user has write access.
                boolean showOnlyDeleted - only show deleted objects in workspaces to
                        which the user has write access.
                boolean showHidden - show hidden objects.
                boolean showAllVersions - show all versions of each object that match
                        the filters rather than only the most recent version.
                boolean includeMetadata - include the user provided metadata in the
                        returned object_info. If false (0 or null), the default, the
                        metadata will be null.
                boolean excludeGlobal - exclude objects in global workspaces. This
                        parameter only has an effect when filtering by types alone.
                int skip - skip the first X objects. Maximum value is 2^31, skip values
                        &lt; 0 are treated as 0, the default.
                int limit - limit the output to X objects. Default and maximum value
                        is 10000. Limit values &lt; 1 are treated as 10000, the default.</data></node><node id="D.KBaseFBA.modelreaction_id"><data key="typeName">modelreaction_id</data><data key="name">D.KBaseFBA.modelreaction_id</data><data key="moduleName">KBaseFBA</data><data key="nodeType">D</data><data key="comment">Model reaction ID
@id external</data></node><node id="D.KBaseGenomes.Genome_id"><data key="typeName">Genome_id</data><data key="name">D.KBaseGenomes.Genome_id</data><data key="moduleName">KBaseGenomes</data><data key="nodeType">D</data><data key="comment">KBase genome ID
@id kb</data></node><node id="M.ExpressionServices.compare_samples_vs_the_average"><data key="typeName">compare_samples_vs_the_average</data><data key="name">M.ExpressionServices.compare_samples_vs_the_average</data><data key="moduleName">ExpressionServices</data><data key="nodeType">M</data><data key="comment">Compares each numerator sample vs the average of all the denominator sampleIds.  Take a list of numerator sample IDs and a list of samples Ids to average for the denominator.
returns SampleComparisonMapping {numerator_sample_id-&gt;{denominator_sample_id -&gt;{feature_id -&gt; log2Ratio}}}</data></node><node id="D.KBaseGeneFamilies.contig_id"><data key="typeName">contig_id</data><data key="name">D.KBaseGeneFamilies.contig_id</data><data key="moduleName">KBaseGeneFamilies</data><data key="nodeType">D</data><data key="comment"></data></node><edge id="317" source="D.GenomeAnnotation.feature_quality_measure" target="D.GenomeAnnotation.feature" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="462" source="D.GenomeComparison.ws_genome_id" target="D.GenomeComparison.ProteomeComparison" label="SUBTYPE"><data key="moduleName">GenomeComparison</data></edge><edge id="461" source="D.GenomeComparison.ws_genome_id" target="D.GenomeComparison.ProteomeComparison" label="SUBTYPE"><data key="moduleName">GenomeComparison</data></edge><edge id="452" source="M.GenomeAnnotation.run_pipeline" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="90" source="D.Communities.metagenome_ref" target="D.Communities.MetagenomeSetElement" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="2024" source="D.Workspace.extracted_id" target="D.Workspace.ObjectProvenanceInfo" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2035" source="D.Workspace.extracted_id" target="D.Workspace.ObjectData" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="1140" source="D.KBaseGwasData.populationVariationUnit" target="D.KBaseGwasData.GwasPopulationSummary" label="LIST_OF"><data key="moduleName">KBaseGwasData</data></edge><edge id="777" source="D.KBaseExpression.RNASeqSampleMetaData" target="D.KBaseExpression.RNASeqSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="780" source="D.KBaseExpression.RNASeqSampleMetaData" target="D.KBaseExpression.RNASeqSampleAlignment" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="773" source="D.KBaseExpression.RNASeqSampleMetaData" target="D.KBaseExpression.RNASeqSamplesMetaData" label="LIST_OF"><data key="moduleName">KBaseExpression</data></edge><edge id="686" source="M.KBaseExpression.get_expression_samples_data_by_strain_ids" target="D.KBaseExpression.strain_expression_data_samples_mapping" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="1747" source="M.RDPTools.classifySeqs" target="D.RDPTools.Handle" label="METHOD_RETURN"><data key="moduleName">RDPTools</data></edge><edge id="1746" source="M.RDPTools.classifySeqs" target="D.RDPTools.Handle" label="METHOD_RETURN"><data key="moduleName">RDPTools</data></edge><edge id="1777" source="M.TaxonomyTranslation.get_tax_ids_by_name" target="D.TaxonomyTranslation.Tax_id" label="METHOD_RETURN"><data key="moduleName">TaxonomyTranslation</data></edge><edge id="751" source="D.KBaseExpression.ExpressionOntologyTerm" target="D.KBaseExpression.expression_ontology_terms" label="LIST_OF"><data key="moduleName">KBaseExpression</data></edge><edge id="1388" source="M.KBaseTrees.get_tree" target="D.KBaseTrees.tree" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="1449" source="D.KmerEval.genus_species" target="D.KmerEval.otu_set" label="LIST_OF"><data key="moduleName">KmerEval</data></edge><edge id="1163" source="D.KBaseNetworks.dataset_source_ref" target="M.KBaseNetworks.dataset_source2datasets" label="METHOD_PARAM"><data key="moduleName">KBaseNetworks</data></edge><edge id="1148" source="D.KBaseNetworks.dataset_source_ref" target="D.KBaseNetworks.DatasetSource" label="SUBTYPE"><data key="moduleName">KBaseNetworks</data></edge><edge id="1150" source="D.KBaseNetworks.dataset_source_ref" target="D.KBaseNetworks.Dataset" label="SUBTYPE"><data key="moduleName">KBaseNetworks</data></edge><edge id="359" source="D.GenomeAnnotation.reconstructionTO" target="M.GenomeAnnotation.reconstructionTO_to_roles" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="361" source="D.GenomeAnnotation.reconstructionTO" target="M.GenomeAnnotation.reconstructionTO_to_subsystems" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="914" source="D.KBaseFBA.FBADeletionResult" target="D.KBaseFBA.FBA" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1435" source="M.KBaseTrees.construct_species_tree" target="D.KBaseTrees.job_id" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="699" source="D.KBaseExpression.genome_id" target="M.KBaseExpression.get_expression_samples_data_by_ontology_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="704" source="D.KBaseExpression.genome_id" target="M.KBaseExpression.get_expression_sample_ids_by_ontology_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="772" source="D.KBaseExpression.genome_id" target="D.KBaseExpression.RNASeqSampleMetaData" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="618" source="D.KBaseExpression.genome_id" target="D.KBaseExpression.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="636" source="D.KBaseExpression.genome_id" target="D.KBaseExpression.genome_expression_data_samples_mapping" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="654" source="D.KBaseExpression.genome_id" target="D.KBaseExpression.gsm_data" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="614" source="D.KBaseExpression.genome_id" target="D.KBaseExpression.genome_ids" label="LIST_OF"><data key="moduleName">KBaseExpression</data></edge><edge id="240" source="D.ExpressionServices.wild_type_only" target="M.ExpressionServices.get_expression_sample_ids_by_ontology_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="226" source="D.ExpressionServices.wild_type_only" target="M.ExpressionServices.get_expression_samples_data_by_genome_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="230" source="D.ExpressionServices.wild_type_only" target="M.ExpressionServices.get_expression_sample_ids_by_genome_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="244" source="D.ExpressionServices.wild_type_only" target="M.ExpressionServices.get_expression_data_by_feature_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="235" source="D.ExpressionServices.wild_type_only" target="M.ExpressionServices.get_expression_samples_data_by_ontology_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="1607" source="D.Ontology.ontology_type" target="M.Ontology.get_go_enrichment" label="METHOD_PARAM"><data key="moduleName">Ontology</data></edge><edge id="1075" source="D.KBaseGenomes.ContigSet_ref" target="D.KBaseGenomes.Genome" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="719" source="M.KBaseExpression.compare_samples_vs_the_average" target="D.KBaseExpression.sample_comparison_mapping" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="1105" source="D.KBaseGwasData.genome_id" target="D.KBaseGwasData.VariationSampleMetaData" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="2083" source="D.Workspace.get_objectmeta_params" target="M.Workspace.get_objectmeta" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="1588" source="D.Ontology.GeneID" target="D.Ontology.GeneIDMap2GoInfo" label="HASH_KEY"><data key="moduleName">Ontology</data></edge><edge id="1577" source="D.Ontology.GeneID" target="D.Ontology.GeneIDList" label="LIST_OF"><data key="moduleName">Ontology</data></edge><edge id="2064" source="M.Workspace.list_workspace_objects" target="D.Workspace.object_metadata" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="1998" source="D.Workspace.save_object_params" target="M.Workspace.save_object" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="876" source="D.KBaseFBA.fba_id" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="117" source="M.ERDB_Service.GetAll" target="D.ERDB_Service.rowlist" label="METHOD_RETURN"><data key="moduleName">ERDB_Service</data></edge><edge id="1420" source="D.KBaseTrees.CdsImportTreeParameters" target="M.KBaseTrees.import_tree_from_cds" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1472" source="D.MEME.MemeMotif" target="D.MEME.MemeRunResult" label="LIST_OF"><data key="moduleName">MEME</data></edge><edge id="609" source="D.KBaseExpression.ontology_definition" target="D.KBaseExpression.SampleAnnotation" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="518" source="D.KBaseBiochem.structure_ref" target="D.KBaseBiochem.Compound" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="340" source="M.GenomeAnnotation.create_genome" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="99" source="D.Communities.BiomMetagenomeEntry" target="D.Communities.BiomMetagenome" label="LIST_OF"><data key="moduleName">Communities</data></edge><edge id="1200" source="D.KBaseOntology.ontology_term_annotation_map" target="D.KBaseOntology.gene_annotation_map" label="HASH_VALUE"><data key="moduleName">KBaseOntology</data></edge><edge id="451" source="D.GenomeAnnotation.workflow" target="M.GenomeAnnotation.run_pipeline" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="459" source="D.GenomeAnnotation.workflow" target="M.GenomeAnnotation.pipeline_batch_start" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1345" source="D.KBaseTrees.viz_val_float" target="D.KBaseTrees.TreeDecoration" label="LIST_OF"><data key="moduleName">KBaseTrees</data></edge><edge id="714" source="M.KBaseExpression.compare_samples" target="D.KBaseExpression.sample_comparison_mapping" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="141" source="D.ExpressionServices.ontology_id" target="D.ExpressionServices.SampleAnnotation" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="172" source="D.ExpressionServices.ontology_id" target="D.ExpressionServices.ontology_expression_data_sample_mapping" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="139" source="D.ExpressionServices.ontology_id" target="D.ExpressionServices.ontology_ids" label="LIST_OF"><data key="moduleName">ExpressionServices</data></edge><edge id="192" source="D.ExpressionServices.contact_people" target="D.ExpressionServices.GsmObject" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="1869" source="D.UserAndJobState.job_status" target="M.UserAndJobState.create_and_start_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1899" source="D.UserAndJobState.job_status" target="M.UserAndJobState.complete_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1876" source="D.UserAndJobState.job_status" target="M.UserAndJobState.update_job_progress" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1864" source="D.UserAndJobState.job_status" target="M.UserAndJobState.start_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1881" source="D.UserAndJobState.job_status" target="M.UserAndJobState.update_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="758" source="D.KBaseExpression.Person" target="D.KBaseExpression.persons" label="LIST_OF"><data key="moduleName">KBaseExpression</data></edge><edge id="12" source="D.AbstractHandle.NodeId" target="M.AbstractHandle.ids_to_handles" label="METHOD_PARAM"><data key="moduleName">AbstractHandle</data></edge><edge id="1" source="D.AbstractHandle.NodeId" target="D.AbstractHandle.Handle" label="SUBTYPE"><data key="moduleName">AbstractHandle</data></edge><edge id="1598" source="D.Ontology.EvidenceCodeList" target="M.Ontology.get_goidlist" label="METHOD_PARAM"><data key="moduleName">Ontology</data></edge><edge id="1605" source="D.Ontology.EvidenceCodeList" target="M.Ontology.get_go_enrichment" label="METHOD_PARAM"><data key="moduleName">Ontology</data></edge><edge id="1251" source="D.KBaseRegulation.evidence_type" target="D.KBaseRegulation.Evidence" label="SUBTYPE"><data key="moduleName">KBaseRegulation</data></edge><edge id="847" source="D.KBaseFBA.conflict_state" target="D.KBaseFBA.FBATintleResult" label="HASH_KEY"><data key="moduleName">KBaseFBA</data></edge><edge id="681" source="M.KBaseExpression.get_expression_samples_data_by_experiment_meta_ids" target="D.KBaseExpression.experiment_meta_expression_data_samples_mapping" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="1291" source="D.KBaseSearch.feature_id" target="D.KBaseSearch.Feature" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="1307" source="D.KBaseSearch.feature_id" target="D.KBaseSearch.SearchFeatureSet" label="HASH_KEY"><data key="moduleName">KBaseSearch</data></edge><edge id="8" source="M.AbstractHandle.upload" target="D.AbstractHandle.Handle" label="METHOD_RETURN"><data key="moduleName">AbstractHandle</data></edge><edge id="2140" source="M.Workspace.list_module_versions" target="D.Workspace.ModuleVersions" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="1693" source="D.PROM.regulatory_network_id" target="M.PROM.change_regulatory_network_namespace" label="METHOD_PARAM"><data key="moduleName">PROM</data></edge><edge id="1700" source="D.PROM.regulatory_network_id" target="D.PROM.CreatePromConstraintsParameters" label="SUBTYPE"><data key="moduleName">PROM</data></edge><edge id="2007" source="D.Workspace.ws_id" target="D.Workspace.SaveObjectsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1981" source="D.Workspace.ws_id" target="D.Workspace.SetPermissionsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1946" source="D.Workspace.ws_id" target="D.Workspace.SubObjectIdentity" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1986" source="D.Workspace.ws_id" target="D.Workspace.SetGlobalPermissionsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1974" source="D.Workspace.ws_id" target="D.Workspace.get_workspacemeta_params" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1939" source="D.Workspace.ws_id" target="D.Workspace.ObjectIdentity" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1937" source="D.Workspace.ws_id" target="D.Workspace.WorkspaceIdentity" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1990" source="D.Workspace.ws_id" target="D.Workspace.SetWorkspaceDescriptionParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2066" source="D.Workspace.ws_id" target="D.Workspace.ListObjectsParams" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="404" source="M.GenomeAnnotation.annotate_proteins_similarity" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1772" source="D.TaxonomyTranslation.Tax_id" target="M.TaxonomyTranslation.get_scientific_name_by_tax_id" label="METHOD_PARAM"><data key="moduleName">TaxonomyTranslation</data></edge><edge id="1778" source="D.TaxonomyTranslation.Tax_id" target="M.TaxonomyTranslation.get_all_names_by_tax_id" label="METHOD_PARAM"><data key="moduleName">TaxonomyTranslation</data></edge><edge id="1763" source="D.TaxonomyTranslation.Tax_id" target="D.TaxonomyTranslation.Translations" label="HASH_KEY"><data key="moduleName">TaxonomyTranslation</data></edge><edge id="26" source="D.AskKB.query" target="M.AskKB.askKB" label="METHOD_PARAM"><data key="moduleName">AskKB</data></edge><edge id="1423" source="D.KBaseTrees.AbundanceParams" target="M.KBaseTrees.compute_abundance_profile" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="316" source="D.GenomeAnnotation.annotation" target="D.GenomeAnnotation.feature" label="LIST_OF"><data key="moduleName">GenomeAnnotation</data></edge><edge id="2122" source="D.Workspace.RegisterTypespecParams" target="M.Workspace.register_typespec" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="1315" source="D.KBaseSearch.proteinset_ref" target="D.KBaseSearch.Genome" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="2040" source="D.Workspace.ObjectIdentity" target="M.Workspace.get_object_history" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2109" source="D.Workspace.ObjectIdentity" target="M.Workspace.delete_objects" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2044" source="D.Workspace.ObjectIdentity" target="M.Workspace.list_referencing_object_counts" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2110" source="D.Workspace.ObjectIdentity" target="M.Workspace.undelete_objects" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2042" source="D.Workspace.ObjectIdentity" target="M.Workspace.list_referencing_objects" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2085" source="D.Workspace.ObjectIdentity" target="M.Workspace.get_object_info" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2025" source="D.Workspace.ObjectIdentity" target="M.Workspace.get_object_provenance" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2036" source="D.Workspace.ObjectIdentity" target="M.Workspace.get_objects" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2107" source="D.Workspace.ObjectIdentity" target="M.Workspace.hide_objects" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2108" source="D.Workspace.ObjectIdentity" target="M.Workspace.unhide_objects" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2105" source="D.Workspace.ObjectIdentity" target="M.Workspace.revert_object" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2097" source="D.Workspace.ObjectIdentity" target="D.Workspace.RenameObjectParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2101" source="D.Workspace.ObjectIdentity" target="D.Workspace.CopyObjectParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2102" source="D.Workspace.ObjectIdentity" target="D.Workspace.CopyObjectParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1944" source="D.Workspace.ObjectIdentity" target="D.Workspace.ref_chain" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2088" source="D.Workspace.ObjectIdentity" target="D.Workspace.GetObjectInfoNewParams" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="38" source="D.BAMBI.BambiMotif" target="D.BAMBI.BambiRunResult" label="LIST_OF"><data key="moduleName">BAMBI</data></edge><edge id="1867" source="D.UserAndJobState.timestamp" target="M.UserAndJobState.start_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1878" source="D.UserAndJobState.timestamp" target="M.UserAndJobState.update_job_progress" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1882" source="D.UserAndJobState.timestamp" target="M.UserAndJobState.update_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1872" source="D.UserAndJobState.timestamp" target="M.UserAndJobState.create_and_start_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="2026" source="M.Workspace.get_object_provenance" target="D.Workspace.ObjectProvenanceInfo" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="1570" source="M.NarrativeJobService.check_app_state" target="D.NarrativeJobService.app_state" label="METHOD_RETURN"><data key="moduleName">NarrativeJobService</data></edge><edge id="51" source="D.Cmonkey.operons_ws_ref" target="D.Cmonkey.CmonkeyRunParameters" label="SUBTYPE"><data key="moduleName">Cmonkey</data></edge><edge id="736" source="D.KBaseExpression.series_ids" target="M.KBaseExpression.get_expression_series_titles" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="674" source="D.KBaseExpression.series_ids" target="M.KBaseExpression.get_expression_sample_ids_by_series_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="738" source="D.KBaseExpression.series_ids" target="M.KBaseExpression.get_expression_series_summaries" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="672" source="D.KBaseExpression.series_ids" target="M.KBaseExpression.get_expression_samples_data_by_series_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="740" source="D.KBaseExpression.series_ids" target="M.KBaseExpression.get_expression_series_designs" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="742" source="D.KBaseExpression.series_ids" target="M.KBaseExpression.get_expression_series_external_source_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="622" source="D.KBaseExpression.series_ids" target="D.KBaseExpression.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="177" source="D.ExpressionServices.sample_measurement_mapping" target="D.ExpressionServices.feature_sample_measurement_mapping" label="HASH_VALUE"><data key="moduleName">ExpressionServices</data></edge><edge id="1378" source="M.KBaseTrees.extract_leaf_node_names" target="D.KBaseTrees.node_name" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="1103" source="D.KBaseGenomes.GenomeComparisonFamily" target="D.KBaseGenomes.GenomeComparison" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="1116" source="D.KBaseGwasData.observation_unit_details" target="D.KBaseGwasData.GwasPopulation" label="LIST_OF"><data key="moduleName">KBaseGwasData</data></edge><edge id="1367" source="D.KBaseTrees.MSASetElement" target="D.KBaseTrees.MSASet" label="LIST_OF"><data key="moduleName">KBaseTrees</data></edge><edge id="595" source="D.KBaseExpression.series_id" target="D.KBaseExpression.series_string_map" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="628" source="D.KBaseExpression.series_id" target="D.KBaseExpression.series_expression_data_samples_mapping" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="590" source="D.KBaseExpression.series_id" target="D.KBaseExpression.series_ids" label="LIST_OF"><data key="moduleName">KBaseExpression</data></edge><edge id="312" source="D.GenomeAnnotation.bool" target="D.GenomeAnnotation.feature_quality_measure" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="308" source="D.GenomeAnnotation.bool" target="D.GenomeAnnotation.feature_quality_measure" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="310" source="D.GenomeAnnotation.bool" target="D.GenomeAnnotation.feature_quality_measure" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="320" source="D.GenomeAnnotation.bool" target="D.GenomeAnnotation.contig" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="311" source="D.GenomeAnnotation.bool" target="D.GenomeAnnotation.feature_quality_measure" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="309" source="D.GenomeAnnotation.bool" target="D.GenomeAnnotation.feature_quality_measure" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="770" source="D.KBaseExpression.genome_expression_sample_ids_map" target="D.KBaseExpression.ExpressionSeries" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="1154" source="D.KBaseNetworks.Edge" target="D.KBaseNetworks.Network" label="LIST_OF"><data key="moduleName">KBaseNetworks</data></edge><edge id="1496" source="M.MEME.compare_motifs_with_tomtom_by_collection" target="D.MEME.TomtomRunResult" label="METHOD_RETURN"><data key="moduleName">MEME</data></edge><edge id="449" source="M.GenomeAnnotation.complete_workflow_template" target="D.GenomeAnnotation.workflow" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="572" source="D.KBaseCommunities.Table1DFloat" target="D.KBaseCommunities.Abundance1DTableFloat" label="SUBTYPE"><data key="moduleName">KBaseCommunities</data></edge><edge id="370" source="M.GenomeAnnotation.call_pyrrolysoproteins" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1233" source="D.KBasePPI.GenomeID" target="D.KBasePPI.InteractionDataset" label="LIST_OF"><data key="moduleName">KBasePPI</data></edge><edge id="1102" source="D.KBaseGenomes.GenomeComparisonGenome" target="D.KBaseGenomes.GenomeComparison" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="2100" source="M.Workspace.rename_object" target="D.Workspace.object_info" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="1027" source="D.KBaseGeneFamilies.domain_source" target="D.KBaseGeneFamilies.DomainLibrary" label="SUBTYPE"><data key="moduleName">KBaseGeneFamilies</data></edge><edge id="2129" source="D.Workspace.modulename" target="M.Workspace.release_module" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2113" source="D.Workspace.modulename" target="M.Workspace.request_module_ownership" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2183" source="D.Workspace.modulename" target="M.Workspace.get_all_func_info" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2173" source="D.Workspace.modulename" target="M.Workspace.get_all_type_info" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2141" source="D.Workspace.modulename" target="D.Workspace.GetModuleInfoParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2189" source="D.Workspace.modulename" target="D.Workspace.RemoveModuleOwnershipParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2185" source="D.Workspace.modulename" target="D.Workspace.GrantModuleOwnershipParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2115" source="D.Workspace.modulename" target="D.Workspace.RegisterTypespecParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2134" source="D.Workspace.modulename" target="D.Workspace.ListModuleVersionsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2125" source="D.Workspace.modulename" target="D.Workspace.RegisterTypespecCopyParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2136" source="D.Workspace.modulename" target="D.Workspace.ModuleVersions" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2148" source="D.Workspace.modulename" target="D.Workspace.ModuleInfo" label="HASH_KEY"><data key="moduleName">Workspace</data></edge><edge id="2118" source="D.Workspace.modulename" target="D.Workspace.RegisterTypespecParams" label="HASH_KEY"><data key="moduleName">Workspace</data></edge><edge id="72" source="D.Communities.StatMatrix" target="D.Communities.StatsQC" label="HASH_VALUE"><data key="moduleName">Communities</data></edge><edge id="73" source="D.Communities.StatMatrix" target="D.Communities.StatsQC" label="HASH_VALUE"><data key="moduleName">Communities</data></edge><edge id="70" source="D.Communities.StatMatrix" target="D.Communities.Drisee" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="71" source="D.Communities.StatMatrix" target="D.Communities.Drisee" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="136" source="D.ExpressionServices.data_sample_comparison" target="D.ExpressionServices.denominator_sample_comparison" label="HASH_VALUE"><data key="moduleName">ExpressionServices</data></edge><edge id="1531" source="D.MOTranslation.position" target="D.MOTranslation.query_md5" label="SUBTYPE"><data key="moduleName">MOTranslation</data></edge><edge id="1530" source="D.MOTranslation.position" target="D.MOTranslation.query_md5" label="SUBTYPE"><data key="moduleName">MOTranslation</data></edge><edge id="1527" source="D.MOTranslation.position" target="D.MOTranslation.query_sequence" label="SUBTYPE"><data key="moduleName">MOTranslation</data></edge><edge id="1526" source="D.MOTranslation.position" target="D.MOTranslation.query_sequence" label="SUBTYPE"><data key="moduleName">MOTranslation</data></edge><edge id="477" source="D.IDServerAPI.kbase_id" target="M.IDServerAPI.kbase_ids_to_external_ids" label="METHOD_PARAM"><data key="moduleName">IDServerAPI</data></edge><edge id="1637" source="D.ProbabilisticAnnotation.template_id" target="D.ProbabilisticAnnotation.CalculateParams" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1620" source="D.ProbabilisticAnnotation.template_id" target="D.ProbabilisticAnnotation.RxnProbs" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="43" source="D.MEME.MastHit" target="D.Cmonkey.CmonkeyMotif" label="LIST_OF"><data key="moduleName">Cmonkey</data></edge><edge id="1483" source="D.MEME.MastHit" target="D.MEME.MastRunResult" label="LIST_OF"><data key="moduleName">MEME</data></edge><edge id="1894" source="M.UserAndJobState.get_job_status" target="D.UserAndJobState.timestamp" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="1895" source="M.UserAndJobState.get_job_status" target="D.UserAndJobState.boolean" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="1892" source="M.UserAndJobState.get_job_status" target="D.UserAndJobState.job_status" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="1890" source="M.UserAndJobState.get_job_status" target="D.UserAndJobState.timestamp" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="1893" source="M.UserAndJobState.get_job_status" target="D.UserAndJobState.total_progress" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="1891" source="M.UserAndJobState.get_job_status" target="D.UserAndJobState.job_stage" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="1896" source="M.UserAndJobState.get_job_status" target="D.UserAndJobState.boolean" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="1658" source="D.PROM.source" target="D.PROM.BooleanGeneExpressionData" label="SUBTYPE"><data key="moduleName">PROM</data></edge><edge id="1659" source="D.PROM.source" target="D.PROM.BooleanGeneExpressionData" label="SUBTYPE"><data key="moduleName">PROM</data></edge><edge id="1287" source="D.KBaseSearch.fasta_ref" target="D.KBaseSearch.ContigSet" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="138" source="D.ExpressionServices.denominator_sample_comparison" target="D.ExpressionServices.sample_comparison_mapping" label="HASH_VALUE"><data key="moduleName">ExpressionServices</data></edge><edge id="1300" source="D.KBaseSearch.subsystem_data" target="D.KBaseSearch.Feature" label="LIST_OF"><data key="moduleName">KBaseSearch</data></edge><edge id="846" source="D.KBaseFBA.biomass_ref" target="D.KBaseFBA.FBABiomassVariable" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="50" source="D.Cmonkey.genome_ws_ref" target="D.Cmonkey.CmonkeyRunParameters" label="SUBTYPE"><data key="moduleName">Cmonkey</data></edge><edge id="2014" source="D.Workspace.get_object_params" target="M.Workspace.get_object" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="175" source="D.ExpressionServices.measurement" target="D.ExpressionServices.sample_measurement_mapping" label="HASH_VALUE"><data key="moduleName">ExpressionServices</data></edge><edge id="131" source="D.ExpressionServices.measurement" target="D.ExpressionServices.data_expression_levels_for_sample" label="HASH_VALUE"><data key="moduleName">ExpressionServices</data></edge><edge id="1900" source="D.UserAndJobState.detailed_err" target="M.UserAndJobState.complete_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="2145" source="D.Workspace.typespec" target="D.Workspace.ModuleInfo" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2114" source="D.Workspace.typespec" target="D.Workspace.RegisterTypespecParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1327" source="D.KBaseSearch.CommandConfig" target="D.KBaseSearch.Type2CommandConfig" label="HASH_VALUE"><data key="moduleName">KBaseSearch</data></edge><edge id="554" source="D.KBaseBiochem.mapcompound_ref" target="D.KBaseBiochem.MapReactionReactant" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="303" source="D.ExpressionServices.genome_expression_sample_ids_map" target="D.ExpressionServices.ExpressionSeries" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="2041" source="M.Workspace.get_object_history" target="D.Workspace.object_info" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="1286" source="D.KBaseSearch.reads_ref" target="D.KBaseSearch.ContigSet" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="278" source="D.ExpressionServices.external_source_ids" target="M.ExpressionServices.get_expression_sample_ids_by_sample_external_source_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="280" source="D.ExpressionServices.external_source_ids" target="M.ExpressionServices.get_expression_sample_ids_by_platform_external_source_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="282" source="D.ExpressionServices.external_source_ids" target="M.ExpressionServices.get_expression_series_ids_by_series_external_source_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="807" source="D.KBaseFBA.ModelReactionProtein" target="D.KBaseFBA.ModelReaction" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="997" source="D.KBaseFBA.WorkspaceGenomeClassPrediction" target="D.KBaseFBA.ClassifierResult" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1083" source="D.KBaseGenomes.source_id" target="D.KBaseGenomes.ProteinSet" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1046" source="D.KBaseGenomes.source_id" target="D.KBaseGenomes.ContigSet" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1072" source="D.KBaseGenomes.source_id" target="D.KBaseGenomes.Genome" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1549" source="D.MOTranslation.moLocusId" target="M.MOTranslation.moLocusIds_to_fid_in_genome_fast" label="METHOD_PARAM"><data key="moduleName">MOTranslation</data></edge><edge id="1521" source="D.MOTranslation.moLocusId" target="M.MOTranslation.moLocusIds_to_proteins" label="METHOD_PARAM"><data key="moduleName">MOTranslation</data></edge><edge id="1544" source="D.MOTranslation.moLocusId" target="M.MOTranslation.moLocusIds_to_fid_in_genome" label="METHOD_PARAM"><data key="moduleName">MOTranslation</data></edge><edge id="1518" source="D.MOTranslation.moLocusId" target="M.MOTranslation.moLocusIds_to_fids" label="METHOD_PARAM"><data key="moduleName">MOTranslation</data></edge><edge id="441" source="M.GenomeAnnotation.query_classifier_groups" target="D.GenomeAnnotation.genome_id" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1907" source="M.UserAndJobState.get_job_info" target="D.UserAndJobState.job_info" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="44" source="D.MEME.MemeSite" target="D.Cmonkey.CmonkeyMotif" label="LIST_OF"><data key="moduleName">Cmonkey</data></edge><edge id="1470" source="D.MEME.MemeSite" target="D.MEME.MemeMotif" label="LIST_OF"><data key="moduleName">MEME</data></edge><edge id="1002" source="D.KBaseFile.Handle" target="D.KBaseFile.FileRef" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="1186" source="D.KBaseOntology.Subsystem" target="D.KBaseOntology.Mapping" label="LIST_OF"><data key="moduleName">KBaseOntology</data></edge><edge id="2123" source="M.Workspace.register_typespec" target="D.Workspace.type_string" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="2124" source="M.Workspace.register_typespec" target="D.Workspace.jsonschema" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="1657" source="D.PROM.on_off_state" target="D.PROM.BooleanGeneExpressionData" label="HASH_VALUE"><data key="moduleName">PROM</data></edge><edge id="1799" source="M.Tree.merge_zero_distance_leaves" target="D.Tree.newick_tree" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="725" source="M.KBaseExpression.get_expression_samples_titles" target="D.KBaseExpression.samples_string_map" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="428" source="M.GenomeAnnotation.find_close_neighbors" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1935" source="M.UserProfile.lookup_globus_user" target="D.UserProfile.GlobusUser" label="METHOD_RETURN"><data key="moduleName">UserProfile</data></edge><edge id="1934" source="M.UserProfile.lookup_globus_user" target="D.UserProfile.username" label="METHOD_RETURN"><data key="moduleName">UserProfile</data></edge><edge id="275" source="M.ExpressionServices.get_expression_series_designs" target="D.ExpressionServices.series_string_map" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="1927" source="M.UserProfile.filter_users" target="D.UserProfile.User" label="METHOD_RETURN"><data key="moduleName">UserProfile</data></edge><edge id="374" source="M.GenomeAnnotation.call_features_pyrrolysoprotein" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="447" source="D.GenomeAnnotation.pipeline_stage" target="D.GenomeAnnotation.workflow" label="LIST_OF"><data key="moduleName">GenomeAnnotation</data></edge><edge id="678" source="D.KBaseExpression.experimental_unit_ids" target="M.KBaseExpression.get_expression_sample_ids_by_experimental_unit_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="676" source="D.KBaseExpression.experimental_unit_ids" target="M.KBaseExpression.get_expression_samples_data_by_experimental_unit_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="1991" source="D.Workspace.SetWorkspaceDescriptionParams" target="M.Workspace.set_workspace_description" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="1217" source="D.KBasePhenotypes.phenotypeset_ref" target="D.KBasePhenotypes.PhenotypeSimulationSet" label="SUBTYPE"><data key="moduleName">KBasePhenotypes</data></edge><edge id="1856" source="D.UserAndJobState.authed" target="M.UserAndJobState.list_state_services" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1850" source="D.UserAndJobState.authed" target="M.UserAndJobState.get_has_state" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1855" source="D.UserAndJobState.authed" target="M.UserAndJobState.list_state" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1847" source="D.UserAndJobState.authed" target="M.UserAndJobState.has_state" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1845" source="D.UserAndJobState.authed" target="M.UserAndJobState.get_state" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1566" source="D.NarrativeJobService.boolean" target="D.NarrativeJobService.Status" label="SUBTYPE"><data key="moduleName">NarrativeJobService</data></edge><edge id="1557" source="D.NarrativeJobService.boolean" target="D.NarrativeJobService.workspace_object" label="SUBTYPE"><data key="moduleName">NarrativeJobService</data></edge><edge id="1567" source="D.NarrativeJobService.boolean" target="D.NarrativeJobService.Status" label="SUBTYPE"><data key="moduleName">NarrativeJobService</data></edge><edge id="1558" source="D.NarrativeJobService.boolean" target="D.NarrativeJobService.step_parameter" label="SUBTYPE"><data key="moduleName">NarrativeJobService</data></edge><edge id="1556" source="D.NarrativeJobService.boolean" target="D.NarrativeJobService.script_method" label="SUBTYPE"><data key="moduleName">NarrativeJobService</data></edge><edge id="1563" source="D.NarrativeJobService.boolean" target="D.NarrativeJobService.step" label="SUBTYPE"><data key="moduleName">NarrativeJobService</data></edge><edge id="1565" source="D.NarrativeJobService.boolean" target="D.NarrativeJobService.app_state" label="SUBTYPE"><data key="moduleName">NarrativeJobService</data></edge><edge id="1901" source="D.UserAndJobState.Results" target="M.UserAndJobState.complete_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="120" source="M.ERDB_Service.runSQL" target="D.ERDB_Service.rowlist" label="METHOD_RETURN"><data key="moduleName">ERDB_Service</data></edge><edge id="1178" source="D.KBaseOntology.role_id" target="D.KBaseOntology.Role" label="SUBTYPE"><data key="moduleName">KBaseOntology</data></edge><edge id="1188" source="D.KBaseOntology.role_id" target="D.KBaseOntology.Mapping" label="HASH_KEY"><data key="moduleName">KBaseOntology</data></edge><edge id="1314" source="D.KBaseSearch.contigset_ref" target="D.KBaseSearch.Genome" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="1272" source="D.KBaseRegulation.regulome_id" target="D.KBaseRegulation.Regulome" label="SUBTYPE"><data key="moduleName">KBaseRegulation</data></edge><edge id="110" source="D.ERDB_Service.fieldValue" target="D.ERDB_Service.fieldValues" label="LIST_OF"><data key="moduleName">ERDB_Service</data></edge><edge id="47" source="D.Cmonkey.CmonkeyMotif" target="D.Cmonkey.CmonkeyCluster" label="LIST_OF"><data key="moduleName">Cmonkey</data></edge><edge id="1061" source="D.KBaseGenomes.subsystem_data" target="D.KBaseGenomes.Feature" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="2193" source="D.Workspace.ListAllTypesParams" target="M.Workspace.list_all_types" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="1751" source="M.RDPTools.classify_check" target="D.RDPTools.Handle" label="METHOD_RETURN"><data key="moduleName">RDPTools</data></edge><edge id="1750" source="M.RDPTools.classify_check" target="D.RDPTools.Handle" label="METHOD_RETURN"><data key="moduleName">RDPTools</data></edge><edge id="1442" source="M.KmerAnnotationByFigfam.annotate_proteins" target="D.KmerAnnotationByFigfam.hit" label="METHOD_RETURN"><data key="moduleName">KmerAnnotationByFigfam</data></edge><edge id="1274" source="D.KBaseRegulation.Genome" target="D.KBaseRegulation.Regulome" label="SUBTYPE"><data key="moduleName">KBaseRegulation</data></edge><edge id="1282" source="D.KBaseRegulation.Genome" target="D.KBaseRegulation.RegulogCollection" label="LIST_OF"><data key="moduleName">KBaseRegulation</data></edge><edge id="1080" source="D.KBaseGenomes.ProteinFamily" target="D.KBaseGenomes.Protein" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="1059" source="D.KBaseGenomes.ProteinFamily" target="D.KBaseGenomes.Feature" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="1464" source="D.MAK.MAKParameters" target="D.MAK.MAKResult" label="SUBTYPE"><data key="moduleName">MAK</data></edge><edge id="615" source="D.KBaseExpression.sample_id" target="D.KBaseExpression.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="594" source="D.KBaseExpression.sample_id" target="D.KBaseExpression.samples_float_map" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="626" source="D.KBaseExpression.sample_id" target="D.KBaseExpression.expression_data_samples_map" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="640" source="D.KBaseExpression.sample_id" target="D.KBaseExpression.sample_measurement_mapping" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="603" source="D.KBaseExpression.sample_id" target="D.KBaseExpression.sample_comparison_mapping" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="593" source="D.KBaseExpression.sample_id" target="D.KBaseExpression.samples_string_map" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="588" source="D.KBaseExpression.sample_id" target="D.KBaseExpression.sample_ids" label="LIST_OF"><data key="moduleName">KBaseExpression</data></edge><edge id="589" source="D.KBaseExpression.sample_id" target="D.KBaseExpression.sample_ids_averaged_from" label="LIST_OF"><data key="moduleName">KBaseExpression</data></edge><edge id="379" source="M.GenomeAnnotation.call_features_rRNA_SEED" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="269" source="M.ExpressionServices.get_expression_samples_original_log2_medians" target="D.ExpressionServices.samples_float_map" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="1043" source="D.KBaseGenomes.Contig_id" target="D.KBaseGenomes.Contig" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1071" source="D.KBaseGenomes.Contig_id" target="D.KBaseGenomes.Genome" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="754" source="D.KBaseExpression.Strain" target="D.KBaseExpression.ExpressionPlatform" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="767" source="D.KBaseExpression.Strain" target="D.KBaseExpression.ExpressionSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="1591" source="D.Ontology.GoDesc" target="D.Ontology.Enrichment" label="SUBTYPE"><data key="moduleName">Ontology</data></edge><edge id="1584" source="D.Ontology.GoDesc" target="D.Ontology.GoTermInfo" label="SUBTYPE"><data key="moduleName">Ontology</data></edge><edge id="1575" source="D.Ontology.GoDesc" target="D.Ontology.GoDescList" label="LIST_OF"><data key="moduleName">Ontology</data></edge><edge id="1133" source="D.KBaseGwasData.GwasPopulationKinship_obj_id" target="D.KBaseGwasData.GwasTopVariations" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="723" source="M.KBaseExpression.get_top_changers" target="D.KBaseExpression.sample_comparison_mapping" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="1364" source="D.KBaseTrees.ws_alignment_id" target="D.KBaseTrees.MSA" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1365" source="D.KBaseTrees.ws_alignment_id" target="D.KBaseTrees.MSASetElement" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1438" source="D.KBaseTrees.ws_alignment_id" target="D.KBaseTrees.ConstructTreeForAlignmentParams" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1633" source="D.ProbabilisticAnnotation.AnnotateParams" target="M.ProbabilisticAnnotation.annotate" label="METHOD_PARAM"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1098" source="D.KBaseGenomes.OrthologFamily" target="D.KBaseGenomes.Pangenome" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="1439" source="D.KBaseTrees.ConstructTreeForAlignmentParams" target="M.KBaseTrees.construct_tree_for_alignment" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="570" source="D.KBaseCommunities.Table2DFloat" target="D.KBaseCommunities.Abundance2DTableFloat" label="SUBTYPE"><data key="moduleName">KBaseCommunities</data></edge><edge id="1915" source="D.UserAndJobState.username" target="M.UserAndJobState.unshare_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1913" source="D.UserAndJobState.username" target="M.UserAndJobState.share_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1348" source="D.KBaseTrees.tree_node_id" target="D.KBaseTrees.TreeDecoration" label="HASH_KEY"><data key="moduleName">KBaseTrees</data></edge><edge id="1346" source="D.KBaseTrees.tree_node_id" target="D.KBaseTrees.TreeDecoration" label="HASH_KEY"><data key="moduleName">KBaseTrees</data></edge><edge id="1652" source="D.ProbabilisticAnnotation.function_probability" target="D.ProbabilisticAnnotation.roleset_probabilities" label="LIST_OF"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1617" source="D.ProbabilisticAnnotation.function_probability" target="D.ProbabilisticAnnotation.ProbAnno" label="LIST_OF"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1501" source="D.MEME.MastRunParameters" target="M.MEME.find_sites_with_mast" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1505" source="D.MEME.MastRunParameters" target="M.MEME.find_sites_with_mast_by_collection" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1507" source="D.MEME.MastRunParameters" target="M.MEME.find_sites_with_mast_by_collection_from_ws" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1508" source="D.MEME.MastRunParameters" target="M.MEME.find_sites_with_mast_job_by_collection_from_ws" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1482" source="D.MEME.MastRunParameters" target="D.MEME.MastRunResult" label="SUBTYPE"><data key="moduleName">MEME</data></edge><edge id="775" source="D.KBaseExpression.shock_url" target="D.KBaseExpression.shock_ref" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="134" source="D.ExpressionServices.log2_ratio" target="D.ExpressionServices.data_sample_comparison" label="HASH_VALUE"><data key="moduleName">ExpressionServices</data></edge><edge id="607" source="D.KBaseExpression.ontology_id" target="D.KBaseExpression.SampleAnnotation" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="638" source="D.KBaseExpression.ontology_id" target="D.KBaseExpression.ontology_expression_data_sample_mapping" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="605" source="D.KBaseExpression.ontology_id" target="D.KBaseExpression.ontology_ids" label="LIST_OF"><data key="moduleName">KBaseExpression</data></edge><edge id="85" source="D.Communities.StatsQC" target="D.Communities.Statistics" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="245" source="M.ExpressionServices.get_expression_data_by_feature_ids" target="D.ExpressionServices.feature_sample_measurement_mapping" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="345" source="M.GenomeAnnotation.set_metadata" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1214" source="D.KBasePhenotypes.phenotype_ref" target="D.KBasePhenotypes.PhenotypeSimulation" label="SUBTYPE"><data key="moduleName">KBasePhenotypes</data></edge><edge id="1134" source="D.KBaseGwasData.traitUnit" target="D.KBaseGwasData.populationTraitUnit" label="LIST_OF"><data key="moduleName">KBaseGwasData</data></edge><edge id="512" source="D.KBaseAssembly.SingleEndLibrary" target="D.KBaseAssembly.AssemblyInput" label="LIST_OF"><data key="moduleName">KBaseAssembly</data></edge><edge id="563" source="D.KBaseBiochem.MapCompound" target="D.KBaseBiochem.MetabolicMap" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="1590" source="D.Ontology.GoID" target="D.Ontology.Enrichment" label="SUBTYPE"><data key="moduleName">Ontology</data></edge><edge id="1586" source="D.Ontology.GoID" target="D.Ontology.GoIDMap2GoTermInfo" label="HASH_KEY"><data key="moduleName">Ontology</data></edge><edge id="1573" source="D.Ontology.GoID" target="D.Ontology.GoIDList" label="LIST_OF"><data key="moduleName">Ontology</data></edge><edge id="1517" source="M.MOTranslation.proteins_to_moLocusIds" target="D.MOTranslation.moLocusId" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="1516" source="M.MOTranslation.proteins_to_moLocusIds" target="D.MOTranslation.protein" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="1674" source="M.PROM.get_expression_data_by_genome" target="D.PROM.expression_data_collection_id" label="METHOD_RETURN"><data key="moduleName">PROM</data></edge><edge id="1673" source="M.PROM.get_expression_data_by_genome" target="D.PROM.status" label="METHOD_RETURN"><data key="moduleName">PROM</data></edge><edge id="1555" source="M.MOTranslation.moTaxonomyId_to_genomes" target="D.MOTranslation.genomeId" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="1261" source="D.KBaseRegulation.operon_id" target="D.KBaseRegulation.RegulatedOperon" label="SUBTYPE"><data key="moduleName">KBaseRegulation</data></edge><edge id="418" source="D.GenomeAnnotation.kmer_v2_parameters" target="M.GenomeAnnotation.call_features_ProtoCDS_kmer_v2" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="409" source="D.GenomeAnnotation.kmer_v2_parameters" target="M.GenomeAnnotation.annotate_proteins_kmer_v2" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="445" source="D.GenomeAnnotation.kmer_v2_parameters" target="D.GenomeAnnotation.pipeline_stage" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1324" source="D.KBaseSearch.evidence_code" target="D.KBaseSearch.Ontology" label="LIST_OF"><data key="moduleName">KBaseSearch</data></edge><edge id="1524" source="D.MOTranslation.protein_id" target="D.MOTranslation.query_sequence" label="SUBTYPE"><data key="moduleName">MOTranslation</data></edge><edge id="1528" source="D.MOTranslation.protein_id" target="D.MOTranslation.query_md5" label="SUBTYPE"><data key="moduleName">MOTranslation</data></edge><edge id="437" source="M.GenomeAnnotation.update_functions" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1554" source="D.MOTranslation.moTaxonomyId" target="M.MOTranslation.moTaxonomyId_to_genomes" label="METHOD_PARAM"><data key="moduleName">MOTranslation</data></edge><edge id="1208" source="D.KBasePhenotypes.compound_ref" target="D.KBasePhenotypes.Phenotype" label="LIST_OF"><data key="moduleName">KBasePhenotypes</data></edge><edge id="189" source="D.ExpressionServices.GenomeDataGSM" target="D.ExpressionServices.gsm_data" label="HASH_VALUE"><data key="moduleName">ExpressionServices</data></edge><edge id="694" source="D.KBaseExpression.genome_ids" target="M.KBaseExpression.get_expression_sample_ids_by_genome_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="690" source="D.KBaseExpression.genome_ids" target="M.KBaseExpression.get_expression_samples_data_by_genome_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="1021" source="D.KBaseCommon.SourceInfo" target="D.KBaseFile.AnnotationFile" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="1006" source="D.KBaseCommon.SourceInfo" target="D.KBaseFile.PairedEndLibrary" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="1016" source="D.KBaseCommon.SourceInfo" target="D.KBaseFile.AssemblyFile" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="567" source="D.KBaseCommon.SourceInfo" target="D.KBaseCommon.StrainInfo" label="SUBTYPE"><data key="moduleName">KBaseCommon</data></edge><edge id="1012" source="D.KBaseCommon.SourceInfo" target="D.KBaseFile.SingleEndLibrary" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="1230" source="D.KBasePPI.InteractionDatasetID" target="D.KBasePPI.InteractionDataset" label="SUBTYPE"><data key="moduleName">KBasePPI</data></edge><edge id="909" source="D.KBaseFBA.FBACompoundVariable" target="D.KBaseFBA.FBA" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="471" source="D.GWAS.GeneList2NetworksParams" target="M.GWAS.genelist_to_networks" label="METHOD_PARAM"><data key="moduleName">GWAS</data></edge><edge id="472" source="D.GWAS.GeneList2NetworksParams" target="M.GWAS.gwas_genelist_to_networks" label="METHOD_PARAM"><data key="moduleName">GWAS</data></edge><edge id="1136" source="D.KBaseGwasData.kinshipUnit" target="D.KBaseGwasData.variationKinshipUnit" label="LIST_OF"><data key="moduleName">KBaseGwasData</data></edge><edge id="1587" source="D.Ontology.GoTermInfoList" target="D.Ontology.GoIDMap2GoTermInfo" label="HASH_VALUE"><data key="moduleName">Ontology</data></edge><edge id="338" source="M.GenomeAnnotation.genome_ids_to_genomes" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1814" source="M.Tree.get_alignment_data" target="D.Tree.kbase_id" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="1815" source="M.Tree.get_alignment_data" target="D.Tree.AlignmentMetaData" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="356" source="M.GenomeAnnotation.genomeTO_to_reconstructionTO" target="D.GenomeAnnotation.reconstructionTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="565" source="D.KBaseCommon.source_id" target="D.KBaseCommon.SourceInfo" label="SUBTYPE"><data key="moduleName">KBaseCommon</data></edge><edge id="1275" source="D.KBaseRegulation.Regulon" target="D.KBaseRegulation.Regulome" label="LIST_OF"><data key="moduleName">KBaseRegulation</data></edge><edge id="1376" source="M.KBaseTrees.merge_zero_distance_leaves" target="D.KBaseTrees.newick_tree" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="1281" source="D.KBaseRegulation.Regulog" target="D.KBaseRegulation.RegulogCollection" label="LIST_OF"><data key="moduleName">KBaseRegulation</data></edge><edge id="48" source="D.Cmonkey.CmonkeyCluster" target="D.Cmonkey.CmonkeyNetwork" label="LIST_OF"><data key="moduleName">Cmonkey</data></edge><edge id="558" source="D.KBaseBiochem.maplink_ref" target="D.KBaseBiochem.MapCompound" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="1771" source="M.TaxonomyTranslation.get_all_names_by_name" target="D.TaxonomyTranslation.Name" label="METHOD_RETURN"><data key="moduleName">TaxonomyTranslation</data></edge><edge id="1770" source="M.TaxonomyTranslation.get_all_names_by_name" target="D.TaxonomyTranslation.Tax_id" label="METHOD_RETURN"><data key="moduleName">TaxonomyTranslation</data></edge><edge id="383" source="M.GenomeAnnotation.call_RNAs" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="833" source="D.KBaseFBA.ModelGapgen" target="D.KBaseFBA.FBAModel" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="504" source="D.KBaseAssembly.HandleId" target="D.KBaseAssembly.Handle" label="SUBTYPE"><data key="moduleName">KBaseAssembly</data></edge><edge id="1294" source="D.KBaseSearch.feature_type" target="D.KBaseSearch.Feature" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="350" source="D.GenomeAnnotation.contig" target="M.GenomeAnnotation.add_contigs_from_handle" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="347" source="D.GenomeAnnotation.contig" target="M.GenomeAnnotation.add_contigs" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="324" source="D.GenomeAnnotation.contig" target="D.GenomeAnnotation.genomeTO" label="LIST_OF"><data key="moduleName">GenomeAnnotation</data></edge><edge id="35" source="D.BAMBI.BambiSite" target="D.BAMBI.BambiMotif" label="LIST_OF"><data key="moduleName">BAMBI</data></edge><edge id="34" source="D.BAMBI.BambiSite" target="D.BAMBI.BambiMotif" label="LIST_OF"><data key="moduleName">BAMBI</data></edge><edge id="658" source="D.KBaseExpression.contact_people" target="D.KBaseExpression.GsmObject" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="93" source="D.Communities.Metadata" target="D.Communities.BiomMatrixEntry" label="HASH_VALUE"><data key="moduleName">Communities</data></edge><edge id="88" source="D.Communities.Metadata" target="D.Communities.Metagenome" label="HASH_VALUE"><data key="moduleName">Communities</data></edge><edge id="79" source="D.Communities.Metadata" target="D.Communities.SequenceSet" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="83" source="D.Communities.Metadata" target="D.Communities.Profile" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="666" source="D.KBaseExpression.gse_errors" target="D.KBaseExpression.GseObject" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="1194" source="D.KBaseOntology.genome_id" target="D.KBaseOntology.Ontology" label="HASH_KEY"><data key="moduleName">KBaseOntology</data></edge><edge id="199" source="D.ExpressionServices.gse_warnings" target="D.ExpressionServices.GseObject" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="604" source="D.KBaseExpression.denominator_sample_comparison" target="D.KBaseExpression.sample_comparison_mapping" label="HASH_VALUE"><data key="moduleName">KBaseExpression</data></edge><edge id="1279" source="D.KBaseRegulation.regulon_ref" target="D.KBaseRegulation.Regulog" label="LIST_OF"><data key="moduleName">KBaseRegulation</data></edge><edge id="942" source="D.KBaseFBA.probanno_ref" target="D.KBaseFBA.Gapfilling" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="1984" source="D.Workspace.SetPermissionsParams" target="M.Workspace.set_permissions" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="1026" source="D.KBaseGeneFamilies.domain_library_id" target="D.KBaseGeneFamilies.DomainLibrary" label="SUBTYPE"><data key="moduleName">KBaseGeneFamilies</data></edge><edge id="205" source="M.ExpressionServices.get_expression_data_by_samples_and_features" target="D.ExpressionServices.label_data_mapping" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="366" source="M.GenomeAnnotation.annotate_genome" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1949" source="D.Workspace.obj_ver" target="D.Workspace.SubObjectIdentity" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1942" source="D.Workspace.obj_ver" target="D.Workspace.ObjectIdentity" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="314" source="D.GenomeAnnotation.location" target="D.GenomeAnnotation.feature" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="2128" source="M.Workspace.register_typespec_copy" target="D.Workspace.spec_version" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="810" source="D.KBaseFBA.gapfill_ref" target="D.KBaseFBA.ModelGapfill" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="1262" source="D.KBaseRegulation.Gene" target="D.KBaseRegulation.RegulatedOperon" label="LIST_OF"><data key="moduleName">KBaseRegulation</data></edge><edge id="1509" source="D.MEME.MemeRunResult" target="M.MEME.get_pspm_collection_from_meme_result" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1823" source="M.Tree.get_alignment_ids_by_protein_sequence" target="D.Tree.kbase_id" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="1152" source="D.KBaseNetworks.node_type" target="D.KBaseNetworks.Node" label="SUBTYPE"><data key="moduleName">KBaseNetworks</data></edge><edge id="1159" source="D.KBaseNetworks.Interaction" target="D.KBaseNetworks.InteractionSet" label="LIST_OF"><data key="moduleName">KBaseNetworks</data></edge><edge id="1809" source="M.Tree.get_alignment" target="D.Tree.alignment" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="1323" source="D.KBaseSearch.gene_id" target="D.KBaseSearch.gene_list" label="LIST_OF"><data key="moduleName">KBaseSearch</data></edge><edge id="1132" source="D.KBaseGwasData.GwasPopulationStructure_obj_id" target="D.KBaseGwasData.GwasTopVariations" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="1199" source="D.KBaseOntology.gene_id" target="D.KBaseOntology.gene_annotation_map" label="HASH_KEY"><data key="moduleName">KBaseOntology</data></edge><edge id="1191" source="D.KBaseOntology.gene_id" target="D.KBaseOntology.gene_list" label="LIST_OF"><data key="moduleName">KBaseOntology</data></edge><edge id="112" source="D.ERDB_Service.objectNames" target="M.ERDB_Service.GetAll" label="METHOD_PARAM"><data key="moduleName">ERDB_Service</data></edge><edge id="653" source="D.KBaseExpression.gsm_data_set" target="D.KBaseExpression.GenomeDataGSM" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="1051" source="D.KBaseGenomes.Analysis_event_id" target="D.KBaseGenomes.Analysis_event" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="2191" source="D.Workspace.RemoveModuleOwnershipParams" target="M.Workspace.remove_module_ownership" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="499" source="D.Inferelator.InferelatorRunParameters" target="M.Inferelator.run_inferelator" label="METHOD_PARAM"><data key="moduleName">Inferelator</data></edge><edge id="497" source="D.Inferelator.InferelatorRunParameters" target="D.Inferelator.InferelatorRunResult" label="SUBTYPE"><data key="moduleName">Inferelator</data></edge><edge id="1926" source="D.UserProfile.FilterParams" target="M.UserProfile.filter_users" label="METHOD_PARAM"><data key="moduleName">UserProfile</data></edge><edge id="781" source="D.KBaseExpression.RNASeqSampleAlignment" target="D.KBaseExpression.RNASeqSampleAlignmentSet" label="LIST_OF"><data key="moduleName">KBaseExpression</data></edge><edge id="467" source="D.GWAS.PrepareVariationParams" target="M.GWAS.prepare_variation" label="METHOD_PARAM"><data key="moduleName">GWAS</data></edge><edge id="32" source="D.AssemblyInputHandle.PairedEndLibrary" target="D.AssemblyInputHandle.AssemblyInput" label="LIST_OF"><data key="moduleName">AssemblyInputHandle</data></edge><edge id="360" source="M.GenomeAnnotation.reconstructionTO_to_roles" target="D.GenomeAnnotation.role" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1373" source="D.KBaseTrees.node_id" target="M.KBaseTrees.remove_node_names_and_simplify" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1369" source="D.KBaseTrees.node_id" target="M.KBaseTrees.replace_node_names" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1350" source="D.KBaseTrees.node_id" target="D.KBaseTrees.TreeDecoration" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1330" source="D.KBaseTrees.node_id" target="D.KBaseTrees.Tree" label="HASH_KEY"><data key="moduleName">KBaseTrees</data></edge><edge id="1361" source="D.KBaseTrees.node_id" target="D.KBaseTrees.MSA" label="HASH_KEY"><data key="moduleName">KBaseTrees</data></edge><edge id="1335" source="D.KBaseTrees.node_id" target="D.KBaseTrees.Tree" label="HASH_KEY"><data key="moduleName">KBaseTrees</data></edge><edge id="1356" source="D.KBaseTrees.node_id" target="D.KBaseTrees.MSA" label="HASH_KEY"><data key="moduleName">KBaseTrees</data></edge><edge id="1358" source="D.KBaseTrees.node_id" target="D.KBaseTrees.MSA" label="HASH_KEY"><data key="moduleName">KBaseTrees</data></edge><edge id="1332" source="D.KBaseTrees.node_id" target="D.KBaseTrees.Tree" label="HASH_KEY"><data key="moduleName">KBaseTrees</data></edge><edge id="1338" source="D.KBaseTrees.node_id" target="D.KBaseTrees.Tree" label="LIST_OF"><data key="moduleName">KBaseTrees</data></edge><edge id="265" source="M.ExpressionServices.get_expression_samples_types" target="D.ExpressionServices.samples_string_map" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="362" source="M.GenomeAnnotation.reconstructionTO_to_subsystems" target="D.GenomeAnnotation.variant_subsystem_pairs" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1003" source="D.KBaseFile.FileRef" target="D.KBaseFile.PairedEndLibrary" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="1004" source="D.KBaseFile.FileRef" target="D.KBaseFile.PairedEndLibrary" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="1019" source="D.KBaseFile.FileRef" target="D.KBaseFile.AnnotationFile" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="1010" source="D.KBaseFile.FileRef" target="D.KBaseFile.SingleEndLibrary" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="1014" source="D.KBaseFile.FileRef" target="D.KBaseFile.AssemblyFile" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="955" source="D.KBaseFBA.GapfillingSolution" target="D.KBaseFBA.Gapfilling" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="919" source="D.KBaseFBA.GapfillingSolution" target="D.KBaseFBA.FBA" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1665" source="D.PROM.RegulatoryTarget" target="D.PROM.TFMap" label="LIST_OF"><data key="moduleName">PROM</data></edge><edge id="39" source="D.BAMBI.workspace_id" target="M.BAMBI.find_motifs" label="METHOD_PARAM"><data key="moduleName">BAMBI</data></edge><edge id="713" source="D.KBaseExpression.label_data_mapping" target="M.KBaseExpression.compare_samples" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="712" source="D.KBaseExpression.label_data_mapping" target="M.KBaseExpression.compare_samples" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="1832" source="D.Tree.AbundanceParams" target="M.Tree.compute_abundance_profile" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="2153" source="M.Workspace.get_module_info" target="D.Workspace.ModuleInfo" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="596" source="D.KBaseExpression.feature_id" target="D.KBaseExpression.data_expression_levels_for_sample" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="599" source="D.KBaseExpression.feature_id" target="D.KBaseExpression.data_sample_comparison" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="649" source="D.KBaseExpression.feature_id" target="D.KBaseExpression.gsm_data_set" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="642" source="D.KBaseExpression.feature_id" target="D.KBaseExpression.feature_sample_measurement_mapping" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="587" source="D.KBaseExpression.feature_id" target="D.KBaseExpression.feature_ids" label="LIST_OF"><data key="moduleName">KBaseExpression</data></edge><edge id="1360" source="D.KBaseTrees.ws_obj_id" target="D.KBaseTrees.MSA" label="LIST_OF"><data key="moduleName">KBaseTrees</data></edge><edge id="1334" source="D.KBaseTrees.ws_obj_id" target="D.KBaseTrees.Tree" label="LIST_OF"><data key="moduleName">KBaseTrees</data></edge><edge id="501" source="M.InvocationService.list_files" target="D.InvocationService.file" label="METHOD_RETURN"><data key="moduleName">InvocationService</data></edge><edge id="500" source="M.InvocationService.list_files" target="D.InvocationService.directory" label="METHOD_RETURN"><data key="moduleName">InvocationService</data></edge><edge id="1759" source="D.ServiceRegistry.ServiceInfo" target="M.ServiceRegistry.update_nginx" label="METHOD_PARAM"><data key="moduleName">ServiceRegistry</data></edge><edge id="1758" source="D.ServiceRegistry.ServiceInfo" target="M.ServiceRegistry.deregister_service" label="METHOD_PARAM"><data key="moduleName">ServiceRegistry</data></edge><edge id="1757" source="D.ServiceRegistry.ServiceInfo" target="M.ServiceRegistry.register_service" label="METHOD_PARAM"><data key="moduleName">ServiceRegistry</data></edge><edge id="1374" source="M.KBaseTrees.remove_node_names_and_simplify" target="D.KBaseTrees.newick_tree" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="302" source="D.ExpressionServices.persons" target="D.ExpressionServices.ExpressionSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="967" source="D.KBaseFBA.mapping_ref" target="D.KBaseFBA.ModelTemplate" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="62" source="D.Communities.FileType" target="D.Communities.DataHandle" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="897" source="D.KBaseFBA.promconstraint_ref" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="1242" source="D.KBaseProteinStructure.PDBMatch" target="D.KBaseProteinStructure.PDBMatches" label="LIST_OF"><data key="moduleName">KBaseProteinStructure</data></edge><edge id="1515" source="D.MOTranslation.protein" target="M.MOTranslation.proteins_to_moLocusIds" label="METHOD_PARAM"><data key="moduleName">MOTranslation</data></edge><edge id="1529" source="D.MOTranslation.protein" target="D.MOTranslation.query_md5" label="SUBTYPE"><data key="moduleName">MOTranslation</data></edge><edge id="1306" source="D.KBaseSearch.search_feature_ref" target="D.KBaseSearch.IndividualFeature" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="1100" source="D.KBaseGenomes.Protcomp_ref" target="D.KBaseGenomes.GenomeComparison" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1625" source="D.ProbabilisticAnnotation.workspace_id" target="D.ProbabilisticAnnotation.RxnProbs" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1650" source="D.ProbabilisticAnnotation.workspace_id" target="D.ProbabilisticAnnotation.GetProbannoParams" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1628" source="D.ProbabilisticAnnotation.workspace_id" target="D.ProbabilisticAnnotation.AnnotateParams" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1615" source="D.ProbabilisticAnnotation.workspace_id" target="D.ProbabilisticAnnotation.ProbAnno" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1638" source="D.ProbabilisticAnnotation.workspace_id" target="D.ProbabilisticAnnotation.CalculateParams" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1636" source="D.ProbabilisticAnnotation.workspace_id" target="D.ProbabilisticAnnotation.CalculateParams" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1645" source="D.ProbabilisticAnnotation.workspace_id" target="D.ProbabilisticAnnotation.GetRxnprobsParams" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1640" source="D.ProbabilisticAnnotation.workspace_id" target="D.ProbabilisticAnnotation.CalculateParams" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1630" source="D.ProbabilisticAnnotation.workspace_id" target="D.ProbabilisticAnnotation.AnnotateParams" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1621" source="D.ProbabilisticAnnotation.workspace_id" target="D.ProbabilisticAnnotation.RxnProbs" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1623" source="D.ProbabilisticAnnotation.workspace_id" target="D.ProbabilisticAnnotation.RxnProbs" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1283" source="D.KBaseSearch.contig_id" target="D.KBaseSearch.Contig" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="1288" source="D.KBaseSearch.contig_id" target="D.KBaseSearch.ContigSet" label="HASH_KEY"><data key="moduleName">KBaseSearch</data></edge><edge id="1310" source="D.KBaseSearch.contig_id" target="D.KBaseSearch.Genome" label="HASH_KEY"><data key="moduleName">KBaseSearch</data></edge><edge id="434" source="M.GenomeAnnotation.call_features_crispr" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1108" source="D.KBaseGwasData.shock_url" target="D.KBaseGwasData.shock_ref" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="1687" source="M.PROM.change_expression_data_namespace" target="D.PROM.status" label="METHOD_RETURN"><data key="moduleName">PROM</data></edge><edge id="1868" source="D.UserAndJobState.service_token" target="M.UserAndJobState.create_and_start_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1843" source="D.UserAndJobState.service_token" target="M.UserAndJobState.set_state_auth" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1880" source="D.UserAndJobState.service_token" target="M.UserAndJobState.update_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1921" source="D.UserAndJobState.service_token" target="M.UserAndJobState.force_delete_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1898" source="D.UserAndJobState.service_token" target="M.UserAndJobState.complete_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1875" source="D.UserAndJobState.service_token" target="M.UserAndJobState.update_job_progress" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1863" source="D.UserAndJobState.service_token" target="M.UserAndJobState.start_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1853" source="D.UserAndJobState.service_token" target="M.UserAndJobState.remove_state_auth" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="2039" source="M.Workspace.get_object_subset" target="D.Workspace.ObjectData" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="2130" source="M.Workspace.release_module" target="D.Workspace.type_string" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="45" source="D.Cmonkey.expression_sample_ws_ref" target="D.Cmonkey.CmonkeyCluster" label="LIST_OF"><data key="moduleName">Cmonkey</data></edge><edge id="182" source="D.ExpressionServices.ContactPerson" target="D.ExpressionServices.contact_people" label="HASH_VALUE"><data key="moduleName">ExpressionServices</data></edge><edge id="473" source="D.HandleMngr.HandleId" target="M.HandleMngr.add_read_acl" label="METHOD_PARAM"><data key="moduleName">HandleMngr</data></edge><edge id="1179" source="D.KBaseOntology.subsystem_id" target="D.KBaseOntology.Subsystem" label="SUBTYPE"><data key="moduleName">KBaseOntology</data></edge><edge id="1190" source="D.KBaseOntology.subsystem_id" target="D.KBaseOntology.Mapping" label="HASH_KEY"><data key="moduleName">KBaseOntology</data></edge><edge id="98" source="D.Communities.BiomAnnotationEntry" target="D.Communities.BiomMetagenome" label="LIST_OF"><data key="moduleName">Communities</data></edge><edge id="104" source="D.Communities.BiomAnnotationEntry" target="D.Communities.BiomMatrix" label="LIST_OF"><data key="moduleName">Communities</data></edge><edge id="1762" source="M.Sim.sims" target="D.Sim.sim_vec" label="METHOD_RETURN"><data key="moduleName">Sim</data></edge><edge id="1064" source="D.KBaseGenomes.coexpressed_fid" target="D.KBaseGenomes.Feature" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="1514" source="M.MOTranslation.fids_to_moLocusIds" target="D.MOTranslation.moLocusId" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="1513" source="M.MOTranslation.fids_to_moLocusIds" target="D.MOTranslation.fid" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="1537" source="M.MOTranslation.map_to_fid" target="D.MOTranslation.result" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="1538" source="M.MOTranslation.map_to_fid" target="D.MOTranslation.status" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="1536" source="M.MOTranslation.map_to_fid" target="D.MOTranslation.protein_id" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="1240" source="D.KBaseProteinStructure.percent_id_t" target="D.KBaseProteinStructure.PDBMatch" label="SUBTYPE"><data key="moduleName">KBaseProteinStructure</data></edge><edge id="1141" source="D.KBaseGwasData.variationKinshipUnit" target="D.KBaseGwasData.GwasPopulationSummary" label="LIST_OF"><data key="moduleName">KBaseGwasData</data></edge><edge id="319" source="D.GenomeAnnotation.contig_id" target="D.GenomeAnnotation.contig" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1169" source="M.KBaseNetworks.entity2datasets" target="D.KBaseNetworks.Dataset" label="METHOD_RETURN"><data key="moduleName">KBaseNetworks</data></edge><edge id="1265" source="D.KBaseRegulation.regulation_type" target="D.KBaseRegulation.Regulator" label="SUBTYPE"><data key="moduleName">KBaseRegulation</data></edge><edge id="778" source="D.KBaseExpression.RNASeqSample" target="D.KBaseExpression.RNASeqSamplesSet" label="LIST_OF"><data key="moduleName">KBaseExpression</data></edge><edge id="582" source="D.KBaseCommunities.Sample" target="D.KBaseCommunities.Metagenome" label="SUBTYPE"><data key="moduleName">KBaseCommunities</data></edge><edge id="332" source="D.GenomeAnnotation.fid_function_pair" target="D.GenomeAnnotation.fid_function_pairs" label="LIST_OF"><data key="moduleName">GenomeAnnotation</data></edge><edge id="470" source="D.GWAS.Variations2GenesParams" target="M.GWAS.variations_to_genes" label="METHOD_PARAM"><data key="moduleName">GWAS</data></edge><edge id="1308" source="D.KBaseSearch.IndividualFeature" target="D.KBaseSearch.SearchFeatureSet" label="HASH_VALUE"><data key="moduleName">KBaseSearch</data></edge><edge id="918" source="D.KBaseFBA.QuantitativeOptimizationSolution" target="D.KBaseFBA.FBA" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1257" source="D.KBaseRegulation.regulatory_mechanism" target="D.KBaseRegulation.RegulatorySite" label="SUBTYPE"><data key="moduleName">KBaseRegulation</data></edge><edge id="1024" source="D.KBaseGeneFamilies.domain_accession" target="D.KBaseGeneFamilies.DomainModel" label="SUBTYPE"><data key="moduleName">KBaseGeneFamilies</data></edge><edge id="1031" source="D.KBaseGeneFamilies.domain_accession" target="D.KBaseGeneFamilies.DomainLibrary" label="HASH_KEY"><data key="moduleName">KBaseGeneFamilies</data></edge><edge id="1034" source="D.KBaseGeneFamilies.domain_accession" target="D.KBaseGeneFamilies.DomainModelSet" label="HASH_KEY"><data key="moduleName">KBaseGeneFamilies</data></edge><edge id="637" source="D.KBaseExpression.strain_expression_data_samples_mapping" target="D.KBaseExpression.genome_expression_data_samples_mapping" label="HASH_VALUE"><data key="moduleName">KBaseExpression</data></edge><edge id="372" source="M.GenomeAnnotation.call_features_selenoprotein" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1164" source="M.KBaseNetworks.dataset_source2datasets" target="D.KBaseNetworks.Dataset" label="METHOD_RETURN"><data key="moduleName">KBaseNetworks</data></edge><edge id="1600" source="D.Ontology.GoIDList" target="M.Ontology.get_go_description" label="METHOD_PARAM"><data key="moduleName">Ontology</data></edge><edge id="598" source="D.KBaseExpression.data_expression_levels_for_sample" target="D.KBaseExpression.label_data_mapping" label="HASH_VALUE"><data key="moduleName">KBaseExpression</data></edge><edge id="760" source="D.KBaseExpression.data_expression_levels_for_sample" target="D.KBaseExpression.ExpressionSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="625" source="D.KBaseExpression.data_expression_levels_for_sample" target="D.KBaseExpression.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="448" source="M.GenomeAnnotation.default_workflow" target="D.GenomeAnnotation.workflow" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1610" source="M.Ontology.get_go_annotation" target="D.Ontology.GeneAnnotations" label="METHOD_RETURN"><data key="moduleName">Ontology</data></edge><edge id="2032" source="D.Workspace.obj_ref" target="D.Workspace.ObjectData" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2021" source="D.Workspace.obj_ref" target="D.Workspace.ObjectProvenanceInfo" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1950" source="D.Workspace.obj_ref" target="D.Workspace.SubObjectIdentity" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1943" source="D.Workspace.obj_ref" target="D.Workspace.ObjectIdentity" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2031" source="D.Workspace.obj_ref" target="D.Workspace.ObjectData" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="1955" source="D.Workspace.obj_ref" target="D.Workspace.ProvenanceAction" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="1954" source="D.Workspace.obj_ref" target="D.Workspace.ProvenanceAction" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2020" source="D.Workspace.obj_ref" target="D.Workspace.ObjectProvenanceInfo" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="757" source="D.KBaseExpression.expression_sample_ids" target="D.KBaseExpression.genome_expression_sample_ids_map" label="HASH_VALUE"><data key="moduleName">KBaseExpression</data></edge><edge id="765" source="D.KBaseExpression.expression_sample_ids" target="D.KBaseExpression.ExpressionSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="771" source="D.KBaseExpression.expression_sample_ids" target="D.KBaseExpression.ExpressionReplicateGroup" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="2161" source="M.Workspace.translate_to_MD5_types" target="D.Workspace.type_string" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="2160" source="M.Workspace.translate_to_MD5_types" target="D.Workspace.type_string" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="1135" source="D.KBaseGwasData.variationUnit" target="D.KBaseGwasData.populationVariationUnit" label="LIST_OF"><data key="moduleName">KBaseGwasData</data></edge><edge id="1172" source="D.KBaseNetworks.edge_type" target="M.KBaseNetworks.build_first_neighbor_network_limted_by_strength" label="METHOD_PARAM"><data key="moduleName">KBaseNetworks</data></edge><edge id="1170" source="D.KBaseNetworks.edge_type" target="M.KBaseNetworks.build_first_neighbor_network" label="METHOD_PARAM"><data key="moduleName">KBaseNetworks</data></edge><edge id="1176" source="D.KBaseNetworks.edge_type" target="M.KBaseNetworks.build_internal_network_limited_by_strength" label="METHOD_PARAM"><data key="moduleName">KBaseNetworks</data></edge><edge id="1174" source="D.KBaseNetworks.edge_type" target="M.KBaseNetworks.build_internal_network" label="METHOD_PARAM"><data key="moduleName">KBaseNetworks</data></edge><edge id="1664" source="D.PROM.RegulatoryInteraction" target="D.PROM.regulatory_network" label="LIST_OF"><data key="moduleName">PROM</data></edge><edge id="1017" source="D.KBaseFile.pairedlib_id" target="D.KBaseFile.AssemblyFile" label="LIST_OF"><data key="moduleName">KBaseFile</data></edge><edge id="511" source="D.KBaseAssembly.PairedEndLibrary" target="D.KBaseAssembly.AssemblyInput" label="LIST_OF"><data key="moduleName">KBaseAssembly</data></edge><edge id="1173" source="M.KBaseNetworks.build_first_neighbor_network_limted_by_strength" target="D.KBaseNetworks.Network" label="METHOD_RETURN"><data key="moduleName">KBaseNetworks</data></edge><edge id="571" source="D.KBaseCommunities.Table1DInt" target="D.KBaseCommunities.Abundance1DTableInt" label="SUBTYPE"><data key="moduleName">KBaseCommunities</data></edge><edge id="1379" source="D.KBaseTrees.newick_tree" target="M.KBaseTrees.extract_node_names" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1375" source="D.KBaseTrees.newick_tree" target="M.KBaseTrees.merge_zero_distance_leaves" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1431" source="D.KBaseTrees.newick_tree" target="M.KBaseTrees.draw_html_tree" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1372" source="D.KBaseTrees.newick_tree" target="M.KBaseTrees.remove_node_names_and_simplify" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1377" source="D.KBaseTrees.newick_tree" target="M.KBaseTrees.extract_leaf_node_names" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1382" source="D.KBaseTrees.newick_tree" target="M.KBaseTrees.get_leaf_count" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1368" source="D.KBaseTrees.newick_tree" target="M.KBaseTrees.replace_node_names" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1381" source="D.KBaseTrees.newick_tree" target="M.KBaseTrees.get_node_count" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1329" source="D.KBaseTrees.newick_tree" target="D.KBaseTrees.Tree" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1580" source="D.Ontology.domain" target="D.Ontology.domain_list" label="LIST_OF"><data key="moduleName">Ontology</data></edge><edge id="315" source="D.GenomeAnnotation.feature_type" target="D.GenomeAnnotation.feature" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1119" source="D.KBaseGwasData.filetypes" target="D.KBaseGwasData.GwasPopulationVariation" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="786" source="D.KBaseExpression.feature_ids" target="M.KBaseExpression.get_expression_float_data_table_by_samples_and_features" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="670" source="D.KBaseExpression.feature_ids" target="M.KBaseExpression.get_expression_data_by_samples_and_features" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="708" source="D.KBaseExpression.feature_ids" target="M.KBaseExpression.get_expression_data_by_feature_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="608" source="D.KBaseExpression.ontology_name" target="D.KBaseExpression.SampleAnnotation" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="578" source="D.KBaseCommunities.contact_information" target="D.KBaseCommunities.Project" label="SUBTYPE"><data key="moduleName">KBaseCommunities</data></edge><edge id="577" source="D.KBaseCommunities.contact_information" target="D.KBaseCommunities.Project" label="SUBTYPE"><data key="moduleName">KBaseCommunities</data></edge><edge id="1848" source="M.UserAndJobState.has_state" target="D.UserAndJobState.boolean" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="937" source="D.KBaseFBA.GapgenerationSolution" target="D.KBaseFBA.Gapgeneration" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1710" source="M.ProteinInfo.fids_to_operons" target="D.ProteinInfo.fid" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="1711" source="M.ProteinInfo.fids_to_operons" target="D.ProteinInfo.operon" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="186" source="D.ExpressionServices.gsm_data_errors" target="D.ExpressionServices.GenomeDataGSM" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="1187" source="D.KBaseOntology.Complex" target="D.KBaseOntology.Mapping" label="LIST_OF"><data key="moduleName">KBaseOntology</data></edge><edge id="1421" source="M.KBaseTrees.import_tree_from_cds" target="D.KBaseTrees.object_info" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="92" source="D.Communities.MetagenomeSetElement" target="D.Communities.MetagenomeSet" label="HASH_VALUE"><data key="moduleName">Communities</data></edge><edge id="2104" source="M.Workspace.copy_object" target="D.Workspace.object_info" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="702" source="M.KBaseExpression.get_expression_samples_data_by_ontology_ids" target="D.KBaseExpression.ontology_expression_data_sample_mapping" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="1561" source="D.NarrativeJobService.script_method" target="D.NarrativeJobService.step" label="SUBTYPE"><data key="moduleName">NarrativeJobService</data></edge><edge id="1221" source="D.KBasePPI.Date" target="D.KBasePPI.Publication" label="SUBTYPE"><data key="moduleName">KBasePPI</data></edge><edge id="749" source="M.KBaseExpression.get_expression_series_ids_by_series_external_source_ids" target="D.KBaseExpression.series_ids" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="2008" source="D.Workspace.ObjectSaveData" target="D.Workspace.SaveObjectsParams" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="832" source="D.KBaseFBA.ModelGapfill" target="D.KBaseFBA.FBAModel" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="898" source="D.KBaseFBA.expression_sample_ref" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="297" source="D.ExpressionServices.expression_platform_id" target="D.ExpressionServices.ExpressionSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="30" source="D.AskKB.cwd" target="M.AskKB.save" label="METHOD_PARAM"><data key="moduleName">AskKB</data></edge><edge id="25" source="D.AskKB.cwd" target="M.AskKB.askKB" label="METHOD_PARAM"><data key="moduleName">AskKB</data></edge><edge id="1070" source="D.KBaseGenomes.Contig" target="D.KBaseGenomes.Genome" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="1049" source="D.KBaseGenomes.Contig" target="D.KBaseGenomes.ContigSet" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="151" source="D.ExpressionServices.strain_id" target="D.ExpressionServices.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="168" source="D.ExpressionServices.strain_id" target="D.ExpressionServices.strain_expression_data_samples_mapping" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="147" source="D.ExpressionServices.strain_id" target="D.ExpressionServices.strain_ids" label="LIST_OF"><data key="moduleName">ExpressionServices</data></edge><edge id="627" source="D.KBaseExpression.ExpressionDataSample" target="D.KBaseExpression.expression_data_samples_map" label="HASH_VALUE"><data key="moduleName">KBaseExpression</data></edge><edge id="1156" source="D.KBaseNetworks.Dataset" target="D.KBaseNetworks.Network" label="LIST_OF"><data key="moduleName">KBaseNetworks</data></edge><edge id="327" source="D.GenomeAnnotation.close_genome" target="D.GenomeAnnotation.genomeTO" label="LIST_OF"><data key="moduleName">GenomeAnnotation</data></edge><edge id="531" source="D.KBaseBiochem.media_id" target="D.KBaseBiochem.Media" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="814" source="D.KBaseFBA.gapgen_id" target="D.KBaseFBA.ModelGapgen" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="815" source="D.KBaseFBA.gapgen_id" target="D.KBaseFBA.ModelGapgen" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="928" source="D.KBaseFBA.gapgen_id" target="D.KBaseFBA.Gapgeneration" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="748" source="D.KBaseExpression.external_source_ids" target="M.KBaseExpression.get_expression_series_ids_by_series_external_source_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="746" source="D.KBaseExpression.external_source_ids" target="M.KBaseExpression.get_expression_sample_ids_by_platform_external_source_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="744" source="D.KBaseExpression.external_source_ids" target="M.KBaseExpression.get_expression_sample_ids_by_sample_external_source_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="561" source="D.KBaseBiochem.ReactionGroup" target="D.KBaseBiochem.MetabolicMap" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="1961" source="M.Workspace.create_workspace" target="D.Workspace.workspace_info" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="544" source="D.KBaseBiochem.Compound" target="D.KBaseBiochem.Biochemistry" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="1341" source="D.KBaseTrees.viz_val_string" target="D.KBaseTrees.TreeDecoration" label="LIST_OF"><data key="moduleName">KBaseTrees</data></edge><edge id="69" source="D.Communities.StatList" target="D.Communities.Drisee" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="1050" source="D.KBaseGenomes.region_of_dna" target="D.KBaseGenomes.location" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="1238" source="D.KBaseProteinStructure.chains_t" target="D.KBaseProteinStructure.PDBMatch" label="SUBTYPE"><data key="moduleName">KBaseProteinStructure</data></edge><edge id="2147" source="D.Workspace.jsonschema" target="D.Workspace.ModuleInfo" label="HASH_VALUE"><data key="moduleName">Workspace</data></edge><edge id="2163" source="D.Workspace.jsonschema" target="D.Workspace.TypeInfo" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="835" source="D.KBaseFBA.Biomass" target="D.KBaseFBA.FBAModel" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1137" source="D.KBaseGwasData.topVariationUnit" target="D.KBaseGwasData.traitTopvariationUnit" label="LIST_OF"><data key="moduleName">KBaseGwasData</data></edge><edge id="687" source="D.KBaseExpression.strain_ids" target="M.KBaseExpression.get_expression_sample_ids_by_strain_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="684" source="D.KBaseExpression.strain_ids" target="M.KBaseExpression.get_expression_samples_data_by_strain_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="212" source="D.ExpressionServices.experimental_unit_ids" target="M.ExpressionServices.get_expression_sample_ids_by_experimental_unit_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="210" source="D.ExpressionServices.experimental_unit_ids" target="M.ExpressionServices.get_expression_samples_data_by_experimental_unit_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="330" source="D.GenomeAnnotation.variant_of_subsystem" target="D.GenomeAnnotation.variant_subsystem_pairs" label="LIST_OF"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1589" source="D.Ontology.GoIDMap2GoTermInfo" target="D.Ontology.GeneIDMap2GoInfo" label="HASH_VALUE"><data key="moduleName">Ontology</data></edge><edge id="875" source="D.KBaseFBA.GapfillingReaction" target="D.KBaseFBA.GapfillingSolution" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="872" source="D.KBaseFBA.GapfillingReaction" target="D.KBaseFBA.GapfillingSolution" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1440" source="M.KBaseTrees.construct_tree_for_alignment" target="D.KBaseTrees.job_id" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="647" source="D.KBaseExpression.contact_email" target="D.KBaseExpression.contact_people" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="1094" source="D.KBaseGenomes.Genome_ref" target="D.KBaseGenomes.GenomeDomainData" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1087" source="D.KBaseGenomes.Genome_ref" target="D.KBaseGenomes.ProbabilisticAnnotation" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1099" source="D.KBaseGenomes.Genome_ref" target="D.KBaseGenomes.GenomeComparisonGenome" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1097" source="D.KBaseGenomes.Genome_ref" target="D.KBaseGenomes.Pangenome" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="196" source="D.ExpressionServices.gsm_errors" target="D.ExpressionServices.GsmObject" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="425" source="M.GenomeAnnotation.annotate_proteins" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1595" source="D.Ontology.ontology_annotation_list" target="D.Ontology.GeneAnnotations" label="HASH_VALUE"><data key="moduleName">Ontology</data></edge><edge id="1181" source="D.KBaseOntology.role_ref" target="D.KBaseOntology.ComplexRole" label="SUBTYPE"><data key="moduleName">KBaseOntology</data></edge><edge id="1180" source="D.KBaseOntology.role_ref" target="D.KBaseOntology.Subsystem" label="LIST_OF"><data key="moduleName">KBaseOntology</data></edge><edge id="2092" source="M.Workspace.get_object_info_new" target="D.Workspace.object_info" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="335" source="D.GenomeAnnotation.fid_function_pairs" target="D.GenomeAnnotation.reconstructionTO" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1263" source="D.KBaseRegulation.RegulatorySite" target="D.KBaseRegulation.RegulatedOperon" label="LIST_OF"><data key="moduleName">KBaseRegulation</data></edge><edge id="677" source="M.KBaseExpression.get_expression_samples_data_by_experimental_unit_ids" target="D.KBaseExpression.experimental_unit_expression_data_samples_mapping" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="665" source="D.KBaseExpression.gse_warnings" target="D.KBaseExpression.GseObject" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="695" source="D.KBaseExpression.sample_type" target="M.KBaseExpression.get_expression_sample_ids_by_genome_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="688" source="D.KBaseExpression.sample_type" target="M.KBaseExpression.get_expression_sample_ids_by_strain_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="700" source="D.KBaseExpression.sample_type" target="M.KBaseExpression.get_expression_samples_data_by_ontology_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="685" source="D.KBaseExpression.sample_type" target="M.KBaseExpression.get_expression_samples_data_by_strain_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="709" source="D.KBaseExpression.sample_type" target="M.KBaseExpression.get_expression_data_by_feature_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="691" source="D.KBaseExpression.sample_type" target="M.KBaseExpression.get_expression_samples_data_by_genome_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="705" source="D.KBaseExpression.sample_type" target="M.KBaseExpression.get_expression_sample_ids_by_ontology_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="616" source="D.KBaseExpression.sample_type" target="D.KBaseExpression.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="759" source="D.KBaseExpression.sample_type" target="D.KBaseExpression.ExpressionSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="412" source="D.GenomeAnnotation.resolve_overlapping_features_parameters" target="M.GenomeAnnotation.resolve_overlapping_features" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="548" source="D.KBaseBiochem.Cue" target="D.KBaseBiochem.Biochemistry" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="1225" source="D.KBasePPI.InteractionID" target="D.KBasePPI.Interaction" label="SUBTYPE"><data key="moduleName">KBasePPI</data></edge><edge id="388" source="M.GenomeAnnotation.call_features_CDS_prodigal" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1042" source="D.KBaseGeneFamilies.SearchDomainsParams" target="M.KBaseGeneFamilies.search_domains" label="METHOD_PARAM"><data key="moduleName">KBaseGeneFamilies</data></edge><edge id="1830" source="M.Tree.get_leaf_to_feature_map" target="D.Tree.kbase_id" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="1829" source="M.Tree.get_leaf_to_feature_map" target="D.Tree.kbase_id" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="1469" source="D.MAK.StringDataTable" target="D.MAK.StringDataTableContainer" label="LIST_OF"><data key="moduleName">MAK</data></edge><edge id="1167" source="D.KBaseNetworks.network_type" target="M.KBaseNetworks.network_type2datasets" label="METHOD_PARAM"><data key="moduleName">KBaseNetworks</data></edge><edge id="1149" source="D.KBaseNetworks.network_type" target="D.KBaseNetworks.Dataset" label="SUBTYPE"><data key="moduleName">KBaseNetworks</data></edge><edge id="1933" source="D.UserProfile.username" target="M.UserProfile.lookup_globus_user" label="METHOD_PARAM"><data key="moduleName">UserProfile</data></edge><edge id="1928" source="D.UserProfile.username" target="M.UserProfile.get_user_profile" label="METHOD_PARAM"><data key="moduleName">UserProfile</data></edge><edge id="1923" source="D.UserProfile.username" target="D.UserProfile.User" label="SUBTYPE"><data key="moduleName">UserProfile</data></edge><edge id="2184" source="M.Workspace.get_all_func_info" target="D.Workspace.FuncInfo" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="826" source="D.KBaseFBA.source_id" target="D.KBaseFBA.FBAModel" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="998" source="D.KBaseFBA.ExternalGenomeClassPrediction" target="D.KBaseFBA.ClassifierResult" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="693" source="M.KBaseExpression.get_expression_samples_data_by_genome_ids" target="D.KBaseExpression.genome_expression_data_samples_mapping" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="503" source="M.InvocationService.valid_commands" target="D.InvocationService.command_group_desc" label="METHOD_RETURN"><data key="moduleName">InvocationService</data></edge><edge id="1462" source="D.MAK.MAKInputData" target="D.MAK.MAKParameters" label="LIST_OF"><data key="moduleName">MAK</data></edge><edge id="2127" source="D.Workspace.RegisterTypespecCopyParams" target="M.Workspace.register_typespec_copy" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="209" source="M.ExpressionServices.get_expression_sample_ids_by_series_ids" target="D.ExpressionServices.sample_ids" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="721" source="M.KBaseExpression.get_on_off_calls" target="D.KBaseExpression.sample_comparison_mapping" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="1553" source="M.MOTranslation.moLocusIds_to_fid_in_genome_fast" target="D.MOTranslation.status" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="1551" source="M.MOTranslation.moLocusIds_to_fid_in_genome_fast" target="D.MOTranslation.moLocusId" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="1552" source="M.MOTranslation.moLocusIds_to_fid_in_genome_fast" target="D.MOTranslation.result" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="24" source="D.AskKB.session_id" target="M.AskKB.askKB" label="METHOD_PARAM"><data key="moduleName">AskKB</data></edge><edge id="29" source="D.AskKB.session_id" target="M.AskKB.save" label="METHOD_PARAM"><data key="moduleName">AskKB</data></edge><edge id="23" source="D.AskKB.rows" target="D.AskKB.answer" label="SUBTYPE"><data key="moduleName">AskKB</data></edge><edge id="1925" source="D.UserProfile.User" target="D.UserProfile.UserProfile" label="SUBTYPE"><data key="moduleName">UserProfile</data></edge><edge id="536" source="D.KBaseBiochem.MediaReagent" target="D.KBaseBiochem.Media" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="1316" source="D.KBaseSearch.transcriptset_ref" target="D.KBaseSearch.Genome" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="334" source="D.GenomeAnnotation.fid_role_pairs" target="D.GenomeAnnotation.reconstructionTO" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1076" source="D.KBaseGenomes.Genome_quality_measure" target="D.KBaseGenomes.Genome" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1096" source="D.KBaseGenomes.FeatureDomainData" target="D.KBaseGenomes.GenomeDomainData" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="671" source="M.KBaseExpression.get_expression_data_by_samples_and_features" target="D.KBaseExpression.label_data_mapping" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="1801" source="M.Tree.extract_leaf_node_names" target="D.Tree.node_name" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="611" source="D.KBaseExpression.external_source_id" target="D.KBaseExpression.external_source_ids" label="LIST_OF"><data key="moduleName">KBaseExpression</data></edge><edge id="764" source="D.KBaseExpression.expression_sample_id" target="D.KBaseExpression.ExpressionSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="755" source="D.KBaseExpression.expression_sample_id" target="D.KBaseExpression.expression_sample_ids" label="LIST_OF"><data key="moduleName">KBaseExpression</data></edge><edge id="415" source="D.GenomeAnnotation.kmer_v1_parameters" target="M.GenomeAnnotation.call_features_ProtoCDS_kmer_v1" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="406" source="D.GenomeAnnotation.kmer_v1_parameters" target="M.GenomeAnnotation.annotate_proteins_kmer_v1" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="444" source="D.GenomeAnnotation.kmer_v1_parameters" target="D.GenomeAnnotation.pipeline_stage" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1131" source="D.KBaseGwasData.contig_details" target="D.KBaseGwasData.GwasTopVariations" label="LIST_OF"><data key="moduleName">KBaseGwasData</data></edge><edge id="1153" source="D.KBaseNetworks.boolean" target="D.KBaseNetworks.Edge" label="SUBTYPE"><data key="moduleName">KBaseNetworks</data></edge><edge id="675" source="M.KBaseExpression.get_expression_sample_ids_by_series_ids" target="D.KBaseExpression.sample_ids" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="1858" source="D.UserAndJobState.progress_type" target="D.UserAndJobState.InitProgress" label="SUBTYPE"><data key="moduleName">UserAndJobState</data></edge><edge id="1155" source="D.KBaseNetworks.Node" target="D.KBaseNetworks.Network" label="LIST_OF"><data key="moduleName">KBaseNetworks</data></edge><edge id="74" source="D.Communities.Drisee" target="D.Communities.StatsQC" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="223" source="M.ExpressionServices.get_expression_sample_ids_by_strain_ids" target="D.ExpressionServices.sample_ids" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="313" source="D.GenomeAnnotation.feature_id" target="D.GenomeAnnotation.feature" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="341" source="M.GenomeAnnotation.create_genome_from_SEED" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1506" source="M.MEME.find_sites_with_mast_by_collection" target="D.MEME.MastRunResult" label="METHOD_RETURN"><data key="moduleName">MEME</data></edge><edge id="1564" source="D.NarrativeJobService.step" target="D.NarrativeJobService.app" label="LIST_OF"><data key="moduleName">NarrativeJobService</data></edge><edge id="1662" source="D.PROM.feature_id" target="D.PROM.RegulatoryInteraction" label="SUBTYPE"><data key="moduleName">PROM</data></edge><edge id="1663" source="D.PROM.feature_id" target="D.PROM.RegulatoryInteraction" label="SUBTYPE"><data key="moduleName">PROM</data></edge><edge id="1656" source="D.PROM.feature_id" target="D.PROM.BooleanGeneExpressionData" label="HASH_KEY"><data key="moduleName">PROM</data></edge><edge id="2049" source="M.Workspace.list_workspaces" target="D.Workspace.workspace_metadata" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="1756" source="M.RDPTools.seqmatch_check" target="D.RDPTools.Handle" label="METHOD_RETURN"><data key="moduleName">RDPTools</data></edge><edge id="261" source="M.ExpressionServices.get_expression_samples_descriptions" target="D.ExpressionServices.samples_string_map" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="163" source="D.ExpressionServices.expression_data_samples_map" target="D.ExpressionServices.series_expression_data_samples_mapping" label="HASH_VALUE"><data key="moduleName">ExpressionServices</data></edge><edge id="173" source="D.ExpressionServices.expression_data_samples_map" target="D.ExpressionServices.ontology_expression_data_sample_mapping" label="HASH_VALUE"><data key="moduleName">ExpressionServices</data></edge><edge id="169" source="D.ExpressionServices.expression_data_samples_map" target="D.ExpressionServices.strain_expression_data_samples_mapping" label="HASH_VALUE"><data key="moduleName">ExpressionServices</data></edge><edge id="165" source="D.ExpressionServices.expression_data_samples_map" target="D.ExpressionServices.experimental_unit_expression_data_samples_mapping" label="HASH_VALUE"><data key="moduleName">ExpressionServices</data></edge><edge id="233" source="D.ExpressionServices.genome_id" target="M.ExpressionServices.get_expression_samples_data_by_ontology_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="238" source="D.ExpressionServices.genome_id" target="M.ExpressionServices.get_expression_sample_ids_by_ontology_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="152" source="D.ExpressionServices.genome_id" target="D.ExpressionServices.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="286" source="D.ExpressionServices.genome_id" target="D.ExpressionServices.Strain" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="287" source="D.ExpressionServices.genome_id" target="D.ExpressionServices.ExpressionPlatform" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="295" source="D.ExpressionServices.genome_id" target="D.ExpressionServices.ExpressionSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="170" source="D.ExpressionServices.genome_id" target="D.ExpressionServices.genome_expression_data_samples_mapping" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="188" source="D.ExpressionServices.genome_id" target="D.ExpressionServices.gsm_data" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="290" source="D.ExpressionServices.genome_id" target="D.ExpressionServices.genome_expression_sample_ids_map" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="148" source="D.ExpressionServices.genome_id" target="D.ExpressionServices.genome_ids" label="LIST_OF"><data key="moduleName">ExpressionServices</data></edge><edge id="399" source="M.GenomeAnnotation.call_features_prophage_phispy" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1162" source="M.KBaseNetworks.all_network_types" target="D.KBaseNetworks.network_type" label="METHOD_RETURN"><data key="moduleName">KBaseNetworks</data></edge><edge id="354" source="M.GenomeAnnotation.add_features" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1964" source="D.Workspace.AlterWorkspaceMetadataParams" target="M.Workspace.alter_workspace_metadata" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="1819" source="M.Tree.get_tree_ids_by_protein_sequence" target="D.Tree.kbase_id" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="521" source="D.KBaseBiochem.compartment_ref" target="D.KBaseBiochem.Reagent" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="368" source="M.GenomeAnnotation.call_selenoproteins" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1436" source="D.KBaseTrees.ConstructMultipleAlignmentParams" target="M.KBaseTrees.construct_multiple_alignment" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1202" source="D.KBaseOntology.ParentTerm" target="D.KBaseOntology.OntologyTerm" label="LIST_OF"><data key="moduleName">KBaseOntology</data></edge><edge id="1667" source="D.PROM.annotation_uuid" target="D.PROM.PromConstraint" label="SUBTYPE"><data key="moduleName">PROM</data></edge><edge id="750" source="M.KBaseExpression.get_GEO_GSE" target="D.KBaseExpression.GseObject" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="668" source="M.KBaseExpression.get_expression_samples_data" target="D.KBaseExpression.expression_data_samples_map" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="1045" source="D.KBaseGenomes.ContigSet_id" target="D.KBaseGenomes.ContigSet" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1936" source="D.Workspace.ws_name" target="D.Workspace.WorkspaceIdentity" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1945" source="D.Workspace.ws_name" target="D.Workspace.SubObjectIdentity" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2006" source="D.Workspace.ws_name" target="D.Workspace.SaveObjectsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1957" source="D.Workspace.ws_name" target="D.Workspace.CreateWorkspaceParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1966" source="D.Workspace.ws_name" target="D.Workspace.CloneWorkspaceParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2060" source="D.Workspace.ws_name" target="D.Workspace.list_workspace_objects_params" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1938" source="D.Workspace.ws_name" target="D.Workspace.ObjectIdentity" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2082" source="D.Workspace.ws_name" target="D.Workspace.get_objectmeta_params" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2094" source="D.Workspace.ws_name" target="D.Workspace.RenameWorkspaceParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1980" source="D.Workspace.ws_name" target="D.Workspace.SetPermissionsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1997" source="D.Workspace.ws_name" target="D.Workspace.save_object_params" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1973" source="D.Workspace.ws_name" target="D.Workspace.get_workspacemeta_params" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1985" source="D.Workspace.ws_name" target="D.Workspace.SetGlobalPermissionsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2012" source="D.Workspace.ws_name" target="D.Workspace.get_object_params" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1989" source="D.Workspace.ws_name" target="D.Workspace.SetWorkspaceDescriptionParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2065" source="D.Workspace.ws_name" target="D.Workspace.ListObjectsParams" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="957" source="D.KBaseFBA.compound_ref" target="D.KBaseFBA.TemplateBiomassComponent" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="795" source="D.KBaseFBA.compound_ref" target="D.KBaseFBA.ModelCompound" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="959" source="D.KBaseFBA.compound_ref" target="D.KBaseFBA.TemplateBiomassComponent" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="850" source="D.KBaseFBA.compound_ref" target="D.KBaseFBA.FBAMinimalMediaResult" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="851" source="D.KBaseFBA.compound_ref" target="D.KBaseFBA.FBAMinimalMediaResult" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="52" source="D.Cmonkey.network_ws_ref" target="D.Cmonkey.CmonkeyRunParameters" label="SUBTYPE"><data key="moduleName">Cmonkey</data></edge><edge id="1254" source="D.KBaseRegulation.genome_id" target="D.KBaseRegulation.Genome" label="SUBTYPE"><data key="moduleName">KBaseRegulation</data></edge><edge id="1511" source="D.MEME.meme_run_result_ref" target="M.MEME.get_pspm_collection_from_meme_result_job_from_ws" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1474" source="D.MEME.meme_run_result_ref" target="D.MEME.MemePSPMCollection" label="SUBTYPE"><data key="moduleName">MEME</data></edge><edge id="2132" source="D.Workspace.ListModulesParams" target="M.Workspace.list_modules" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2099" source="D.Workspace.RenameObjectParams" target="M.Workspace.rename_object" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="1033" source="D.KBaseGeneFamilies.ws_lib_id" target="D.KBaseGeneFamilies.DomainModelSet" label="HASH_VALUE"><data key="moduleName">KBaseGeneFamilies</data></edge><edge id="1079" source="D.KBaseGenomes.Protein_id" target="D.KBaseGenomes.Protein" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="56" source="D.CoExpression.FilterGenesParams" target="M.CoExpression.filter_genes" label="METHOD_PARAM"><data key="moduleName">CoExpression</data></edge><edge id="2018" source="D.Workspace.username" target="D.Workspace.ObjectProvenanceInfo" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2131" source="D.Workspace.username" target="D.Workspace.ListModulesParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2186" source="D.Workspace.username" target="D.Workspace.GrantModuleOwnershipParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2029" source="D.Workspace.username" target="D.Workspace.ObjectData" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2190" source="D.Workspace.username" target="D.Workspace.RemoveModuleOwnershipParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2069" source="D.Workspace.username" target="D.Workspace.ListObjectsParams" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="1983" source="D.Workspace.username" target="D.Workspace.SetPermissionsParams" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2143" source="D.Workspace.username" target="D.Workspace.ModuleInfo" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2051" source="D.Workspace.username" target="D.Workspace.ListWorkspaceInfoParams" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="157" source="D.ExpressionServices.person_ids" target="D.ExpressionServices.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="1130" source="D.KBaseGwasData.GwasPopulation_obj_id" target="D.KBaseGwasData.GwasTopVariations" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="1122" source="D.KBaseGwasData.GwasPopulation_obj_id" target="D.KBaseGwasData.GwasPopulationTrait" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="1126" source="D.KBaseGwasData.GwasPopulation_obj_id" target="D.KBaseGwasData.GwasPopulationKinship" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="1117" source="D.KBaseGwasData.GwasPopulation_obj_id" target="D.KBaseGwasData.GwasPopulationVariation" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="1648" source="M.ProbabilisticAnnotation.get_rxnprobs" target="D.ProbabilisticAnnotation.reaction_probability_list" label="METHOD_RETURN"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1972" source="M.Workspace.lock_workspace" target="D.Workspace.workspace_info" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="181" source="D.ExpressionServices.contact_email" target="D.ExpressionServices.contact_people" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="439" source="M.GenomeAnnotation.renumber_features" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1001" source="D.KBaseFile.handle_id" target="D.KBaseFile.Handle" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="1932" source="D.UserProfile.SetUserProfileParams" target="M.UserProfile.update_user_profile" label="METHOD_PARAM"><data key="moduleName">UserProfile</data></edge><edge id="1931" source="D.UserProfile.SetUserProfileParams" target="M.UserProfile.set_user_profile" label="METHOD_PARAM"><data key="moduleName">UserProfile</data></edge><edge id="397" source="M.GenomeAnnotation.call_features_repeat_region_SEED" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1924" source="D.UserProfile.realname" target="D.UserProfile.User" label="SUBTYPE"><data key="moduleName">UserProfile</data></edge><edge id="115" source="D.ERDB_Service.fields" target="M.ERDB_Service.GetAll" label="METHOD_PARAM"><data key="moduleName">ERDB_Service</data></edge><edge id="288" source="D.ExpressionServices.Strain" target="D.ExpressionServices.ExpressionPlatform" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="301" source="D.ExpressionServices.Strain" target="D.ExpressionServices.ExpressionSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="1488" source="D.MEME.MemeRunParameters" target="M.MEME.find_motifs_with_meme_job_from_ws" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1487" source="D.MEME.MemeRunParameters" target="M.MEME.find_motifs_with_meme_from_ws" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1485" source="D.MEME.MemeRunParameters" target="M.MEME.find_motifs_with_meme" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1473" source="D.MEME.MemeRunParameters" target="D.MEME.MemeRunResult" label="SUBTYPE"><data key="moduleName">MEME</data></edge><edge id="1120" source="D.KBaseGwasData.GwasPopulationVariation_obj_id" target="D.KBaseGwasData.GwasPopulationVariation" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="1125" source="D.KBaseGwasData.GwasPopulationVariation_obj_id" target="D.KBaseGwasData.GwasPopulationKinship" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="1129" source="D.KBaseGwasData.GwasPopulationVariation_obj_id" target="D.KBaseGwasData.GwasTopVariations" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="564" source="D.KBaseBiochem.MapLink" target="D.KBaseBiochem.MetabolicMap" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="645" source="D.KBaseExpression.contact_last_name" target="D.KBaseExpression.ContactPerson" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="1999" source="M.Workspace.save_object" target="D.Workspace.object_metadata" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="432" source="M.GenomeAnnotation.call_features_strep_pneumo_repeat" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1255" source="D.KBaseRegulation.genome_ref" target="D.KBaseRegulation.Genome" label="SUBTYPE"><data key="moduleName">KBaseRegulation</data></edge><edge id="992" source="D.KBaseFBA.ClassifierClasses" target="D.KBaseFBA.Classifier" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1683" source="M.PROM.add_expression_data_to_collection" target="D.PROM.status" label="METHOD_RETURN"><data key="moduleName">PROM</data></edge><edge id="989" source="D.KBaseFBA.expression_series_ref" target="D.KBaseFBA.PromConstraint" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="292" source="D.ExpressionServices.Person" target="D.ExpressionServices.persons" label="LIST_OF"><data key="moduleName">ExpressionServices</data></edge><edge id="802" source="D.KBaseFBA.ModelReactionProteinSubunit" target="D.KBaseFBA.ModelReactionProtein" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1204" source="D.KBaseOntology.OntologyTerm" target="D.KBaseOntology.OntologyAccMap" label="HASH_VALUE"><data key="moduleName">KBaseOntology</data></edge><edge id="348" source="M.GenomeAnnotation.add_contigs" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="140" source="D.ExpressionServices.sample_annotation_id" target="D.ExpressionServices.SampleAnnotation" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="698" source="D.KBaseExpression.ontology_ids" target="M.KBaseExpression.get_expression_samples_data_by_ontology_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="703" source="D.KBaseExpression.ontology_ids" target="M.KBaseExpression.get_expression_sample_ids_by_ontology_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="660" source="D.KBaseExpression.ontology_ids" target="D.KBaseExpression.GsmObject" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="717" source="D.KBaseExpression.sample_ids" target="M.KBaseExpression.compare_samples_vs_the_average" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="734" source="D.KBaseExpression.sample_ids" target="M.KBaseExpression.get_expression_samples_original_log2_medians" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="669" source="D.KBaseExpression.sample_ids" target="M.KBaseExpression.get_expression_data_by_samples_and_features" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="728" source="D.KBaseExpression.sample_ids" target="M.KBaseExpression.get_expression_samples_molecules" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="718" source="D.KBaseExpression.sample_ids" target="M.KBaseExpression.compare_samples_vs_the_average" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="785" source="D.KBaseExpression.sample_ids" target="M.KBaseExpression.get_expression_float_data_table_by_samples_and_features" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="726" source="D.KBaseExpression.sample_ids" target="M.KBaseExpression.get_expression_samples_descriptions" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="724" source="D.KBaseExpression.sample_ids" target="M.KBaseExpression.get_expression_samples_titles" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="715" source="D.KBaseExpression.sample_ids" target="M.KBaseExpression.compare_samples_vs_default_controls" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="730" source="D.KBaseExpression.sample_ids" target="M.KBaseExpression.get_expression_samples_types" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="732" source="D.KBaseExpression.sample_ids" target="M.KBaseExpression.get_expression_samples_external_source_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="667" source="D.KBaseExpression.sample_ids" target="M.KBaseExpression.get_expression_samples_data" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="1764" source="D.TaxonomyTranslation.Names" target="D.TaxonomyTranslation.Translations" label="HASH_VALUE"><data key="moduleName">TaxonomyTranslation</data></edge><edge id="1284" source="D.KBaseSearch.contigset_id" target="D.KBaseSearch.ContigSet" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="1040" source="D.KBaseGeneFamilies.genome_ref" target="D.KBaseGeneFamilies.SearchDomainsParams" label="SUBTYPE"><data key="moduleName">KBaseGeneFamilies</data></edge><edge id="1035" source="D.KBaseGeneFamilies.genome_ref" target="D.KBaseGeneFamilies.DomainAnnotation" label="SUBTYPE"><data key="moduleName">KBaseGeneFamilies</data></edge><edge id="390" source="M.GenomeAnnotation.call_features_CDS_genemark" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1020" source="D.KBaseCommon.StrainInfo" target="D.KBaseFile.AnnotationFile" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="1005" source="D.KBaseCommon.StrainInfo" target="D.KBaseFile.PairedEndLibrary" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="1011" source="D.KBaseCommon.StrainInfo" target="D.KBaseFile.SingleEndLibrary" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="1015" source="D.KBaseCommon.StrainInfo" target="D.KBaseFile.AssemblyFile" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="4" source="M.AbstractHandle.localize_handle" target="D.AbstractHandle.Handle" label="METHOD_RETURN"><data key="moduleName">AbstractHandle</data></edge><edge id="1239" source="D.KBaseProteinStructure.exact_t" target="D.KBaseProteinStructure.PDBMatch" label="SUBTYPE"><data key="moduleName">KBaseProteinStructure</data></edge><edge id="514" source="D.KBaseBiochem.compound_id" target="D.KBaseBiochem.Compound" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="549" source="D.KBaseBiochem.compound_id" target="D.KBaseBiochem.Biochemistry" label="HASH_KEY"><data key="moduleName">KBaseBiochem</data></edge><edge id="970" source="D.KBaseFBA.TemplateBiomass" target="D.KBaseFBA.ModelTemplate" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1175" source="M.KBaseNetworks.build_internal_network" target="D.KBaseNetworks.Network" label="METHOD_RETURN"><data key="moduleName">KBaseNetworks</data></edge><edge id="1643" source="M.ProbabilisticAnnotation.calculate" target="D.ProbabilisticAnnotation.object_metadata" label="METHOD_RETURN"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="612" source="D.KBaseExpression.person_id" target="D.KBaseExpression.person_ids" label="LIST_OF"><data key="moduleName">KBaseExpression</data></edge><edge id="1698" source="D.PROM.genome_object_id" target="D.PROM.CreatePromConstraintsParameters" label="SUBTYPE"><data key="moduleName">PROM</data></edge><edge id="1797" source="M.Tree.remove_node_names_and_simplify" target="D.Tree.newick_tree" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="1824" source="M.Tree.get_tree_ids_by_source_id_pattern" target="D.Tree.kbase_id" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="1252" source="D.KBaseRegulation.effector_id" target="D.KBaseRegulation.Effector" label="SUBTYPE"><data key="moduleName">KBaseRegulation</data></edge><edge id="1525" source="D.MOTranslation.protein_sequence" target="D.MOTranslation.query_sequence" label="SUBTYPE"><data key="moduleName">MOTranslation</data></edge><edge id="190" source="D.ExpressionServices.gsm_sample_characteristics" target="D.ExpressionServices.GsmObject" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="284" source="M.ExpressionServices.get_GEO_GSE" target="D.ExpressionServices.GseObject" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="1393" source="M.KBaseTrees.get_tree_data" target="D.KBaseTrees.TreeMetaData" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="1392" source="M.KBaseTrees.get_tree_data" target="D.KBaseTrees.kbase_id" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="1503" source="D.MEME.MemePSPMCollection" target="M.MEME.find_sites_with_mast_by_collection" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1490" source="D.MEME.MemePSPMCollection" target="M.MEME.compare_motifs_with_tomtom" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1494" source="D.MEME.MemePSPMCollection" target="M.MEME.compare_motifs_with_tomtom_by_collection" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1493" source="D.MEME.MemePSPMCollection" target="M.MEME.compare_motifs_with_tomtom_by_collection" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="2152" source="D.Workspace.GetModuleInfoParams" target="M.Workspace.get_module_info" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="1299" source="D.KBaseSearch.annotation" target="D.KBaseSearch.Feature" label="LIST_OF"><data key="moduleName">KBaseSearch</data></edge><edge id="1728" source="M.ProteinInfo.fids_to_orthologs" target="D.ProteinInfo.orthologs" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="1727" source="M.ProteinInfo.fids_to_orthologs" target="D.ProteinInfo.fid" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="133" source="D.ExpressionServices.feature_id" target="D.ExpressionServices.data_sample_comparison" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="183" source="D.ExpressionServices.feature_id" target="D.ExpressionServices.gsm_data_set" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="176" source="D.ExpressionServices.feature_id" target="D.ExpressionServices.feature_sample_measurement_mapping" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="130" source="D.ExpressionServices.feature_id" target="D.ExpressionServices.data_expression_levels_for_sample" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="121" source="D.ExpressionServices.feature_id" target="D.ExpressionServices.feature_ids" label="LIST_OF"><data key="moduleName">ExpressionServices</data></edge><edge id="1121" source="D.KBaseGwasData.genome_details" target="D.KBaseGwasData.GwasPopulationTrait" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="1124" source="D.KBaseGwasData.genome_details" target="D.KBaseGwasData.GwasPopulationKinship" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="1128" source="D.KBaseGwasData.genome_details" target="D.KBaseGwasData.GwasTopVariations" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="1115" source="D.KBaseGwasData.genome_details" target="D.KBaseGwasData.GwasPopulation" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="1118" source="D.KBaseGwasData.genome_details" target="D.KBaseGwasData.GwasPopulationVariation" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="1371" source="M.KBaseTrees.replace_node_names" target="D.KBaseTrees.newick_tree" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="2103" source="D.Workspace.CopyObjectParams" target="M.Workspace.copy_object" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="1409" source="D.KBaseTrees.kbase_id" target="M.KBaseTrees.get_leaf_to_feature_map" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1397" source="D.KBaseTrees.kbase_id" target="M.KBaseTrees.get_tree_ids_by_feature" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1399" source="D.KBaseTrees.kbase_id" target="M.KBaseTrees.get_tree_ids_by_protein_sequence" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1389" source="D.KBaseTrees.kbase_id" target="M.KBaseTrees.get_alignment" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1406" source="D.KBaseTrees.kbase_id" target="M.KBaseTrees.get_leaf_to_protein_map" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1387" source="D.KBaseTrees.kbase_id" target="M.KBaseTrees.get_tree" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1401" source="D.KBaseTrees.kbase_id" target="M.KBaseTrees.get_alignment_ids_by_feature" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1403" source="D.KBaseTrees.kbase_id" target="M.KBaseTrees.get_alignment_ids_by_protein_sequence" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1394" source="D.KBaseTrees.kbase_id" target="M.KBaseTrees.get_alignment_data" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1391" source="D.KBaseTrees.kbase_id" target="M.KBaseTrees.get_tree_data" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1422" source="D.KBaseTrees.kbase_id" target="D.KBaseTrees.AbundanceParams" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1412" source="D.KBaseTrees.kbase_id" target="D.KBaseTrees.CdsImportTreeParameters" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1383" source="D.KBaseTrees.kbase_id" target="D.KBaseTrees.TreeMetaData" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1363" source="D.KBaseTrees.kbase_id" target="D.KBaseTrees.MSA" label="LIST_OF"><data key="moduleName">KBaseTrees</data></edge><edge id="1337" source="D.KBaseTrees.kbase_id" target="D.KBaseTrees.Tree" label="LIST_OF"><data key="moduleName">KBaseTrees</data></edge><edge id="1385" source="D.KBaseTrees.kbase_id" target="D.KBaseTrees.AlignmentMetaData" label="LIST_OF"><data key="moduleName">KBaseTrees</data></edge><edge id="1523" source="M.MOTranslation.moLocusIds_to_proteins" target="D.MOTranslation.protein" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="1522" source="M.MOTranslation.moLocusIds_to_proteins" target="D.MOTranslation.moLocusId" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="1444" source="M.KmerAnnotationByFigfam.annotate_proteins_fasta" target="D.KmerAnnotationByFigfam.hit" label="METHOD_RETURN"><data key="moduleName">KmerAnnotationByFigfam</data></edge><edge id="496" source="D.Inferelator.gene_id" target="D.Inferelator.InferelatorHit" label="SUBTYPE"><data key="moduleName">Inferelator</data></edge><edge id="492" source="D.Inferelator.gene_id" target="D.Inferelator.GeneList" label="LIST_OF"><data key="moduleName">Inferelator</data></edge><edge id="787" source="M.KBaseExpression.get_expression_float_data_table_by_samples_and_features" target="D.KBaseExpression.FloatDataTable" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="1466" source="M.MAK.search_MAK_results_from_ws" target="D.MAK.MAKBiclusterSet" label="METHOD_RETURN"><data key="moduleName">MAK</data></edge><edge id="6" source="M.AbstractHandle.initialize_handle" target="D.AbstractHandle.Handle" label="METHOD_RETURN"><data key="moduleName">AbstractHandle</data></edge><edge id="969" source="D.KBaseFBA.TemplateReaction" target="D.KBaseFBA.ModelTemplate" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1783" source="D.Transform.DownloadParameters" target="M.Transform.download" label="METHOD_PARAM"><data key="moduleName">Transform</data></edge><edge id="27" source="M.AskKB.askKB" target="D.AskKB.type" label="METHOD_RETURN"><data key="moduleName">AskKB</data></edge><edge id="28" source="M.AskKB.askKB" target="D.AskKB.answer" label="METHOD_RETURN"><data key="moduleName">AskKB</data></edge><edge id="597" source="D.KBaseExpression.measurement" target="D.KBaseExpression.data_expression_levels_for_sample" label="HASH_VALUE"><data key="moduleName">KBaseExpression</data></edge><edge id="641" source="D.KBaseExpression.measurement" target="D.KBaseExpression.sample_measurement_mapping" label="HASH_VALUE"><data key="moduleName">KBaseExpression</data></edge><edge id="1256" source="D.KBaseRegulation.regulatory_site_id" target="D.KBaseRegulation.RegulatorySite" label="SUBTYPE"><data key="moduleName">KBaseRegulation</data></edge><edge id="385" source="D.GenomeAnnotation.glimmer3_parameters" target="M.GenomeAnnotation.call_features_CDS_glimmer3" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="443" source="D.GenomeAnnotation.glimmer3_parameters" target="D.GenomeAnnotation.pipeline_stage" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="54" source="D.Cmonkey.CmonkeyNetwork" target="D.Cmonkey.CmonkeyRunResult" label="SUBTYPE"><data key="moduleName">Cmonkey</data></edge><edge id="1430" source="M.KBaseTrees.filter_abundance_profile" target="D.KBaseTrees.abundance_data" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="2068" source="D.Workspace.permission" target="D.Workspace.ListObjectsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1982" source="D.Workspace.permission" target="D.Workspace.SetPermissionsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1967" source="D.Workspace.permission" target="D.Workspace.CloneWorkspaceParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1958" source="D.Workspace.permission" target="D.Workspace.CreateWorkspaceParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2050" source="D.Workspace.permission" target="D.Workspace.ListWorkspaceInfoParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1987" source="D.Workspace.permission" target="D.Workspace.SetGlobalPermissionsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="476" source="M.IdMap.lookup_feature_synonyms" target="D.IdMap.IdPair" label="METHOD_RETURN"><data key="moduleName">IdMap</data></edge><edge id="185" source="D.ExpressionServices.gsm_data_warnings" target="D.ExpressionServices.GenomeDataGSM" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="2188" source="D.Workspace.GrantModuleOwnershipParams" target="M.Workspace.grant_module_ownership" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="707" source="M.KBaseExpression.get_expression_sample_ids_by_ontology_ids" target="D.KBaseExpression.sample_ids" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="281" source="M.ExpressionServices.get_expression_sample_ids_by_platform_external_source_ids" target="D.ExpressionServices.sample_ids" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="1250" source="M.KBaseProteinStructure.lookup_pdb_by_fid" target="D.KBaseProteinStructure.fid_to_pdb_matches" label="METHOD_RETURN"><data key="moduleName">KBaseProteinStructure</data></edge><edge id="2034" source="D.Workspace.id_type" target="D.Workspace.ObjectData" label="HASH_KEY"><data key="moduleName">Workspace</data></edge><edge id="2023" source="D.Workspace.id_type" target="D.Workspace.ObjectProvenanceInfo" label="HASH_KEY"><data key="moduleName">Workspace</data></edge><edge id="1041" source="D.KBaseGeneFamilies.dms_ref" target="D.KBaseGeneFamilies.SearchDomainsParams" label="SUBTYPE"><data key="moduleName">KBaseGeneFamilies</data></edge><edge id="1036" source="D.KBaseGeneFamilies.dms_ref" target="D.KBaseGeneFamilies.DomainAnnotation" label="SUBTYPE"><data key="moduleName">KBaseGeneFamilies</data></edge><edge id="829" source="D.KBaseFBA.metagenome_otu_ref" target="D.KBaseFBA.FBAModel" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="1110" source="D.KBaseGwasData.VariationSampleMetaData" target="D.KBaseGwasData.VariationSample" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="1113" source="D.KBaseGwasData.VariationSampleMetaData" target="D.KBaseGwasData.VariantCall" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="1106" source="D.KBaseGwasData.VariationSampleMetaData" target="D.KBaseGwasData.VariationSamplesMetaData" label="LIST_OF"><data key="moduleName">KBaseGwasData</data></edge><edge id="279" source="M.ExpressionServices.get_expression_sample_ids_by_sample_external_source_ids" target="D.ExpressionServices.sample_ids" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="1775" source="M.TaxonomyTranslation.get_tax_id_by_scientific_name" target="D.TaxonomyTranslation.Tax_id" label="METHOD_RETURN"><data key="moduleName">TaxonomyTranslation</data></edge><edge id="526" source="D.KBaseBiochem.Reagent" target="D.KBaseBiochem.Reaction" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="1301" source="D.KBaseSearch.regulon_data" target="D.KBaseSearch.Feature" label="LIST_OF"><data key="moduleName">KBaseSearch</data></edge><edge id="108" source="D.Empty.handle_id" target="D.Empty.AHandle" label="SUBTYPE"><data key="moduleName">Empty</data></edge><edge id="804" source="D.KBaseFBA.reaction_ref" target="D.KBaseFBA.ModelReaction" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="862" source="D.KBaseFBA.reaction_ref" target="D.KBaseFBA.GapfillingReaction" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="963" source="D.KBaseFBA.reaction_ref" target="D.KBaseFBA.TemplateReaction" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="954" source="D.KBaseFBA.reaction_ref" target="D.KBaseFBA.Gapfilling" label="HASH_KEY"><data key="moduleName">KBaseFBA</data></edge><edge id="951" source="D.KBaseFBA.reaction_ref" target="D.KBaseFBA.Gapfilling" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="950" source="D.KBaseFBA.reaction_ref" target="D.KBaseFBA.Gapfilling" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="952" source="D.KBaseFBA.reaction_ref" target="D.KBaseFBA.Gapfilling" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1370" source="D.KBaseTrees.node_name" target="M.KBaseTrees.replace_node_names" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="927" source="D.KBaseFBA.GapgenerationSolutionReaction" target="D.KBaseFBA.GapgenerationSolution" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="830" source="D.KBaseFBA.template_ref" target="D.KBaseFBA.FBAModel" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="831" source="D.KBaseFBA.template_ref" target="D.KBaseFBA.FBAModel" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="2" source="M.AbstractHandle.new_handle" target="D.AbstractHandle.Handle" label="METHOD_RETURN"><data key="moduleName">AbstractHandle</data></edge><edge id="905" source="D.KBaseFBA.FBAConstraint" target="D.KBaseFBA.FBA" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="995" source="D.KBaseFBA.ClassData" target="D.KBaseFBA.ClassifierTrainingSet" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="474" source="M.IdMap.lookup_genome" target="D.IdMap.IdPair" label="METHOD_RETURN"><data key="moduleName">IdMap</data></edge><edge id="1220" source="D.KBasePPI.PublicationID" target="D.KBasePPI.Publication" label="SUBTYPE"><data key="moduleName">KBasePPI</data></edge><edge id="1632" source="D.ProbabilisticAnnotation.bool" target="D.ProbabilisticAnnotation.AnnotateParams" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1631" source="D.ProbabilisticAnnotation.bool" target="D.ProbabilisticAnnotation.AnnotateParams" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1641" source="D.ProbabilisticAnnotation.bool" target="D.ProbabilisticAnnotation.CalculateParams" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1780" source="D.Transform.type_string" target="D.Transform.UploadParameters" label="SUBTYPE"><data key="moduleName">Transform</data></edge><edge id="1782" source="D.Transform.type_string" target="D.Transform.DownloadParameters" label="SUBTYPE"><data key="moduleName">Transform</data></edge><edge id="1784" source="D.Transform.type_string" target="D.Transform.ConvertParameters" label="SUBTYPE"><data key="moduleName">Transform</data></edge><edge id="1785" source="D.Transform.type_string" target="D.Transform.ConvertParameters" label="SUBTYPE"><data key="moduleName">Transform</data></edge><edge id="1177" source="M.KBaseNetworks.build_internal_network_limited_by_strength" target="D.KBaseNetworks.Network" label="METHOD_RETURN"><data key="moduleName">KBaseNetworks</data></edge><edge id="861" source="D.KBaseFBA.QuantOptBoundMod" target="D.KBaseFBA.QuantitativeOptimizationSolution" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="255" source="M.ExpressionServices.get_on_off_calls" target="D.ExpressionServices.sample_comparison_mapping" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="1395" source="M.KBaseTrees.get_alignment_data" target="D.KBaseTrees.kbase_id" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="1396" source="M.KBaseTrees.get_alignment_data" target="D.KBaseTrees.AlignmentMetaData" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="1085" source="D.KBaseGenomes.Protein" target="D.KBaseGenomes.ProteinSet" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="78" source="D.Communities.Reference" target="D.Communities.SequenceSet" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="82" source="D.Communities.Reference" target="D.Communities.Profile" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="64" source="D.Communities.Reference" target="D.Communities.DataHandle" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="80" source="D.Communities.Reference" target="D.Communities.SequenceSet" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="81" source="D.Communities.Reference" target="D.Communities.Profile" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="67" source="D.Communities.Reference" target="D.Communities.Collection" label="LIST_OF"><data key="moduleName">Communities</data></edge><edge id="68" source="D.Communities.Reference" target="D.Communities.List" label="LIST_OF"><data key="moduleName">Communities</data></edge><edge id="1520" source="M.MOTranslation.moLocusIds_to_fids" target="D.MOTranslation.fid" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="1519" source="M.MOTranslation.moLocusIds_to_fids" target="D.MOTranslation.moLocusId" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="837" source="D.KBaseFBA.ModelCompound" target="D.KBaseFBA.FBAModel" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1477" source="D.MEME.meme_pspm_collection_ref" target="D.MEME.TomtomRunParameters" label="SUBTYPE"><data key="moduleName">MEME</data></edge><edge id="1476" source="D.MEME.meme_pspm_collection_ref" target="D.MEME.TomtomRunParameters" label="SUBTYPE"><data key="moduleName">MEME</data></edge><edge id="1480" source="D.MEME.meme_pspm_collection_ref" target="D.MEME.MastRunParameters" label="SUBTYPE"><data key="moduleName">MEME</data></edge><edge id="2063" source="D.Workspace.list_workspace_objects_params" target="M.Workspace.list_workspace_objects" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="906" source="D.KBaseFBA.FBAReactionBound" target="D.KBaseFBA.FBA" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1219" source="D.KBasePPI.PubmedID" target="D.KBasePPI.Publication" label="SUBTYPE"><data key="moduleName">KBasePPI</data></edge><edge id="1500" source="D.KBaseSequences.SequenceSet" target="M.MEME.find_sites_with_mast" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1504" source="D.KBaseSequences.SequenceSet" target="M.MEME.find_sites_with_mast_by_collection" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1484" source="D.KBaseSequences.SequenceSet" target="M.MEME.find_motifs_with_meme" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="353" source="D.GenomeAnnotation.compact_feature" target="M.GenomeAnnotation.add_features" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="864" source="D.KBaseFBA.feature_ref" target="D.KBaseFBA.GapfillingReaction" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="800" source="D.KBaseFBA.feature_ref" target="D.KBaseFBA.ModelReactionProteinSubunit" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="849" source="D.KBaseFBA.feature_ref" target="D.KBaseFBA.FBADeletionResult" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="901" source="D.KBaseFBA.feature_ref" target="D.KBaseFBA.FBA" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1826" source="M.Tree.get_leaf_to_protein_map" target="D.Tree.kbase_id" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="1827" source="M.Tree.get_leaf_to_protein_map" target="D.Tree.kbase_id" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="1975" source="D.Workspace.get_workspacemeta_params" target="M.Workspace.get_workspacemeta" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="1533" source="D.MOTranslation.status" target="D.MOTranslation.result" label="SUBTYPE"><data key="moduleName">MOTranslation</data></edge><edge id="423" source="M.GenomeAnnotation.compute_cdd" target="D.GenomeAnnotation.cdd_hit" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1601" source="M.Ontology.get_go_description" target="D.Ontology.GoID" label="METHOD_RETURN"><data key="moduleName">Ontology</data></edge><edge id="1602" source="M.Ontology.get_go_description" target="D.Ontology.StringArray" label="METHOD_RETURN"><data key="moduleName">Ontology</data></edge><edge id="16" source="D.AbstractHandle.HandleId" target="M.AbstractHandle.are_readable" label="METHOD_PARAM"><data key="moduleName">AbstractHandle</data></edge><edge id="14" source="D.AbstractHandle.HandleId" target="M.AbstractHandle.hids_to_handles" label="METHOD_PARAM"><data key="moduleName">AbstractHandle</data></edge><edge id="0" source="D.AbstractHandle.HandleId" target="D.AbstractHandle.Handle" label="SUBTYPE"><data key="moduleName">AbstractHandle</data></edge><edge id="566" source="D.KBaseCommon.project_id" target="D.KBaseCommon.SourceInfo" label="SUBTYPE"><data key="moduleName">KBaseCommon</data></edge><edge id="651" source="D.KBaseExpression.gsm_data_warnings" target="D.KBaseExpression.GenomeDataGSM" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="547" source="D.KBaseBiochem.CompoundSet" target="D.KBaseBiochem.Biochemistry" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="323" source="D.GenomeAnnotation.genome_quality_measure" target="D.GenomeAnnotation.genomeTO" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="364" source="M.GenomeAnnotation.assign_functions_to_CDSs" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1765" source="D.TaxonomyTranslation.Name" target="M.TaxonomyTranslation.get_all_translations" label="METHOD_PARAM"><data key="moduleName">TaxonomyTranslation</data></edge><edge id="1767" source="D.TaxonomyTranslation.Name" target="M.TaxonomyTranslation.get_scientific_names_by_name" label="METHOD_PARAM"><data key="moduleName">TaxonomyTranslation</data></edge><edge id="1774" source="D.TaxonomyTranslation.Name" target="M.TaxonomyTranslation.get_tax_id_by_scientific_name" label="METHOD_PARAM"><data key="moduleName">TaxonomyTranslation</data></edge><edge id="1769" source="D.TaxonomyTranslation.Name" target="M.TaxonomyTranslation.get_all_names_by_name" label="METHOD_PARAM"><data key="moduleName">TaxonomyTranslation</data></edge><edge id="1776" source="D.TaxonomyTranslation.Name" target="M.TaxonomyTranslation.get_tax_ids_by_name" label="METHOD_PARAM"><data key="moduleName">TaxonomyTranslation</data></edge><edge id="1988" source="D.Workspace.SetGlobalPermissionsParams" target="M.Workspace.set_global_permission" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="337" source="D.GenomeAnnotation.genome_id" target="M.GenomeAnnotation.genome_ids_to_genomes" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="329" source="D.GenomeAnnotation.genome_id" target="D.GenomeAnnotation.genome_metadata" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="321" source="D.GenomeAnnotation.genome_id" target="D.GenomeAnnotation.close_genome" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="322" source="D.GenomeAnnotation.genome_id" target="D.GenomeAnnotation.genomeTO" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="213" source="M.ExpressionServices.get_expression_sample_ids_by_experimental_unit_ids" target="D.ExpressionServices.sample_ids" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="89" source="D.Communities.Statistics" target="D.Communities.Metagenome" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="1407" source="M.KBaseTrees.get_leaf_to_protein_map" target="D.KBaseTrees.kbase_id" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="1408" source="M.KBaseTrees.get_leaf_to_protein_map" target="D.KBaseTrees.kbase_id" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="1627" source="D.ProbabilisticAnnotation.genome_id" target="D.ProbabilisticAnnotation.AnnotateParams" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1614" source="D.ProbabilisticAnnotation.genome_id" target="D.ProbabilisticAnnotation.ProbAnno" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1622" source="D.ProbabilisticAnnotation.genome_id" target="D.ProbabilisticAnnotation.RxnProbs" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1029" source="D.KBaseGeneFamilies.program_version" target="D.KBaseGeneFamilies.DomainLibrary" label="SUBTYPE"><data key="moduleName">KBaseGeneFamilies</data></edge><edge id="1182" source="D.KBaseOntology.complex_id" target="D.KBaseOntology.Complex" label="SUBTYPE"><data key="moduleName">KBaseOntology</data></edge><edge id="1189" source="D.KBaseOntology.complex_id" target="D.KBaseOntology.Mapping" label="HASH_KEY"><data key="moduleName">KBaseOntology</data></edge><edge id="1351" source="D.KBaseTrees.row_id" target="D.KBaseTrees.MSA" label="HASH_KEY"><data key="moduleName">KBaseTrees</data></edge><edge id="1353" source="D.KBaseTrees.row_id" target="D.KBaseTrees.MSA" label="HASH_KEY"><data key="moduleName">KBaseTrees</data></edge><edge id="1355" source="D.KBaseTrees.row_id" target="D.KBaseTrees.MSA" label="LIST_OF"><data key="moduleName">KBaseTrees</data></edge><edge id="187" source="D.ExpressionServices.gsm_data_set" target="D.ExpressionServices.GenomeDataGSM" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="1218" source="D.KBasePhenotypes.PhenotypeSimulation" target="D.KBasePhenotypes.PhenotypeSimulationSet" label="LIST_OF"><data key="moduleName">KBasePhenotypes</data></edge><edge id="1227" source="D.KBasePPI.InteractionProtein" target="D.KBasePPI.Interaction" label="LIST_OF"><data key="moduleName">KBasePPI</data></edge><edge id="523" source="D.KBaseBiochem.reaction_id" target="D.KBaseBiochem.Reaction" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="550" source="D.KBaseBiochem.reaction_id" target="D.KBaseBiochem.Biochemistry" label="HASH_KEY"><data key="moduleName">KBaseBiochem</data></edge><edge id="162" source="D.ExpressionServices.series_id" target="D.ExpressionServices.series_expression_data_samples_mapping" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="129" source="D.ExpressionServices.series_id" target="D.ExpressionServices.series_string_map" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="124" source="D.ExpressionServices.series_id" target="D.ExpressionServices.series_ids" label="LIST_OF"><data key="moduleName">ExpressionServices</data></edge><edge id="838" source="D.KBaseFBA.ModelReaction" target="D.KBaseFBA.FBAModel" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1768" source="M.TaxonomyTranslation.get_scientific_names_by_name" target="D.TaxonomyTranslation.Tax_id" label="METHOD_RETURN"><data key="moduleName">TaxonomyTranslation</data></edge><edge id="2037" source="M.Workspace.get_objects" target="D.Workspace.ObjectData" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="673" source="M.KBaseExpression.get_expression_samples_data_by_series_ids" target="D.KBaseExpression.series_expression_data_samples_mapping" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="475" source="M.IdMap.lookup_features" target="D.IdMap.IdPair" label="METHOD_RETURN"><data key="moduleName">IdMap</data></edge><edge id="1157" source="D.KBaseNetworks.DatasetSource" target="D.KBaseNetworks.InteractionSet" label="SUBTYPE"><data key="moduleName">KBaseNetworks</data></edge><edge id="1569" source="M.NarrativeJobService.run_app" target="D.NarrativeJobService.app_state" label="METHOD_RETURN"><data key="moduleName">NarrativeJobService</data></edge><edge id="1302" source="D.KBaseSearch.atomic_regulon" target="D.KBaseSearch.Feature" label="LIST_OF"><data key="moduleName">KBaseSearch</data></edge><edge id="530" source="D.KBaseBiochem.compound_ref" target="D.KBaseBiochem.MediaCompound" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="520" source="D.KBaseBiochem.compound_ref" target="D.KBaseBiochem.Reagent" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="516" source="D.KBaseBiochem.compound_ref" target="D.KBaseBiochem.Compound" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="539" source="D.KBaseBiochem.compound_ref" target="D.KBaseBiochem.CompoundSet" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="517" source="D.KBaseBiochem.compound_ref" target="D.KBaseBiochem.Compound" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="1689" source="D.PROM.workspace_name" target="M.PROM.get_regulatory_network_by_genome" label="METHOD_PARAM"><data key="moduleName">PROM</data></edge><edge id="1694" source="D.PROM.workspace_name" target="M.PROM.change_regulatory_network_namespace" label="METHOD_PARAM"><data key="moduleName">PROM</data></edge><edge id="1675" source="D.PROM.workspace_name" target="M.PROM.create_expression_data_collection" label="METHOD_PARAM"><data key="moduleName">PROM</data></edge><edge id="1685" source="D.PROM.workspace_name" target="M.PROM.change_expression_data_namespace" label="METHOD_PARAM"><data key="moduleName">PROM</data></edge><edge id="1681" source="D.PROM.workspace_name" target="M.PROM.add_expression_data_to_collection" label="METHOD_PARAM"><data key="moduleName">PROM</data></edge><edge id="1671" source="D.PROM.workspace_name" target="M.PROM.get_expression_data_by_genome" label="METHOD_PARAM"><data key="moduleName">PROM</data></edge><edge id="1701" source="D.PROM.workspace_name" target="D.PROM.CreatePromConstraintsParameters" label="SUBTYPE"><data key="moduleName">PROM</data></edge><edge id="1870" source="D.UserAndJobState.job_description" target="M.UserAndJobState.create_and_start_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1865" source="D.UserAndJobState.job_description" target="M.UserAndJobState.start_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="49" source="D.Cmonkey.expression_series_ws_ref" target="D.Cmonkey.CmonkeyRunParameters" label="SUBTYPE"><data key="moduleName">Cmonkey</data></edge><edge id="982" source="D.KBaseFBA.ReactionSensitivityAnalysisReaction" target="D.KBaseFBA.ReactionSensitivityAnalysis" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="962" source="D.KBaseFBA.templatereaction_id" target="D.KBaseFBA.TemplateReaction" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="1386" source="D.KBaseTrees.timestamp" target="D.KBaseTrees.AlignmentMetaData" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1384" source="D.KBaseTrees.timestamp" target="D.KBaseTrees.TreeMetaData" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="84" source="D.Communities.Biom" target="D.Communities.Profile" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="1737" source="M.ProteinInfo.fid_to_neighbors" target="D.ProteinInfo.neighbor" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="1104" source="D.KBaseGenomes.GenomeComparisonFunction" target="D.KBaseGenomes.GenomeComparison" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="1054" source="D.KBaseGenomes.Bool" target="D.KBaseGenomes.Feature_quality_measure" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1055" source="D.KBaseGenomes.Bool" target="D.KBaseGenomes.Feature_quality_measure" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1056" source="D.KBaseGenomes.Bool" target="D.KBaseGenomes.Feature_quality_measure" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1052" source="D.KBaseGenomes.Bool" target="D.KBaseGenomes.Feature_quality_measure" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1053" source="D.KBaseGenomes.Bool" target="D.KBaseGenomes.Feature_quality_measure" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1044" source="D.KBaseGenomes.Bool" target="D.KBaseGenomes.Contig" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1679" source="D.PROM.BooleanGeneExpressionData" target="M.PROM.add_expression_data_to_collection" label="METHOD_PARAM"><data key="moduleName">PROM</data></edge><edge id="1661" source="D.PROM.BooleanGeneExpressionData" target="D.PROM.BooleanGeneExpressionDataCollection" label="LIST_OF"><data key="moduleName">PROM</data></edge><edge id="1402" source="M.KBaseTrees.get_alignment_ids_by_feature" target="D.KBaseTrees.kbase_id" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="1285" source="D.KBaseSearch.source_id" target="D.KBaseSearch.ContigSet" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="1311" source="D.KBaseSearch.source_id" target="D.KBaseSearch.Genome" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="2155" source="M.Workspace.get_jsonschema" target="D.Workspace.jsonschema" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="106" source="D.Communities.PCoAMember" target="D.Communities.PCoA" label="LIST_OF"><data key="moduleName">Communities</data></edge><edge id="1007" source="D.KBaseFile.bool" target="D.KBaseFile.PairedEndLibrary" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="1008" source="D.KBaseFile.bool" target="D.KBaseFile.PairedEndLibrary" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="1009" source="D.KBaseFile.bool" target="D.KBaseFile.PairedEndLibrary" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="1013" source="D.KBaseFile.bool" target="D.KBaseFile.SingleEndLibrary" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="921" source="D.KBaseFBA.gapgensol_id" target="D.KBaseFBA.GapgenerationSolution" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="1212" source="D.KBasePhenotypes.Phenotype" target="D.KBasePhenotypes.PhenotypeSet" label="LIST_OF"><data key="moduleName">KBasePhenotypes</data></edge><edge id="568" source="D.KBaseCommon.Location" target="D.KBaseCommon.StrainInfo" label="SUBTYPE"><data key="moduleName">KBaseCommon</data></edge><edge id="97" source="D.Communities.URI" target="D.Communities.BiomMetagenome" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="96" source="D.Communities.URI" target="D.Communities.BiomMetagenome" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="77" source="D.Communities.URI" target="D.Communities.Biom" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="58" source="D.Communities.URI" target="D.Communities.Reference" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="103" source="D.Communities.URI" target="D.Communities.BiomMatrix" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="102" source="D.Communities.URI" target="D.Communities.BiomMatrix" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="86" source="D.Communities.URI" target="D.Communities.Metagenome" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="76" source="D.Communities.URI" target="D.Communities.Biom" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="1210" source="D.KBasePhenotypes.source_id" target="D.KBasePhenotypes.PhenotypeSet" label="SUBTYPE"><data key="moduleName">KBasePhenotypes</data></edge><edge id="1761" source="D.Sim.options" target="M.Sim.sims" label="METHOD_PARAM"><data key="moduleName">Sim</data></edge><edge id="1909" source="D.UserAndJobState.job_filter" target="M.UserAndJobState.list_jobs" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1781" source="D.Transform.UploadParameters" target="M.Transform.upload" label="METHOD_PARAM"><data key="moduleName">Transform</data></edge><edge id="1471" source="D.MEME.sequence_set_ref" target="D.MEME.MemeRunParameters" label="SUBTYPE"><data key="moduleName">MEME</data></edge><edge id="1481" source="D.MEME.sequence_set_ref" target="D.MEME.MastRunParameters" label="SUBTYPE"><data key="moduleName">MEME</data></edge><edge id="1794" source="M.Tree.replace_node_names" target="D.Tree.newick_tree" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="1165" source="D.KBaseNetworks.taxon" target="M.KBaseNetworks.taxon2datasets" label="METHOD_PARAM"><data key="moduleName">KBaseNetworks</data></edge><edge id="1158" source="D.KBaseNetworks.taxon" target="D.KBaseNetworks.InteractionSet" label="LIST_OF"><data key="moduleName">KBaseNetworks</data></edge><edge id="1151" source="D.KBaseNetworks.taxon" target="D.KBaseNetworks.Dataset" label="LIST_OF"><data key="moduleName">KBaseNetworks</data></edge><edge id="1808" source="D.Tree.kbase_id" target="M.Tree.get_alignment" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1806" source="D.Tree.kbase_id" target="M.Tree.get_tree" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1822" source="D.Tree.kbase_id" target="M.Tree.get_alignment_ids_by_protein_sequence" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1810" source="D.Tree.kbase_id" target="M.Tree.get_tree_data" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1820" source="D.Tree.kbase_id" target="M.Tree.get_alignment_ids_by_feature" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1825" source="D.Tree.kbase_id" target="M.Tree.get_leaf_to_protein_map" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1813" source="D.Tree.kbase_id" target="M.Tree.get_alignment_data" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1816" source="D.Tree.kbase_id" target="M.Tree.get_tree_ids_by_feature" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1818" source="D.Tree.kbase_id" target="M.Tree.get_tree_ids_by_protein_sequence" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1828" source="D.Tree.kbase_id" target="M.Tree.get_leaf_to_feature_map" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1831" source="D.Tree.kbase_id" target="D.Tree.AbundanceParams" label="SUBTYPE"><data key="moduleName">Tree</data></edge><edge id="1787" source="D.Tree.kbase_id" target="D.Tree.TreeMetaData" label="SUBTYPE"><data key="moduleName">Tree</data></edge><edge id="1789" source="D.Tree.kbase_id" target="D.Tree.AlignmentMetaData" label="LIST_OF"><data key="moduleName">Tree</data></edge><edge id="791" source="D.KBaseFBA.BiomassCompound" target="D.KBaseFBA.Biomass" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="910" source="D.KBaseFBA.FBAReactionVariable" target="D.KBaseFBA.FBA" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="623" source="D.KBaseExpression.person_ids" target="D.KBaseExpression.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="1058" source="D.KBaseGenomes.publication" target="D.KBaseGenomes.Feature" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="1073" source="D.KBaseGenomes.publication" target="D.KBaseGenomes.Genome" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="66" source="D.Communities.Timestamp" target="D.Communities.Collection" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="95" source="D.Communities.Timestamp" target="D.Communities.BiomMetagenome" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="63" source="D.Communities.Timestamp" target="D.Communities.DataHandle" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="60" source="D.Communities.Timestamp" target="D.Communities.Data" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="101" source="D.Communities.Timestamp" target="D.Communities.BiomMatrix" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="87" source="D.Communities.Timestamp" target="D.Communities.Metagenome" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="75" source="D.Communities.Timestamp" target="D.Communities.Biom" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="1138" source="D.KBaseGwasData.genelistUnit" target="D.KBaseGwasData.topvariationGenelistUnit" label="LIST_OF"><data key="moduleName">KBaseGwasData</data></edge><edge id="1647" source="D.ProbabilisticAnnotation.GetRxnprobsParams" target="M.ProbabilisticAnnotation.get_rxnprobs" label="METHOD_PARAM"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="232" source="D.ExpressionServices.ontology_ids" target="M.ExpressionServices.get_expression_samples_data_by_ontology_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="237" source="D.ExpressionServices.ontology_ids" target="M.ExpressionServices.get_expression_sample_ids_by_ontology_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="194" source="D.ExpressionServices.ontology_ids" target="D.ExpressionServices.GsmObject" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="458" source="D.GenomeAnnotation.pipeline_batch_input" target="M.GenomeAnnotation.pipeline_batch_start" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="663" source="D.KBaseExpression.GsmObject" target="D.KBaseExpression.gse_samples" label="HASH_VALUE"><data key="moduleName">KBaseExpression</data></edge><edge id="31" source="D.AssemblyInputHandle.boolean" target="D.AssemblyInputHandle.PairedEndLibrary" label="SUBTYPE"><data key="moduleName">AssemblyInputHandle</data></edge><edge id="1959" source="D.Workspace.usermeta" target="D.Workspace.CreateWorkspaceParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2070" source="D.Workspace.usermeta" target="D.Workspace.ListObjectsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2052" source="D.Workspace.usermeta" target="D.Workspace.ListWorkspaceInfoParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2003" source="D.Workspace.usermeta" target="D.Workspace.ObjectSaveData" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1968" source="D.Workspace.usermeta" target="D.Workspace.CloneWorkspaceParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1963" source="D.Workspace.usermeta" target="D.Workspace.AlterWorkspaceMetadataParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1919" source="M.UserAndJobState.get_job_shared" target="D.UserAndJobState.username" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="766" source="D.KBaseExpression.Protocol" target="D.KBaseExpression.ExpressionSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="1717" source="M.ProteinInfo.fids_to_domain_hits" target="D.ProteinInfo.Hit" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="1716" source="M.ProteinInfo.fids_to_domain_hits" target="D.ProteinInfo.fid" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="1297" source="D.KBaseSearch.source_db" target="D.KBaseSearch.Feature" label="HASH_KEY"><data key="moduleName">KBaseSearch</data></edge><edge id="513" source="D.KBaseAssembly.ReferenceAssembly" target="D.KBaseAssembly.AssemblyInput" label="LIST_OF"><data key="moduleName">KBaseAssembly</data></edge><edge id="15" source="M.AbstractHandle.hids_to_handles" target="D.AbstractHandle.Handle" label="METHOD_RETURN"><data key="moduleName">AbstractHandle</data></edge><edge id="834" source="D.KBaseFBA.ModelQuantOpt" target="D.KBaseFBA.FBAModel" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1719" source="M.ProteinInfo.domains_to_fids" target="D.ProteinInfo.domain_id" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="1720" source="M.ProteinInfo.domains_to_fids" target="D.ProteinInfo.fid" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="180" source="D.ExpressionServices.contact_institution" target="D.ExpressionServices.ContactPerson" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="2158" source="M.Workspace.translate_from_MD5_types" target="D.Workspace.type_string" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="2157" source="M.Workspace.translate_from_MD5_types" target="D.Workspace.type_string" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="491" source="D.IDServerAPI.external_id" target="M.IDServerAPI.register_allocated_ids" label="METHOD_PARAM"><data key="moduleName">IDServerAPI</data></edge><edge id="480" source="D.IDServerAPI.external_id" target="M.IDServerAPI.external_ids_to_kbase_ids" label="METHOD_PARAM"><data key="moduleName">IDServerAPI</data></edge><edge id="485" source="D.IDServerAPI.external_id" target="M.IDServerAPI.register_ids" label="METHOD_PARAM"><data key="moduleName">IDServerAPI</data></edge><edge id="1195" source="D.KBaseOntology.gene_list" target="D.KBaseOntology.Ontology" label="HASH_VALUE"><data key="moduleName">KBaseOntology</data></edge><edge id="2149" source="D.Workspace.spec_version" target="D.Workspace.ModuleInfo" label="HASH_VALUE"><data key="moduleName">Workspace</data></edge><edge id="2119" source="D.Workspace.spec_version" target="D.Workspace.RegisterTypespecParams" label="HASH_VALUE"><data key="moduleName">Workspace</data></edge><edge id="2142" source="D.Workspace.spec_version" target="D.Workspace.GetModuleInfoParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2144" source="D.Workspace.spec_version" target="D.Workspace.ModuleInfo" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2121" source="D.Workspace.spec_version" target="D.Workspace.RegisterTypespecParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2126" source="D.Workspace.spec_version" target="D.Workspace.RegisterTypespecCopyParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2138" source="D.Workspace.spec_version" target="D.Workspace.ModuleVersions" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2176" source="D.Workspace.spec_version" target="D.Workspace.FuncInfo" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2177" source="D.Workspace.spec_version" target="D.Workspace.FuncInfo" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2165" source="D.Workspace.spec_version" target="D.Workspace.TypeInfo" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2164" source="D.Workspace.spec_version" target="D.Workspace.TypeInfo" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2137" source="D.Workspace.spec_version" target="D.Workspace.ModuleVersions" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="1956" source="D.Workspace.ExternalDataUnit" target="D.Workspace.ProvenanceAction" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="331" source="D.GenomeAnnotation.fid_role_pair" target="D.GenomeAnnotation.fid_role_pairs" label="LIST_OF"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1713" source="M.ProteinInfo.fids_to_domains" target="D.ProteinInfo.fid" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="1714" source="M.ProteinInfo.fids_to_domains" target="D.ProteinInfo.domains" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="41" source="D.BAMBI.BambiRunParameters" target="M.BAMBI.find_motifs" label="METHOD_PARAM"><data key="moduleName">BAMBI</data></edge><edge id="37" source="D.BAMBI.BambiRunParameters" target="D.BAMBI.BambiRunResult" label="SUBTYPE"><data key="moduleName">BAMBI</data></edge><edge id="716" source="M.KBaseExpression.compare_samples_vs_default_controls" target="D.KBaseExpression.sample_comparison_mapping" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="610" source="D.KBaseExpression.SampleAnnotation" target="D.KBaseExpression.sample_annotations" label="LIST_OF"><data key="moduleName">KBaseExpression</data></edge><edge id="1456" source="D.KmerEval.seq_set" target="M.KmerEval.call_prot_with_kmers" label="METHOD_PARAM"><data key="moduleName">KmerEval</data></edge><edge id="1458" source="D.KmerEval.seq_set" target="M.KmerEval.check_contig_set" label="METHOD_PARAM"><data key="moduleName">KmerEval</data></edge><edge id="1453" source="D.KmerEval.seq_set" target="M.KmerEval.call_dna_with_kmers" label="METHOD_PARAM"><data key="moduleName">KmerEval</data></edge><edge id="601" source="D.KBaseExpression.comparison_denominator_label" target="D.KBaseExpression.denominator_sample_comparison" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="1616" source="D.ProbabilisticAnnotation.feature_id" target="D.ProbabilisticAnnotation.ProbAnno" label="HASH_KEY"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1651" source="D.ProbabilisticAnnotation.feature_id" target="D.ProbabilisticAnnotation.roleset_probabilities" label="HASH_KEY"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1618" source="D.ProbabilisticAnnotation.feature_id" target="D.ProbabilisticAnnotation.ProbAnno" label="LIST_OF"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1405" source="M.KBaseTrees.get_tree_ids_by_source_id_pattern" target="D.KBaseTrees.kbase_id" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="586" source="D.KBaseDataImport.import_ncbi_genome_params" target="M.KBaseDataImport.import_ncbi_genome" label="METHOD_PARAM"><data key="moduleName">KBaseDataImport</data></edge><edge id="769" source="D.KBaseExpression.expression_series_ids" target="D.KBaseExpression.ExpressionSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="306" source="D.GenomeAnnotation.region_of_dna" target="D.GenomeAnnotation.location" label="LIST_OF"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1318" source="D.KBaseGenomes.Genome" target="D.KBaseSearch.GenomeSetElement" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="1568" source="D.NarrativeJobService.app" target="M.NarrativeJobService.run_app" label="METHOD_PARAM"><data key="moduleName">NarrativeJobService</data></edge><edge id="1270" source="D.KBaseRegulation.RegulatedOperon" target="D.KBaseRegulation.Regulon" label="LIST_OF"><data key="moduleName">KBaseRegulation</data></edge><edge id="2181" source="D.Workspace.func_string" target="M.Workspace.get_func_info" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2175" source="D.Workspace.func_string" target="D.Workspace.FuncInfo" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2168" source="D.Workspace.func_string" target="D.Workspace.TypeInfo" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2179" source="D.Workspace.func_string" target="D.Workspace.FuncInfo" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2178" source="D.Workspace.func_string" target="D.Workspace.FuncInfo" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2150" source="D.Workspace.func_string" target="D.Workspace.ModuleInfo" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="1292" source="D.KBaseSearch.genome_id" target="D.KBaseSearch.Feature" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="1309" source="D.KBaseSearch.genome_id" target="D.KBaseSearch.Genome" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="1325" source="D.KBaseSearch.genome_id" target="D.KBaseSearch.Ontology" label="HASH_KEY"><data key="moduleName">KBaseSearch</data></edge><edge id="655" source="D.KBaseExpression.GenomeDataGSM" target="D.KBaseExpression.gsm_data" label="HASH_VALUE"><data key="moduleName">KBaseExpression</data></edge><edge id="231" source="M.ExpressionServices.get_expression_sample_ids_by_genome_ids" target="D.ExpressionServices.sample_ids" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="646" source="D.KBaseExpression.contact_institution" target="D.KBaseExpression.ContactPerson" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="1271" source="D.KBaseRegulation.Evidence" target="D.KBaseRegulation.Regulon" label="LIST_OF"><data key="moduleName">KBaseRegulation</data></edge><edge id="1276" source="D.KBaseRegulation.Evidence" target="D.KBaseRegulation.Regulome" label="LIST_OF"><data key="moduleName">KBaseRegulation</data></edge><edge id="1258" source="D.KBaseRegulation.Evidence" target="D.KBaseRegulation.RegulatorySite" label="LIST_OF"><data key="moduleName">KBaseRegulation</data></edge><edge id="1639" source="D.ProbabilisticAnnotation.rxnprobs_id" target="D.ProbabilisticAnnotation.CalculateParams" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1619" source="D.ProbabilisticAnnotation.rxnprobs_id" target="D.ProbabilisticAnnotation.RxnProbs" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1644" source="D.ProbabilisticAnnotation.rxnprobs_id" target="D.ProbabilisticAnnotation.GetRxnprobsParams" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="519" source="D.KBaseBiochem.cue_ref" target="D.KBaseBiochem.Compound" label="HASH_KEY"><data key="moduleName">KBaseBiochem</data></edge><edge id="525" source="D.KBaseBiochem.cue_ref" target="D.KBaseBiochem.Reaction" label="HASH_KEY"><data key="moduleName">KBaseBiochem</data></edge><edge id="729" source="M.KBaseExpression.get_expression_samples_molecules" target="D.KBaseExpression.samples_string_map" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="1559" source="D.NarrativeJobService.workspace_object" target="D.NarrativeJobService.step_parameter" label="SUBTYPE"><data key="moduleName">NarrativeJobService</data></edge><edge id="990" source="D.KBaseFBA.regulome_ref" target="D.KBaseFBA.PromConstraint" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="895" source="D.KBaseFBA.regulome_ref" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="1697" source="M.PROM.change_regulatory_network_namespace" target="D.PROM.regulatory_network_id" label="METHOD_RETURN"><data key="moduleName">PROM</data></edge><edge id="1696" source="M.PROM.change_regulatory_network_namespace" target="D.PROM.status" label="METHOD_RETURN"><data key="moduleName">PROM</data></edge><edge id="1226" source="D.KBasePPI.Boolean" target="D.KBasePPI.Interaction" label="SUBTYPE"><data key="moduleName">KBasePPI</data></edge><edge id="142" source="D.ExpressionServices.ontology_name" target="D.ExpressionServices.SampleAnnotation" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="683" source="M.KBaseExpression.get_expression_sample_ids_by_experiment_meta_ids" target="D.KBaseExpression.sample_ids" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="247" source="D.ExpressionServices.label_data_mapping" target="M.ExpressionServices.compare_samples" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="246" source="D.ExpressionServices.label_data_mapping" target="M.ExpressionServices.compare_samples" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="248" source="M.ExpressionServices.compare_samples" target="D.ExpressionServices.sample_comparison_mapping" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="1461" source="D.MAK.inputdata_ws_ref" target="D.MAK.MAKParameters" label="SUBTYPE"><data key="moduleName">MAK</data></edge><edge id="1736" source="D.ProteinInfo.neighbor_threshold" target="M.ProteinInfo.fid_to_neighbors" label="METHOD_PARAM"><data key="moduleName">ProteinInfo</data></edge><edge id="1739" source="D.ProteinInfo.neighbor_threshold" target="M.ProteinInfo.fidlist_to_neighbors" label="METHOD_PARAM"><data key="moduleName">ProteinInfo</data></edge><edge id="1224" source="D.KBasePPI.FeatureID" target="D.KBasePPI.InteractionProtein" label="SUBTYPE"><data key="moduleName">KBasePPI</data></edge><edge id="987" source="D.KBaseFBA.genome_ref" target="D.KBaseFBA.PromConstraint" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="827" source="D.KBaseFBA.genome_ref" target="D.KBaseFBA.FBAModel" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="1730" source="M.ProteinInfo.fids_to_ec" target="D.ProteinInfo.fid" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="1731" source="M.ProteinInfo.fids_to_ec" target="D.ProteinInfo.ec" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="1755" source="M.RDPTools.seqmatch" target="D.RDPTools.Handle" label="METHOD_RETURN"><data key="moduleName">RDPTools</data></edge><edge id="1459" source="D.MAK.genome_ws_ref" target="D.MAK.MAKInputData" label="SUBTYPE"><data key="moduleName">MAK</data></edge><edge id="1460" source="D.MAK.genome_ws_ref" target="D.MAK.MAKParameters" label="SUBTYPE"><data key="moduleName">MAK</data></edge><edge id="1213" source="D.KBasePhenotypes.phenosim_id" target="D.KBasePhenotypes.PhenotypeSimulation" label="SUBTYPE"><data key="moduleName">KBasePhenotypes</data></edge><edge id="2116" source="D.Workspace.typename" target="D.Workspace.RegisterTypespecParams" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2117" source="D.Workspace.typename" target="D.Workspace.RegisterTypespecParams" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="983" source="D.KBaseFBA.ReactionSensitivityAnalysisCorrectedReaction" target="D.KBaseFBA.ReactionSensitivityAnalysis" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="543" source="D.KBaseBiochem.Compartment" target="D.KBaseBiochem.Biochemistry" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="1298" source="D.KBaseSearch.alias" target="D.KBaseSearch.Feature" label="LIST_OF"><data key="moduleName">KBaseSearch</data></edge><edge id="1948" source="D.Workspace.obj_id" target="D.Workspace.SubObjectIdentity" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2002" source="D.Workspace.obj_id" target="D.Workspace.ObjectSaveData" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1941" source="D.Workspace.obj_id" target="D.Workspace.ObjectIdentity" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1811" source="M.Tree.get_tree_data" target="D.Tree.kbase_id" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="1812" source="M.Tree.get_tree_data" target="D.Tree.TreeMetaData" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="1479" source="D.MEME.TomtomHit" target="D.MEME.TomtomRunResult" label="LIST_OF"><data key="moduleName">MEME</data></edge><edge id="277" source="M.ExpressionServices.get_expression_series_external_source_ids" target="D.ExpressionServices.series_string_map" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="1082" source="D.KBaseGenomes.ProteinSet_id" target="D.KBaseGenomes.ProteinSet" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1734" source="M.ProteinInfo.fids_to_go" target="D.ProteinInfo.go" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="1733" source="M.ProteinInfo.fids_to_go" target="D.ProteinInfo.fid" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="466" source="D.GenomeComparison.annotate_genome_params" target="M.GenomeComparison.annotate_genome" label="METHOD_PARAM"><data key="moduleName">GenomeComparison</data></edge><edge id="1216" source="D.KBasePhenotypes.fbamodel_ref" target="D.KBasePhenotypes.PhenotypeSimulationSet" label="SUBTYPE"><data key="moduleName">KBasePhenotypes</data></edge><edge id="1249" source="D.KBaseProteinStructure.feature_ids_t" target="M.KBaseProteinStructure.lookup_pdb_by_fid" label="METHOD_PARAM"><data key="moduleName">KBaseProteinStructure</data></edge><edge id="574" source="D.KBaseCommunities.date" target="D.KBaseCommunities.Sample" label="SUBTYPE"><data key="moduleName">KBaseCommunities</data></edge><edge id="585" source="D.KBaseCommunities.date" target="D.KBaseCommunities.Metagenome" label="SUBTYPE"><data key="moduleName">KBaseCommunities</data></edge><edge id="573" source="D.KBaseCommunities.date" target="D.KBaseCommunities.Sample" label="SUBTYPE"><data key="moduleName">KBaseCommunities</data></edge><edge id="576" source="D.KBaseCommunities.date" target="D.KBaseCommunities.Project" label="SUBTYPE"><data key="moduleName">KBaseCommunities</data></edge><edge id="116" source="D.ERDB_Service.count" target="M.ERDB_Service.GetAll" label="METHOD_PARAM"><data key="moduleName">ERDB_Service</data></edge><edge id="747" source="M.KBaseExpression.get_expression_sample_ids_by_platform_external_source_ids" target="D.KBaseExpression.sample_ids" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="1434" source="D.KBaseTrees.ConstructSpeciesTreeParams" target="M.KBaseTrees.construct_species_tree" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="2182" source="M.Workspace.get_func_info" target="D.Workspace.FuncInfo" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="1259" source="D.KBaseRegulation.gene_id" target="D.KBaseRegulation.Gene" label="SUBTYPE"><data key="moduleName">KBaseRegulation</data></edge><edge id="1786" source="D.Transform.ConvertParameters" target="M.Transform.convert" label="METHOD_PARAM"><data key="moduleName">Transform</data></edge><edge id="1404" source="M.KBaseTrees.get_alignment_ids_by_protein_sequence" target="D.KBaseTrees.kbase_id" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="1143" source="D.KBaseGwasData.traitTopvariationUnit" target="D.KBaseGwasData.GwasPopulationSummary" label="LIST_OF"><data key="moduleName">KBaseGwasData</data></edge><edge id="2087" source="M.Workspace.get_object_info" target="D.Workspace.object_info" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="505" source="D.KBaseAssembly.Handle" target="D.KBaseAssembly.ReferenceAssembly" label="SUBTYPE"><data key="moduleName">KBaseAssembly</data></edge><edge id="506" source="D.KBaseAssembly.Handle" target="D.KBaseAssembly.SingleEndLibrary" label="SUBTYPE"><data key="moduleName">KBaseAssembly</data></edge><edge id="507" source="D.KBaseAssembly.Handle" target="D.KBaseAssembly.PairedEndLibrary" label="SUBTYPE"><data key="moduleName">KBaseAssembly</data></edge><edge id="508" source="D.KBaseAssembly.Handle" target="D.KBaseAssembly.PairedEndLibrary" label="SUBTYPE"><data key="moduleName">KBaseAssembly</data></edge><edge id="661" source="D.KBaseExpression.gsm_warnings" target="D.KBaseExpression.GsmObject" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="1047" source="D.KBaseGenomes.Reads_ref" target="D.KBaseGenomes.ContigSet" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1305" source="D.KBaseSearch.Feature" target="D.KBaseSearch.IndividualFeature" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="1678" source="M.PROM.create_expression_data_collection" target="D.PROM.expression_data_collection_id" label="METHOD_RETURN"><data key="moduleName">PROM</data></edge><edge id="1677" source="M.PROM.create_expression_data_collection" target="D.PROM.status" label="METHOD_RETURN"><data key="moduleName">PROM</data></edge><edge id="581" source="D.KBaseCommunities.Project" target="D.KBaseCommunities.Metagenome" label="SUBTYPE"><data key="moduleName">KBaseCommunities</data></edge><edge id="158" source="D.ExpressionServices.sample_ids_averaged_from" target="D.ExpressionServices.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="1077" source="D.KBaseGenomes.Close_genome" target="D.KBaseGenomes.Genome" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="602" source="D.KBaseExpression.data_sample_comparison" target="D.KBaseExpression.denominator_sample_comparison" label="HASH_VALUE"><data key="moduleName">KBaseExpression</data></edge><edge id="55" source="D.Cmonkey.CmonkeyRunParameters" target="M.Cmonkey.run_cmonkey" label="METHOD_PARAM"><data key="moduleName">Cmonkey</data></edge><edge id="53" source="D.Cmonkey.CmonkeyRunParameters" target="D.Cmonkey.CmonkeyRunResult" label="SUBTYPE"><data key="moduleName">Cmonkey</data></edge><edge id="336" source="D.GenomeAnnotation.fid_data_tuple" target="D.GenomeAnnotation.fid_data_tuples" label="LIST_OF"><data key="moduleName">GenomeAnnotation</data></edge><edge id="996" source="D.KBaseFBA.Classifier_ref" target="D.KBaseFBA.ClassifierResult" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="413" source="M.GenomeAnnotation.resolve_overlapping_features" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1766" source="M.TaxonomyTranslation.get_all_translations" target="D.TaxonomyTranslation.Translations" label="METHOD_RETURN"><data key="moduleName">TaxonomyTranslation</data></edge><edge id="752" source="D.KBaseExpression.kbase_genome_id" target="D.KBaseExpression.Strain" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="753" source="D.KBaseExpression.kbase_genome_id" target="D.KBaseExpression.ExpressionPlatform" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="761" source="D.KBaseExpression.kbase_genome_id" target="D.KBaseExpression.ExpressionSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="756" source="D.KBaseExpression.kbase_genome_id" target="D.KBaseExpression.genome_expression_sample_ids_map" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="1296" source="D.KBaseSearch.ProteinFamily" target="D.KBaseSearch.Feature" label="LIST_OF"><data key="moduleName">KBaseSearch</data></edge><edge id="57" source="D.CoExpression.ConstCoexNetClustParams" target="M.CoExpression.const_coex_net_clust" label="METHOD_PARAM"><data key="moduleName">CoExpression</data></edge><edge id="378" source="D.GenomeAnnotation.rna_type" target="M.GenomeAnnotation.call_features_rRNA_SEED" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1448" source="D.KmerEval.genome_tuple" target="D.KmerEval.genome_tuples" label="LIST_OF"><data key="moduleName">KmerEval</data></edge><edge id="843" source="D.KBaseFBA.modelcompound_ref" target="D.KBaseFBA.FBACompoundBound" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="852" source="D.KBaseFBA.modelcompound_ref" target="D.KBaseFBA.FBAMetaboliteProductionResult" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="789" source="D.KBaseFBA.modelcompound_ref" target="D.KBaseFBA.BiomassCompound" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="858" source="D.KBaseFBA.modelcompound_ref" target="D.KBaseFBA.QuantOptBoundMod" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="797" source="D.KBaseFBA.modelcompound_ref" target="D.KBaseFBA.ModelReactionReagent" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="844" source="D.KBaseFBA.modelcompound_ref" target="D.KBaseFBA.FBACompoundVariable" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="903" source="D.KBaseFBA.modelcompound_ref" target="D.KBaseFBA.FBA" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="868" source="D.KBaseFBA.modelcompound_ref" target="D.KBaseFBA.GapfillingSolution" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="867" source="D.KBaseFBA.modelcompound_ref" target="D.KBaseFBA.GapfillingSolution" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="923" source="D.KBaseFBA.modelcompound_ref" target="D.KBaseFBA.GapgenerationSolution" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="922" source="D.KBaseFBA.modelcompound_ref" target="D.KBaseFBA.GapgenerationSolution" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="908" source="D.KBaseFBA.phenotypesimulationset_ref" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="339" source="D.GenomeAnnotation.genome_metadata" target="M.GenomeAnnotation.create_genome" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="344" source="D.GenomeAnnotation.genome_metadata" target="M.GenomeAnnotation.set_metadata" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1123" source="D.KBaseGwasData.kinship_data" target="D.KBaseGwasData.GwasPopulationKinship" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="1192" source="D.KBaseOntology.ontology_acc" target="D.KBaseOntology.Ontology" label="SUBTYPE"><data key="moduleName">KBaseOntology</data></edge><edge id="1203" source="D.KBaseOntology.ontology_acc" target="D.KBaseOntology.OntologyAccMap" label="HASH_KEY"><data key="moduleName">KBaseOntology</data></edge><edge id="1197" source="D.KBaseOntology.ontology_acc" target="D.KBaseOntology.ontology_term_annotation_map" label="HASH_KEY"><data key="moduleName">KBaseOntology</data></edge><edge id="1328" source="D.KBaseSequences.Sequence" target="D.KBaseSequences.SequenceSet" label="LIST_OF"><data key="moduleName">KBaseSequences</data></edge><edge id="421" source="M.GenomeAnnotation.compute_special_proteins" target="D.GenomeAnnotation.special_protein_hit" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1111" source="D.KBaseGwasData.VariationSample" target="D.KBaseGwasData.VariationSamplesSet" label="LIST_OF"><data key="moduleName">KBaseGwasData</data></edge><edge id="836" source="D.KBaseFBA.ModelCompartment" target="D.KBaseFBA.FBAModel" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="460" source="M.GenomeAnnotation.pipeline_batch_status" target="D.GenomeAnnotation.pipeline_batch_status" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1654" source="M.ProbabilisticAnnotation.get_probanno" target="D.ProbabilisticAnnotation.roleset_probabilities" label="METHOD_RETURN"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1264" source="D.KBaseRegulation.regulator_id" target="D.KBaseRegulation.Regulator" label="SUBTYPE"><data key="moduleName">KBaseRegulation</data></edge><edge id="2053" source="D.Workspace.timestamp" target="D.Workspace.ListWorkspaceInfoParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2054" source="D.Workspace.timestamp" target="D.Workspace.ListWorkspaceInfoParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2019" source="D.Workspace.timestamp" target="D.Workspace.ObjectProvenanceInfo" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2030" source="D.Workspace.timestamp" target="D.Workspace.ObjectData" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2072" source="D.Workspace.timestamp" target="D.Workspace.ListObjectsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2071" source="D.Workspace.timestamp" target="D.Workspace.ListObjectsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1953" source="D.Workspace.timestamp" target="D.Workspace.ProvenanceAction" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1952" source="D.Workspace.timestamp" target="D.Workspace.ExternalDataUnit" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="91" source="D.Communities.Metagenome" target="D.Communities.MetagenomeSetElement" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="1572" source="M.NarrativeJobService.list_running_apps" target="D.NarrativeJobService.app_state" label="METHOD_RETURN"><data key="moduleName">NarrativeJobService</data></edge><edge id="267" source="M.ExpressionServices.get_expression_samples_external_source_ids" target="D.ExpressionServices.samples_string_map" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="985" source="D.KBaseFBA.ETCPathwayObj" target="D.KBaseFBA.ETC" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1205" source="D.KBasePhenotypes.phenotype_id" target="D.KBasePhenotypes.Phenotype" label="SUBTYPE"><data key="moduleName">KBasePhenotypes</data></edge><edge id="1066" source="D.KBaseGenomes.Feature_quality_measure" target="D.KBaseGenomes.Feature" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="193" source="D.ExpressionServices.gsm_data" target="D.ExpressionServices.GsmObject" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="1749" source="M.RDPTools.classify" target="D.RDPTools.Handle" label="METHOD_RETURN"><data key="moduleName">RDPTools</data></edge><edge id="1748" source="M.RDPTools.classify" target="D.RDPTools.Handle" label="METHOD_RETURN"><data key="moduleName">RDPTools</data></edge><edge id="743" source="M.KBaseExpression.get_expression_series_external_source_ids" target="D.KBaseExpression.series_string_map" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="1424" source="M.KBaseTrees.compute_abundance_profile" target="D.KBaseTrees.AbundanceResult" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="545" source="D.KBaseBiochem.Reaction" target="D.KBaseBiochem.Biochemistry" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="816" source="D.KBaseFBA.gapgen_ref" target="D.KBaseFBA.ModelGapgen" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="211" source="M.ExpressionServices.get_expression_samples_data_by_experimental_unit_ids" target="D.ExpressionServices.experimental_unit_expression_data_samples_mapping" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="236" source="M.ExpressionServices.get_expression_samples_data_by_ontology_ids" target="D.ExpressionServices.ontology_expression_data_sample_mapping" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="1067" source="D.KBaseGenomes.Analysis_event" target="D.KBaseGenomes.Feature" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1078" source="D.KBaseGenomes.Analysis_event" target="D.KBaseGenomes.Genome" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="2010" source="M.Workspace.save_objects" target="D.Workspace.object_info" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="457" source="D.GenomeAnnotation.pipeline_batch_status_entry" target="D.GenomeAnnotation.pipeline_batch_status" label="LIST_OF"><data key="moduleName">GenomeAnnotation</data></edge><edge id="224" source="D.ExpressionServices.genome_ids" target="M.ExpressionServices.get_expression_samples_data_by_genome_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="228" source="D.ExpressionServices.genome_ids" target="M.ExpressionServices.get_expression_sample_ids_by_genome_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="656" source="D.KBaseExpression.gsm_sample_characteristics" target="D.KBaseExpression.GsmObject" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="1023" source="D.KBaseFile.assembly_id" target="D.KBaseFile.AnnotationFile" label="SUBTYPE"><data key="moduleName">KBaseFile</data></edge><edge id="1886" source="M.UserAndJobState.get_job_description" target="D.UserAndJobState.max_progress" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="1885" source="M.UserAndJobState.get_job_description" target="D.UserAndJobState.progress_type" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="1888" source="M.UserAndJobState.get_job_description" target="D.UserAndJobState.timestamp" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="1887" source="M.UserAndJobState.get_job_description" target="D.UserAndJobState.job_description" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="1884" source="M.UserAndJobState.get_job_description" target="D.UserAndJobState.service_name" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="2046" source="M.Workspace.get_referenced_objects" target="D.Workspace.ObjectData" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="2174" source="M.Workspace.get_all_type_info" target="D.Workspace.TypeInfo" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="298" source="D.ExpressionServices.expression_sample_id" target="D.ExpressionServices.ExpressionSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="289" source="D.ExpressionServices.expression_sample_id" target="D.ExpressionServices.expression_sample_ids" label="LIST_OF"><data key="moduleName">ExpressionServices</data></edge><edge id="1969" source="D.Workspace.CloneWorkspaceParams" target="M.Workspace.clone_workspace" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="453" source="D.GenomeAnnotation.Handle" target="D.GenomeAnnotation.pipeline_batch_input" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="454" source="D.GenomeAnnotation.Handle" target="D.GenomeAnnotation.pipeline_batch_status_entry" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="455" source="D.GenomeAnnotation.Handle" target="D.GenomeAnnotation.pipeline_batch_status_entry" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="456" source="D.GenomeAnnotation.Handle" target="D.GenomeAnnotation.pipeline_batch_status_entry" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="325" source="D.GenomeAnnotation.Handle" target="D.GenomeAnnotation.genomeTO" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1030" source="D.KBaseGeneFamilies.Handle" target="D.KBaseGeneFamilies.DomainLibrary" label="LIST_OF"><data key="moduleName">KBaseGeneFamilies</data></edge><edge id="1201" source="D.KBaseOntology.gene_annotation_map" target="D.KBaseOntology.GeneOntologyAnnotation" label="SUBTYPE"><data key="moduleName">KBaseOntology</data></edge><edge id="1114" source="D.KBaseGwasData.VariantCall" target="D.KBaseGwasData.VariantCallSet" label="LIST_OF"><data key="moduleName">KBaseGwasData</data></edge><edge id="899" source="D.KBaseFBA.media_ref" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="822" source="D.KBaseFBA.media_ref" target="D.KBaseFBA.ModelQuantOpt" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="813" source="D.KBaseFBA.media_ref" target="D.KBaseFBA.ModelGapfill" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="940" source="D.KBaseFBA.media_ref" target="D.KBaseFBA.Gapfilling" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="935" source="D.KBaseFBA.media_ref" target="D.KBaseFBA.Gapgeneration" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="819" source="D.KBaseFBA.media_ref" target="D.KBaseFBA.ModelGapgen" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="936" source="D.KBaseFBA.media_ref" target="D.KBaseFBA.Gapgeneration" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="956" source="D.KBaseFBA.templatebiomasscomponent_id" target="D.KBaseFBA.TemplateBiomassComponent" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="966" source="D.KBaseFBA.modeltemplate_id" target="D.KBaseFBA.ModelTemplate" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="994" source="D.KBaseFBA.ExternalGenomeClassData" target="D.KBaseFBA.ClassifierTrainingSet" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="263" source="M.ExpressionServices.get_expression_samples_molecules" target="D.ExpressionServices.samples_string_map" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="856" source="D.KBaseFBA.probability" target="D.KBaseFBA.TintleProbabilitySample" label="HASH_VALUE"><data key="moduleName">KBaseFBA</data></edge><edge id="1095" source="D.KBaseGenomes.Domain" target="D.KBaseGenomes.GenomeDomainData" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="1243" source="D.KBaseProteinStructure.md5_id_t" target="D.KBaseProteinStructure.md5_to_pdb_matches" label="HASH_KEY"><data key="moduleName">KBaseProteinStructure</data></edge><edge id="1235" source="D.KBaseProteinStructure.md5_id_t" target="D.KBaseProteinStructure.md5_ids_t" label="LIST_OF"><data key="moduleName">KBaseProteinStructure</data></edge><edge id="1492" source="M.MEME.compare_motifs_with_tomtom" target="D.MEME.TomtomRunResult" label="METHOD_RETURN"><data key="moduleName">MEME</data></edge><edge id="1347" source="D.KBaseTrees.collapsed_node_flag" target="D.KBaseTrees.TreeDecoration" label="HASH_VALUE"><data key="moduleName">KBaseTrees</data></edge><edge id="1446" source="M.KmerAnnotationByFigfam.call_genes_in_dna" target="D.KmerAnnotationByFigfam.dna_hit" label="METHOD_RETURN"><data key="moduleName">KmerAnnotationByFigfam</data></edge><edge id="1161" source="M.KBaseNetworks.all_dataset_sources" target="D.KBaseNetworks.DatasetSource" label="METHOD_RETURN"><data key="moduleName">KBaseNetworks</data></edge><edge id="621" source="D.KBaseExpression.sample_annotations" target="D.KBaseExpression.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="848" source="D.KBaseFBA.feature_id" target="D.KBaseFBA.FBATintleResult" label="HASH_VALUE"><data key="moduleName">KBaseFBA</data></edge><edge id="855" source="D.KBaseFBA.feature_id" target="D.KBaseFBA.TintleProbabilitySample" label="HASH_KEY"><data key="moduleName">KBaseFBA</data></edge><edge id="978" source="D.KBaseFBA.feature_id" target="D.KBaseFBA.ReactionSensitivityAnalysisReaction" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="333" source="D.GenomeAnnotation.variant_subsystem_pairs" target="D.GenomeAnnotation.reconstructionTO" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="2159" source="D.Workspace.type_string" target="M.Workspace.translate_to_MD5_types" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2156" source="D.Workspace.type_string" target="M.Workspace.translate_from_MD5_types" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2171" source="D.Workspace.type_string" target="M.Workspace.get_type_info" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2154" source="D.Workspace.type_string" target="M.Workspace.get_jsonschema" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2067" source="D.Workspace.type_string" target="D.Workspace.ListObjectsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1996" source="D.Workspace.type_string" target="D.Workspace.save_object_params" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2061" source="D.Workspace.type_string" target="D.Workspace.list_workspace_objects_params" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2162" source="D.Workspace.type_string" target="D.Workspace.TypeInfo" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2135" source="D.Workspace.type_string" target="D.Workspace.ListModuleVersionsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2000" source="D.Workspace.type_string" target="D.Workspace.ObjectSaveData" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2146" source="D.Workspace.type_string" target="D.Workspace.ModuleInfo" label="HASH_KEY"><data key="moduleName">Workspace</data></edge><edge id="2180" source="D.Workspace.type_string" target="D.Workspace.FuncInfo" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2167" source="D.Workspace.type_string" target="D.Workspace.TypeInfo" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2169" source="D.Workspace.type_string" target="D.Workspace.TypeInfo" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2170" source="D.Workspace.type_string" target="D.Workspace.TypeInfo" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2166" source="D.Workspace.type_string" target="D.Workspace.TypeInfo" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="22" source="D.AskKB.head" target="D.AskKB.answer" label="SUBTYPE"><data key="moduleName">AskKB</data></edge><edge id="528" source="D.KBaseBiochem.cue_id" target="D.KBaseBiochem.Cue" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="1380" source="M.KBaseTrees.extract_node_names" target="D.KBaseTrees.node_name" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="109" source="D.ERDB_Service.parameter" target="D.ERDB_Service.parameters" label="LIST_OF"><data key="moduleName">ERDB_Service</data></edge><edge id="1028" source="D.KBaseGeneFamilies.date" target="D.KBaseGeneFamilies.DomainLibrary" label="SUBTYPE"><data key="moduleName">KBaseGeneFamilies</data></edge><edge id="1743" source="M.ProteinInfo.fids_to_eukaryotic_orthologs" target="D.ProteinInfo.fid" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="1744" source="M.ProteinInfo.fids_to_eukaryotic_orthologs" target="D.ProteinInfo.orthologs" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="1437" source="M.KBaseTrees.construct_multiple_alignment" target="D.KBaseTrees.job_id" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="546" source="D.KBaseBiochem.ReactionSet" target="D.KBaseBiochem.Biochemistry" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="487" source="M.IDServerAPI.register_ids" target="D.IDServerAPI.kbase_id" label="METHOD_RETURN"><data key="moduleName">IDServerAPI</data></edge><edge id="486" source="M.IDServerAPI.register_ids" target="D.IDServerAPI.external_id" label="METHOD_RETURN"><data key="moduleName">IDServerAPI</data></edge><edge id="1562" source="D.NarrativeJobService.step_parameter" target="D.NarrativeJobService.step" label="LIST_OF"><data key="moduleName">NarrativeJobService</data></edge><edge id="149" source="D.ExpressionServices.sample_id" target="D.ExpressionServices.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="127" source="D.ExpressionServices.sample_id" target="D.ExpressionServices.samples_string_map" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="128" source="D.ExpressionServices.sample_id" target="D.ExpressionServices.samples_float_map" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="174" source="D.ExpressionServices.sample_id" target="D.ExpressionServices.sample_measurement_mapping" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="160" source="D.ExpressionServices.sample_id" target="D.ExpressionServices.expression_data_samples_map" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="137" source="D.ExpressionServices.sample_id" target="D.ExpressionServices.sample_comparison_mapping" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="122" source="D.ExpressionServices.sample_id" target="D.ExpressionServices.sample_ids" label="LIST_OF"><data key="moduleName">ExpressionServices</data></edge><edge id="123" source="D.ExpressionServices.sample_id" target="D.ExpressionServices.sample_ids_averaged_from" label="LIST_OF"><data key="moduleName">ExpressionServices</data></edge><edge id="741" source="M.KBaseExpression.get_expression_series_designs" target="D.KBaseExpression.series_string_map" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="392" source="M.GenomeAnnotation.call_features_CDS_SEED_projection" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="537" source="D.KBaseBiochem.MediaCompound" target="D.KBaseBiochem.Media" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="1773" source="M.TaxonomyTranslation.get_scientific_name_by_tax_id" target="D.TaxonomyTranslation.Name" label="METHOD_RETURN"><data key="moduleName">TaxonomyTranslation</data></edge><edge id="1215" source="D.KBasePhenotypes.phenosimset_id" target="D.KBasePhenotypes.PhenotypeSimulationSet" label="SUBTYPE"><data key="moduleName">KBasePhenotypes</data></edge><edge id="633" source="D.KBaseExpression.experimental_unit_expression_data_samples_mapping" target="D.KBaseExpression.experiment_meta_expression_data_samples_mapping" label="HASH_VALUE"><data key="moduleName">KBaseExpression</data></edge><edge id="774" source="D.KBaseExpression.shock_id" target="D.KBaseExpression.shock_ref" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="659" source="D.KBaseExpression.gsm_data" target="D.KBaseExpression.GsmObject" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="207" source="M.ExpressionServices.get_expression_samples_data_by_series_ids" target="D.ExpressionServices.series_expression_data_samples_mapping" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="1429" source="D.KBaseTrees.FilterParams" target="M.KBaseTrees.filter_abundance_profile" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="1703" source="D.PROM.CreatePromConstraintsParameters" target="M.PROM.create_prom_constraints" label="METHOD_PARAM"><data key="moduleName">PROM</data></edge><edge id="1241" source="D.KBaseProteinStructure.align_length_t" target="D.KBaseProteinStructure.PDBMatch" label="SUBTYPE"><data key="moduleName">KBaseProteinStructure</data></edge><edge id="495" source="D.Inferelator.expression_series_ref" target="D.Inferelator.InferelatorRunParameters" label="SUBTYPE"><data key="moduleName">Inferelator</data></edge><edge id="1266" source="D.KBaseRegulation.regulon_id" target="D.KBaseRegulation.Regulon" label="SUBTYPE"><data key="moduleName">KBaseRegulation</data></edge><edge id="1583" source="D.Ontology.EvidenceCode" target="D.Ontology.GoTermInfo" label="SUBTYPE"><data key="moduleName">Ontology</data></edge><edge id="1581" source="D.Ontology.EvidenceCode" target="D.Ontology.EvidenceCodeList" label="LIST_OF"><data key="moduleName">Ontology</data></edge><edge id="968" source="D.KBaseFBA.Biochemistry_ref" target="D.KBaseFBA.ModelTemplate" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="2048" source="D.Workspace.list_workspaces_params" target="M.Workspace.list_workspaces" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="1022" source="D.KBaseFile.dna_feature_type" target="D.KBaseFile.AnnotationFile" label="HASH_KEY"><data key="moduleName">KBaseFile</data></edge><edge id="1722" source="M.ProteinInfo.domains_to_domain_annotations" target="D.ProteinInfo.domain_id" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="1237" source="D.KBaseProteinStructure.pdb_id_t" target="D.KBaseProteinStructure.PDBMatch" label="SUBTYPE"><data key="moduleName">KBaseProteinStructure</data></edge><edge id="1295" source="D.KBaseSearch.publication" target="D.KBaseSearch.Feature" label="LIST_OF"><data key="moduleName">KBaseSearch</data></edge><edge id="1312" source="D.KBaseSearch.publication" target="D.KBaseSearch.Genome" label="LIST_OF"><data key="moduleName">KBaseSearch</data></edge><edge id="1548" source="M.MOTranslation.moLocusIds_to_fid_in_genome" target="D.MOTranslation.status" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="1546" source="M.MOTranslation.moLocusIds_to_fid_in_genome" target="D.MOTranslation.moLocusId" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="1547" source="M.MOTranslation.moLocusIds_to_fid_in_genome" target="D.MOTranslation.result" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="1326" source="D.KBaseSearch.gene_list" target="D.KBaseSearch.Ontology" label="HASH_VALUE"><data key="moduleName">KBaseSearch</data></edge><edge id="1760" source="M.ServiceRegistry.enumerate_services" target="D.ServiceRegistry.ServiceInfo" label="METHOD_RETURN"><data key="moduleName">ServiceRegistry</data></edge><edge id="1599" source="M.Ontology.get_goidlist" target="D.Ontology.GeneIDMap2GoInfo" label="METHOD_RETURN"><data key="moduleName">Ontology</data></edge><edge id="1278" source="D.KBaseRegulation.Regulator" target="D.KBaseRegulation.Regulog" label="SUBTYPE"><data key="moduleName">KBaseRegulation</data></edge><edge id="1267" source="D.KBaseRegulation.Regulator" target="D.KBaseRegulation.Regulon" label="SUBTYPE"><data key="moduleName">KBaseRegulation</data></edge><edge id="1593" source="D.Ontology.OntologyAnnotation" target="D.Ontology.ontology_annotation_list" label="LIST_OF"><data key="moduleName">Ontology</data></edge><edge id="1976" source="M.Workspace.get_workspacemeta" target="D.Workspace.workspace_metadata" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="1905" source="M.UserAndJobState.get_detailed_error" target="D.UserAndJobState.detailed_err" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="569" source="D.KBaseCommunities.Table2DInt" target="D.KBaseCommunities.Abundance2DTableInt" label="SUBTYPE"><data key="moduleName">KBaseCommunities</data></edge><edge id="1597" source="D.Ontology.DomainList" target="M.Ontology.get_goidlist" label="METHOD_PARAM"><data key="moduleName">Ontology</data></edge><edge id="1604" source="D.Ontology.DomainList" target="M.Ontology.get_go_enrichment" label="METHOD_PARAM"><data key="moduleName">Ontology</data></edge><edge id="1691" source="M.PROM.get_regulatory_network_by_genome" target="D.PROM.status" label="METHOD_RETURN"><data key="moduleName">PROM</data></edge><edge id="1692" source="M.PROM.get_regulatory_network_by_genome" target="D.PROM.regulatory_network_id" label="METHOD_RETURN"><data key="moduleName">PROM</data></edge><edge id="1917" source="M.UserAndJobState.get_job_owner" target="D.UserAndJobState.username" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="682" source="D.KBaseExpression.experiment_meta_ids" target="M.KBaseExpression.get_expression_sample_ids_by_experiment_meta_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="680" source="D.KBaseExpression.experiment_meta_ids" target="M.KBaseExpression.get_expression_samples_data_by_experiment_meta_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="1626" source="D.ProbabilisticAnnotation.reaction_probability" target="D.ProbabilisticAnnotation.RxnProbs" label="LIST_OF"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1646" source="D.ProbabilisticAnnotation.reaction_probability" target="D.ProbabilisticAnnotation.reaction_probability_list" label="LIST_OF"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1280" source="D.KBaseRegulation.regulog_collection_id" target="D.KBaseRegulation.RegulogCollection" label="SUBTYPE"><data key="moduleName">KBaseRegulation</data></edge><edge id="763" source="D.KBaseExpression.expression_platform_id" target="D.KBaseExpression.ExpressionSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="171" source="D.ExpressionServices.strain_expression_data_samples_mapping" target="D.ExpressionServices.genome_expression_data_samples_mapping" label="HASH_VALUE"><data key="moduleName">ExpressionServices</data></edge><edge id="191" source="D.ExpressionServices.GPL" target="D.ExpressionServices.GsmObject" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="107" source="D.CompressionBasedDistance.BuildMatrixParams" target="M.CompressionBasedDistance.build_matrix" label="METHOD_PARAM"><data key="moduleName">CompressionBasedDistance</data></edge><edge id="482" source="M.IDServerAPI.external_ids_to_kbase_ids" target="D.IDServerAPI.kbase_id" label="METHOD_RETURN"><data key="moduleName">IDServerAPI</data></edge><edge id="481" source="M.IDServerAPI.external_ids_to_kbase_ids" target="D.IDServerAPI.external_id" label="METHOD_RETURN"><data key="moduleName">IDServerAPI</data></edge><edge id="1655" source="D.PROM.boolean_gene_expression_data_id" target="D.PROM.BooleanGeneExpressionData" label="SUBTYPE"><data key="moduleName">PROM</data></edge><edge id="463" source="D.GenomeComparison.hit" target="D.GenomeComparison.ProteomeComparison" label="LIST_OF"><data key="moduleName">GenomeComparison</data></edge><edge id="464" source="D.GenomeComparison.hit" target="D.GenomeComparison.ProteomeComparison" label="LIST_OF"><data key="moduleName">GenomeComparison</data></edge><edge id="1451" source="D.KmerEval.call" target="D.KmerEval.calls" label="LIST_OF"><data key="moduleName">KmerEval</data></edge><edge id="620" source="D.KBaseExpression.experiment_meta_id" target="D.KBaseExpression.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="632" source="D.KBaseExpression.experiment_meta_id" target="D.KBaseExpression.experiment_meta_expression_data_samples_mapping" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="591" source="D.KBaseExpression.experiment_meta_id" target="D.KBaseExpression.experiment_meta_ids" label="LIST_OF"><data key="moduleName">KBaseExpression</data></edge><edge id="606" source="D.KBaseExpression.sample_annotation_id" target="D.KBaseExpression.SampleAnnotation" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="2016" source="D.Workspace.object_info" target="D.Workspace.ObjectProvenanceInfo" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2027" source="D.Workspace.object_info" target="D.Workspace.ObjectData" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1903" source="M.UserAndJobState.get_results" target="D.UserAndJobState.Results" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="1445" source="D.KmerAnnotationByFigfam.kmer_annotation_figfam_parameters" target="M.KmerAnnotationByFigfam.call_genes_in_dna" label="METHOD_PARAM"><data key="moduleName">KmerAnnotationByFigfam</data></edge><edge id="1441" source="D.KmerAnnotationByFigfam.kmer_annotation_figfam_parameters" target="M.KmerAnnotationByFigfam.annotate_proteins" label="METHOD_PARAM"><data key="moduleName">KmerAnnotationByFigfam</data></edge><edge id="1443" source="D.KmerAnnotationByFigfam.kmer_annotation_figfam_parameters" target="M.KmerAnnotationByFigfam.annotate_proteins_fasta" label="METHOD_PARAM"><data key="moduleName">KmerAnnotationByFigfam</data></edge><edge id="1107" source="D.KBaseGwasData.shock_id" target="D.KBaseGwasData.shock_ref" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="1450" source="D.KmerEval.otu_set_counts" target="D.KmerEval.otu_data" label="LIST_OF"><data key="moduleName">KmerEval</data></edge><edge id="1362" source="D.KBaseTrees.ref_type" target="D.KBaseTrees.MSA" label="HASH_KEY"><data key="moduleName">KBaseTrees</data></edge><edge id="1336" source="D.KBaseTrees.ref_type" target="D.KBaseTrees.Tree" label="HASH_KEY"><data key="moduleName">KBaseTrees</data></edge><edge id="1359" source="D.KBaseTrees.ref_type" target="D.KBaseTrees.MSA" label="HASH_KEY"><data key="moduleName">KBaseTrees</data></edge><edge id="1333" source="D.KBaseTrees.ref_type" target="D.KBaseTrees.Tree" label="HASH_KEY"><data key="moduleName">KBaseTrees</data></edge><edge id="1183" source="D.KBaseOntology.ComplexRole" target="D.KBaseOntology.Complex" label="LIST_OF"><data key="moduleName">KBaseOntology</data></edge><edge id="1433" source="D.KBaseTrees.genome_ref" target="D.KBaseTrees.ConstructSpeciesTreeParams" label="LIST_OF"><data key="moduleName">KBaseTrees</data></edge><edge id="1340" source="D.KBaseTrees.tree_elt_id" target="D.KBaseTrees.TreeDecoration" label="HASH_KEY"><data key="moduleName">KBaseTrees</data></edge><edge id="1344" source="D.KBaseTrees.tree_elt_id" target="D.KBaseTrees.TreeDecoration" label="HASH_KEY"><data key="moduleName">KBaseTrees</data></edge><edge id="1342" source="D.KBaseTrees.tree_elt_id" target="D.KBaseTrees.TreeDecoration" label="HASH_KEY"><data key="moduleName">KBaseTrees</data></edge><edge id="911" source="D.KBaseFBA.FBABiomassVariable" target="D.KBaseFBA.FBA" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="143" source="D.ExpressionServices.ontology_definition" target="D.ExpressionServices.SampleAnnotation" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="1234" source="D.KBasePPI.GenomeWSID" target="D.KBasePPI.InteractionDataset" label="LIST_OF"><data key="moduleName">KBasePPI</data></edge><edge id="1993" source="M.Workspace.get_permissions" target="D.Workspace.username" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="1994" source="M.Workspace.get_permissions" target="D.Workspace.permission" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="984" source="D.KBaseFBA.ETCStep" target="D.KBaseFBA.ETCPathwayObj" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="436" source="D.GenomeAnnotation.analysis_event" target="M.GenomeAnnotation.update_functions" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="328" source="D.GenomeAnnotation.analysis_event" target="D.GenomeAnnotation.genomeTO" label="LIST_OF"><data key="moduleName">GenomeAnnotation</data></edge><edge id="733" source="M.KBaseExpression.get_expression_samples_external_source_ids" target="D.KBaseExpression.samples_string_map" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="915" source="D.KBaseFBA.FBAMinimalMediaResult" target="D.KBaseFBA.FBA" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="3" source="D.AbstractHandle.Handle" target="M.AbstractHandle.localize_handle" label="METHOD_PARAM"><data key="moduleName">AbstractHandle</data></edge><edge id="10" source="D.AbstractHandle.Handle" target="M.AbstractHandle.upload_metadata" label="METHOD_PARAM"><data key="moduleName">AbstractHandle</data></edge><edge id="7" source="D.AbstractHandle.Handle" target="M.AbstractHandle.persist_handle" label="METHOD_PARAM"><data key="moduleName">AbstractHandle</data></edge><edge id="19" source="D.AbstractHandle.Handle" target="M.AbstractHandle.give" label="METHOD_PARAM"><data key="moduleName">AbstractHandle</data></edge><edge id="5" source="D.AbstractHandle.Handle" target="M.AbstractHandle.initialize_handle" label="METHOD_PARAM"><data key="moduleName">AbstractHandle</data></edge><edge id="18" source="D.AbstractHandle.Handle" target="M.AbstractHandle.delete_handles" label="METHOD_PARAM"><data key="moduleName">AbstractHandle</data></edge><edge id="9" source="D.AbstractHandle.Handle" target="M.AbstractHandle.download" label="METHOD_PARAM"><data key="moduleName">AbstractHandle</data></edge><edge id="11" source="D.AbstractHandle.Handle" target="M.AbstractHandle.download_metadata" label="METHOD_PARAM"><data key="moduleName">AbstractHandle</data></edge><edge id="783" source="D.KBaseExpression.RNASeqDifferentialExpressionFile" target="D.KBaseExpression.RNASeqDifferentialExpressionSet" label="LIST_OF"><data key="moduleName">KBaseExpression</data></edge><edge id="801" source="D.KBaseFBA.complex_ref" target="D.KBaseFBA.ModelReactionProtein" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="965" source="D.KBaseFBA.complex_ref" target="D.KBaseFBA.TemplateReaction" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1792" source="D.Tree.node_name" target="M.Tree.replace_node_names" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1796" source="D.Tree.node_name" target="M.Tree.remove_node_names_and_simplify" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1793" source="D.Tree.node_name" target="M.Tree.replace_node_names" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1313" source="D.KBaseSearch.search_featureset_ref" target="D.KBaseSearch.Genome" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="739" source="M.KBaseExpression.get_expression_series_summaries" target="D.KBaseExpression.series_string_map" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="768" source="D.KBaseExpression.persons" target="D.KBaseExpression.ExpressionSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="154" source="D.ExpressionServices.experiment_meta_id" target="D.ExpressionServices.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="166" source="D.ExpressionServices.experiment_meta_id" target="D.ExpressionServices.experiment_meta_expression_data_samples_mapping" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="125" source="D.ExpressionServices.experiment_meta_id" target="D.ExpressionServices.experiment_meta_ids" label="LIST_OF"><data key="moduleName">ExpressionServices</data></edge><edge id="988" source="D.KBaseFBA.TFtoTGmap" target="D.KBaseFBA.PromConstraint" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1817" source="M.Tree.get_tree_ids_by_feature" target="D.Tree.kbase_id" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="1666" source="D.PROM.prom_constraints_id" target="D.PROM.PromConstraint" label="SUBTYPE"><data key="moduleName">PROM</data></edge><edge id="811" source="D.KBaseFBA.fba_ref" target="D.KBaseFBA.ModelGapfill" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="929" source="D.KBaseFBA.fba_ref" target="D.KBaseFBA.Gapgeneration" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="817" source="D.KBaseFBA.fba_ref" target="D.KBaseFBA.ModelGapgen" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="821" source="D.KBaseFBA.fba_ref" target="D.KBaseFBA.ModelQuantOpt" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="939" source="D.KBaseFBA.fba_ref" target="D.KBaseFBA.Gapfilling" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="1101" source="D.KBaseGenomes.Pangenome_ref" target="D.KBaseGenomes.GenomeComparison" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1871" source="D.UserAndJobState.InitProgress" target="M.UserAndJobState.create_and_start_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1866" source="D.UserAndJobState.InitProgress" target="M.UserAndJobState.start_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1352" source="D.KBaseTrees.sequence" target="D.KBaseTrees.MSA" label="HASH_VALUE"><data key="moduleName">KBaseTrees</data></edge><edge id="2009" source="D.Workspace.SaveObjectsParams" target="M.Workspace.save_objects" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="1463" source="D.MAK.MAKBicluster" target="D.MAK.MAKBiclusterSet" label="LIST_OF"><data key="moduleName">MAK</data></edge><edge id="522" source="D.KBaseBiochem.bool" target="D.KBaseBiochem.Reagent" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="535" source="D.KBaseBiochem.bool" target="D.KBaseBiochem.Media" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="534" source="D.KBaseBiochem.bool" target="D.KBaseBiochem.Media" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="533" source="D.KBaseBiochem.bool" target="D.KBaseBiochem.Media" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="529" source="D.KBaseBiochem.bool" target="D.KBaseBiochem.Cue" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="555" source="D.KBaseBiochem.bool" target="D.KBaseBiochem.MapReaction" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="515" source="D.KBaseBiochem.bool" target="D.KBaseBiochem.Compound" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="195" source="D.ExpressionServices.gsm_warnings" target="D.ExpressionServices.GsmObject" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="809" source="D.KBaseFBA.gapfill_id" target="D.KBaseFBA.ModelGapfill" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="808" source="D.KBaseFBA.gapfill_id" target="D.KBaseFBA.ModelGapfill" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="938" source="D.KBaseFBA.gapfill_id" target="D.KBaseFBA.Gapfilling" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="1147" source="D.KBaseNarrative.Worksheet" target="D.KBaseNarrative.Narrative" label="LIST_OF"><data key="moduleName">KBaseNarrative</data></edge><edge id="1400" source="M.KBaseTrees.get_tree_ids_by_protein_sequence" target="D.KBaseTrees.kbase_id" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="1000" source="D.KBaseFBA.FBAModelSetElement" target="D.KBaseFBA.FBAModelSet" label="HASH_VALUE"><data key="moduleName">KBaseFBA</data></edge><edge id="1057" source="D.KBaseGenomes.Feature_id" target="D.KBaseGenomes.Feature" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1088" source="D.KBaseGenomes.Feature_id" target="D.KBaseGenomes.ProbabilisticAnnotation" label="HASH_KEY"><data key="moduleName">KBaseGenomes</data></edge><edge id="1090" source="D.KBaseGenomes.Feature_id" target="D.KBaseGenomes.ProbabilisticAnnotation" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="806" source="D.KBaseFBA.ModelReactionReagent" target="D.KBaseFBA.ModelReaction" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1779" source="M.TaxonomyTranslation.get_all_names_by_tax_id" target="D.TaxonomyTranslation.Name" label="METHOD_RETURN"><data key="moduleName">TaxonomyTranslation</data></edge><edge id="1289" source="D.KBaseSearch.Contig" target="D.KBaseSearch.ContigSet" label="HASH_VALUE"><data key="moduleName">KBaseSearch</data></edge><edge id="1486" source="M.MEME.find_motifs_with_meme" target="D.MEME.MemeRunResult" label="METHOD_RETURN"><data key="moduleName">MEME</data></edge><edge id="1248" source="M.KBaseProteinStructure.lookup_pdb_by_md5" target="D.KBaseProteinStructure.md5_to_pdb_matches" label="METHOD_RETURN"><data key="moduleName">KBaseProteinStructure</data></edge><edge id="1260" source="D.KBaseRegulation.transcription_factor_id" target="D.KBaseRegulation.TranscriptionFactor" label="SUBTYPE"><data key="moduleName">KBaseRegulation</data></edge><edge id="1753" source="M.RDPTools.probematch" target="D.RDPTools.Handle" label="METHOD_RETURN"><data key="moduleName">RDPTools</data></edge><edge id="2045" source="D.Workspace.ref_chain" target="M.Workspace.get_referenced_objects" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="657" source="D.KBaseExpression.GPL" target="D.KBaseExpression.GsmObject" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="17" source="M.AbstractHandle.list_handles" target="D.AbstractHandle.Handle" label="METHOD_RETURN"><data key="moduleName">AbstractHandle</data></edge><edge id="1428" source="D.KBaseTrees.abundance_data" target="M.KBaseTrees.filter_abundance_profile" label="METHOD_PARAM"><data key="moduleName">KBaseTrees</data></edge><edge id="2017" source="D.Workspace.ProvenanceAction" target="D.Workspace.ObjectProvenanceInfo" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2004" source="D.Workspace.ProvenanceAction" target="D.Workspace.ObjectSaveData" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="2028" source="D.Workspace.ProvenanceAction" target="D.Workspace.ObjectData" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="1222" source="D.KBasePPI.InteractionDetectionTypeID" target="D.KBasePPI.InteractionDetectionType" label="SUBTYPE"><data key="moduleName">KBasePPI</data></edge><edge id="358" source="M.GenomeAnnotation.genomeTO_to_feature_data" target="D.GenomeAnnotation.fid_data_tuples" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1851" source="M.UserAndJobState.get_has_state" target="D.UserAndJobState.boolean" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="2043" source="M.Workspace.list_referencing_objects" target="D.Workspace.object_info" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="394" source="M.GenomeAnnotation.call_features_CDS_FragGeneScan" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="33" source="D.AssemblyInputHandle.SingleEndLibrary" target="D.AssemblyInputHandle.AssemblyInput" label="LIST_OF"><data key="moduleName">AssemblyInputHandle</data></edge><edge id="648" source="D.KBaseExpression.ContactPerson" target="D.KBaseExpression.contact_people" label="HASH_VALUE"><data key="moduleName">KBaseExpression</data></edge><edge id="624" source="D.KBaseExpression.sample_ids_averaged_from" target="D.KBaseExpression.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="1574" source="D.Ontology.ontology_id" target="D.Ontology.ontology_id_list" label="LIST_OF"><data key="moduleName">Ontology</data></edge><edge id="1594" source="D.Ontology.gene_id" target="D.Ontology.GeneAnnotations" label="HASH_KEY"><data key="moduleName">Ontology</data></edge><edge id="1578" source="D.Ontology.gene_id" target="D.Ontology.gene_id_list" label="LIST_OF"><data key="moduleName">Ontology</data></edge><edge id="1929" source="M.UserProfile.get_user_profile" target="D.UserProfile.UserProfile" label="METHOD_RETURN"><data key="moduleName">UserProfile</data></edge><edge id="961" source="D.KBaseFBA.TemplateBiomassComponent" target="D.KBaseFBA.TemplateBiomass" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="376" source="M.GenomeAnnotation.call_features_insertion_sequences" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="135" source="D.ExpressionServices.comparison_denominator_label" target="D.ExpressionServices.denominator_sample_comparison" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="1608" source="M.Ontology.get_go_enrichment" target="D.Ontology.EnrichmentList" label="METHOD_RETURN"><data key="moduleName">Ontology</data></edge><edge id="1970" source="M.Workspace.clone_workspace" target="D.Workspace.workspace_info" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="650" source="D.KBaseExpression.FullMeasurement" target="D.KBaseExpression.gsm_data_set" label="HASH_VALUE"><data key="moduleName">KBaseExpression</data></edge><edge id="1684" source="D.PROM.expression_data_collection_id" target="M.PROM.change_expression_data_namespace" label="METHOD_PARAM"><data key="moduleName">PROM</data></edge><edge id="1680" source="D.PROM.expression_data_collection_id" target="M.PROM.add_expression_data_to_collection" label="METHOD_PARAM"><data key="moduleName">PROM</data></edge><edge id="1699" source="D.PROM.expression_data_collection_id" target="D.PROM.CreatePromConstraintsParameters" label="SUBTYPE"><data key="moduleName">PROM</data></edge><edge id="1669" source="D.PROM.expression_data_collection_id" target="D.PROM.PromConstraint" label="SUBTYPE"><data key="moduleName">PROM</data></edge><edge id="1660" source="D.PROM.expression_data_collection_id" target="D.PROM.BooleanGeneExpressionDataCollection" label="SUBTYPE"><data key="moduleName">PROM</data></edge><edge id="2038" source="D.Workspace.SubObjectIdentity" target="M.Workspace.get_object_subset" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2059" source="M.Workspace.list_workspace_info" target="D.Workspace.workspace_info" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="1629" source="D.ProbabilisticAnnotation.probanno_id" target="D.ProbabilisticAnnotation.AnnotateParams" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1649" source="D.ProbabilisticAnnotation.probanno_id" target="D.ProbabilisticAnnotation.GetProbannoParams" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1635" source="D.ProbabilisticAnnotation.probanno_id" target="D.ProbabilisticAnnotation.CalculateParams" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1613" source="D.ProbabilisticAnnotation.probanno_id" target="D.ProbabilisticAnnotation.ProbAnno" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1624" source="D.ProbabilisticAnnotation.probanno_id" target="D.ProbabilisticAnnotation.RxnProbs" label="SUBTYPE"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="788" source="M.KBaseExpression.get_expression_float_data_table_by_genome" target="D.KBaseExpression.FloatDataTable" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="416" source="M.GenomeAnnotation.call_features_ProtoCDS_kmer_v1" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="419" source="M.GenomeAnnotation.call_features_ProtoCDS_kmer_v2" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1142" source="D.KBaseGwasData.populationTraitUnit" target="D.KBaseGwasData.GwasPopulationSummary" label="LIST_OF"><data key="moduleName">KBaseGwasData</data></edge><edge id="1452" source="D.KmerEval.frame" target="D.KmerEval.frames" label="LIST_OF"><data key="moduleName">KmerEval</data></edge><edge id="1465" source="D.MAK.MAKBiclusterSet" target="D.MAK.MAKResult" label="LIST_OF"><data key="moduleName">MAK</data></edge><edge id="2058" source="D.Workspace.ListWorkspaceInfoParams" target="M.Workspace.list_workspace_info" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="114" source="D.ERDB_Service.parameters" target="M.ERDB_Service.GetAll" label="METHOD_PARAM"><data key="moduleName">ERDB_Service</data></edge><edge id="119" source="D.ERDB_Service.parameters" target="M.ERDB_Service.runSQL" label="METHOD_PARAM"><data key="moduleName">ERDB_Service</data></edge><edge id="1978" source="M.Workspace.get_workspace_info" target="D.Workspace.workspace_info" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="300" source="D.ExpressionServices.Protocol" target="D.ExpressionServices.ExpressionSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="351" source="M.GenomeAnnotation.add_contigs_from_handle" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="527" source="D.KBaseBiochem.compartment_id" target="D.KBaseBiochem.Compartment" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="2091" source="D.Workspace.GetObjectInfoNewParams" target="M.Workspace.get_object_info_new" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2195" source="M.Workspace.list_all_types" target="D.Workspace.typename" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="2194" source="M.Workspace.list_all_types" target="D.Workspace.modulename" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="2196" source="M.Workspace.list_all_types" target="D.Workspace.typever" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="2096" source="M.Workspace.rename_workspace" target="D.Workspace.workspace_info" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="296" source="D.ExpressionServices.expression_ontology_terms" target="D.ExpressionServices.ExpressionSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="1859" source="D.UserAndJobState.max_progress" target="D.UserAndJobState.InitProgress" label="SUBTYPE"><data key="moduleName">UserAndJobState</data></edge><edge id="900" source="D.KBaseFBA.phenotypeset_ref" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="920" source="D.KBaseFBA.modelreaction_ref" target="D.KBaseFBA.GapgenerationSolutionReaction" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="842" source="D.KBaseFBA.modelreaction_ref" target="D.KBaseFBA.FBAReactionBound" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="865" source="D.KBaseFBA.modelreaction_ref" target="D.KBaseFBA.ActivatedReaction" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="971" source="D.KBaseFBA.modelreaction_ref" target="D.KBaseFBA.ReactionSensitivityAnalysisCorrectedReaction" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="857" source="D.KBaseFBA.modelreaction_ref" target="D.KBaseFBA.QuantOptBoundMod" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="973" source="D.KBaseFBA.modelreaction_ref" target="D.KBaseFBA.ReactionSensitivityAnalysisReaction" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="845" source="D.KBaseFBA.modelreaction_ref" target="D.KBaseFBA.FBAReactionVariable" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="854" source="D.KBaseFBA.modelreaction_ref" target="D.KBaseFBA.FBAMinimalReactionsResult" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="869" source="D.KBaseFBA.modelreaction_ref" target="D.KBaseFBA.GapfillingSolution" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="873" source="D.KBaseFBA.modelreaction_ref" target="D.KBaseFBA.GapfillingSolution" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="924" source="D.KBaseFBA.modelreaction_ref" target="D.KBaseFBA.GapgenerationSolution" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="902" source="D.KBaseFBA.modelreaction_ref" target="D.KBaseFBA.FBA" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1634" source="M.ProbabilisticAnnotation.annotate" target="D.ProbabilisticAnnotation.job_id" label="METHOD_RETURN"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1269" source="D.KBaseRegulation.TranscriptionFactor" target="D.KBaseRegulation.Regulon" label="LIST_OF"><data key="moduleName">KBaseRegulation</data></edge><edge id="1063" source="D.KBaseGenomes.atomic_regulon" target="D.KBaseGenomes.Feature" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="283" source="M.ExpressionServices.get_expression_series_ids_by_series_external_source_ids" target="D.ExpressionServices.series_ids" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="1911" source="M.UserAndJobState.list_job_services" target="D.UserAndJobState.service_name" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="1304" source="D.KBaseSearch.co_occurring_fid" target="D.KBaseSearch.Feature" label="LIST_OF"><data key="moduleName">KBaseSearch</data></edge><edge id="1184" source="D.KBaseOntology.map_id" target="D.KBaseOntology.Mapping" label="SUBTYPE"><data key="moduleName">KBaseOntology</data></edge><edge id="259" source="M.ExpressionServices.get_expression_samples_titles" target="D.ExpressionServices.samples_string_map" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="2139" source="D.Workspace.ListModuleVersionsParams" target="M.Workspace.list_module_versions" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="600" source="D.KBaseExpression.log2_ratio" target="D.KBaseExpression.data_sample_comparison" label="HASH_VALUE"><data key="moduleName">KBaseExpression</data></edge><edge id="155" source="D.ExpressionServices.sample_annotations" target="D.ExpressionServices.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="1145" source="D.KBaseGwasData.idnameUnit" target="D.KBaseGwasData.GwasPopulationSummary" label="LIST_OF"><data key="moduleName">KBaseGwasData</data></edge><edge id="204" source="D.ExpressionServices.feature_ids" target="M.ExpressionServices.get_expression_data_by_samples_and_features" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="242" source="D.ExpressionServices.feature_ids" target="M.ExpressionServices.get_expression_data_by_feature_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="542" source="D.KBaseBiochem.biochem_id" target="D.KBaseBiochem.Biochemistry" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="560" source="D.KBaseBiochem.map_id" target="D.KBaseBiochem.MetabolicMap" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="559" source="D.KBaseBiochem.map_id" target="D.KBaseBiochem.MapLink" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="1411" source="M.KBaseTrees.get_leaf_to_feature_map" target="D.KBaseTrees.kbase_id" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="1410" source="M.KBaseTrees.get_leaf_to_feature_map" target="D.KBaseTrees.kbase_id" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="1319" source="D.KBaseSearch.GenomeSetElement" target="D.KBaseSearch.GenomeSet" label="HASH_VALUE"><data key="moduleName">KBaseSearch</data></edge><edge id="1447" source="D.KmerEval.seq_triple" target="D.KmerEval.seq_set" label="LIST_OF"><data key="moduleName">KmerEval</data></edge><edge id="1232" source="D.KBasePPI.Interaction" target="D.KBasePPI.InteractionDataset" label="LIST_OF"><data key="moduleName">KBasePPI</data></edge><edge id="1745" source="D.RDPTools.Sequence" target="M.RDPTools.classifySeqs" label="METHOD_PARAM"><data key="moduleName">RDPTools</data></edge><edge id="1086" source="D.KBaseGenomes.ProbabilisticAnnotation_id" target="D.KBaseGenomes.ProbabilisticAnnotation" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="493" source="D.Inferelator.gene_list_ref" target="D.Inferelator.InferelatorRunParameters" label="SUBTYPE"><data key="moduleName">Inferelator</data></edge><edge id="220" source="M.ExpressionServices.get_expression_samples_data_by_strain_ids" target="D.ExpressionServices.strain_expression_data_samples_mapping" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="860" source="D.KBaseFBA.QuantOptBiomassMod" target="D.KBaseFBA.QuantitativeOptimizationSolution" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1092" source="D.KBaseGenomes.MetagenomeAnnotationOTU" target="D.KBaseGenomes.MetagenomeAnnotation" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="1741" source="M.ProteinInfo.fidlist_to_neighbors" target="D.ProteinInfo.neighbor" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="1740" source="M.ProteinInfo.fidlist_to_neighbors" target="D.ProteinInfo.fid" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="1185" source="D.KBaseOntology.Role" target="D.KBaseOntology.Mapping" label="LIST_OF"><data key="moduleName">KBaseOntology</data></edge><edge id="198" source="D.ExpressionServices.gse_samples" target="D.ExpressionServices.GseObject" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="1609" source="D.Ontology.GeneIDList" target="M.Ontology.get_go_annotation" label="METHOD_PARAM"><data key="moduleName">Ontology</data></edge><edge id="1596" source="D.Ontology.GeneIDList" target="M.Ontology.get_goidlist" label="METHOD_PARAM"><data key="moduleName">Ontology</data></edge><edge id="1611" source="D.Ontology.GeneIDList" target="M.Ontology.association_test" label="METHOD_PARAM"><data key="moduleName">Ontology</data></edge><edge id="1603" source="D.Ontology.GeneIDList" target="M.Ontology.get_go_enrichment" label="METHOD_PARAM"><data key="moduleName">Ontology</data></edge><edge id="1290" source="D.KBaseSearch.region_of_dna" target="D.KBaseSearch.location" label="LIST_OF"><data key="moduleName">KBaseSearch</data></edge><edge id="381" source="M.GenomeAnnotation.call_features_tRNA_trnascan" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1273" source="D.KBaseRegulation.regulome_source" target="D.KBaseRegulation.Regulome" label="SUBTYPE"><data key="moduleName">KBaseRegulation</data></edge><edge id="407" source="M.GenomeAnnotation.annotate_proteins_kmer_v1" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="410" source="M.GenomeAnnotation.annotate_proteins_kmer_v2" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1245" source="D.KBaseProteinStructure.feature_id_t" target="D.KBaseProteinStructure.fid_to_pdb_matches" label="HASH_KEY"><data key="moduleName">KBaseProteinStructure</data></edge><edge id="1236" source="D.KBaseProteinStructure.feature_id_t" target="D.KBaseProteinStructure.feature_ids_t" label="LIST_OF"><data key="moduleName">KBaseProteinStructure</data></edge><edge id="553" source="D.KBaseBiochem.CompoundStructure" target="D.KBaseBiochem.BiochemistryStructures" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="94" source="D.Communities.MetagenomeSet" target="D.Communities.BiomMetagenome" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="100" source="D.Communities.MetagenomeSet" target="D.Communities.BiomMatrix" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="1612" source="D.Ontology.TestType" target="M.Ontology.association_test" label="METHOD_PARAM"><data key="moduleName">Ontology</data></edge><edge id="1606" source="D.Ontology.TestType" target="M.Ontology.get_go_enrichment" label="METHOD_PARAM"><data key="moduleName">Ontology</data></edge><edge id="105" source="D.Communities.BiomMatrixEntry" target="D.Communities.BiomMatrix" label="LIST_OF"><data key="moduleName">Communities</data></edge><edge id="111" source="D.ERDB_Service.fieldValues" target="D.ERDB_Service.rowlist" label="LIST_OF"><data key="moduleName">ERDB_Service</data></edge><edge id="1835" source="D.Tree.boolean" target="D.Tree.FilterParams" label="SUBTYPE"><data key="moduleName">Tree</data></edge><edge id="1836" source="D.Tree.boolean" target="D.Tree.FilterParams" label="SUBTYPE"><data key="moduleName">Tree</data></edge><edge id="1729" source="D.ProteinInfo.fid" target="M.ProteinInfo.fids_to_ec" label="METHOD_PARAM"><data key="moduleName">ProteinInfo</data></edge><edge id="1726" source="D.ProteinInfo.fid" target="M.ProteinInfo.fids_to_orthologs" label="METHOD_PARAM"><data key="moduleName">ProteinInfo</data></edge><edge id="1742" source="D.ProteinInfo.fid" target="M.ProteinInfo.fids_to_eukaryotic_orthologs" label="METHOD_PARAM"><data key="moduleName">ProteinInfo</data></edge><edge id="1709" source="D.ProteinInfo.fid" target="M.ProteinInfo.fids_to_operons" label="METHOD_PARAM"><data key="moduleName">ProteinInfo</data></edge><edge id="1732" source="D.ProteinInfo.fid" target="M.ProteinInfo.fids_to_go" label="METHOD_PARAM"><data key="moduleName">ProteinInfo</data></edge><edge id="1715" source="D.ProteinInfo.fid" target="M.ProteinInfo.fids_to_domain_hits" label="METHOD_PARAM"><data key="moduleName">ProteinInfo</data></edge><edge id="1738" source="D.ProteinInfo.fid" target="M.ProteinInfo.fidlist_to_neighbors" label="METHOD_PARAM"><data key="moduleName">ProteinInfo</data></edge><edge id="1723" source="D.ProteinInfo.fid" target="M.ProteinInfo.fids_to_ipr" label="METHOD_PARAM"><data key="moduleName">ProteinInfo</data></edge><edge id="1735" source="D.ProteinInfo.fid" target="M.ProteinInfo.fid_to_neighbors" label="METHOD_PARAM"><data key="moduleName">ProteinInfo</data></edge><edge id="1712" source="D.ProteinInfo.fid" target="M.ProteinInfo.fids_to_domains" label="METHOD_PARAM"><data key="moduleName">ProteinInfo</data></edge><edge id="1706" source="D.ProteinInfo.fid" target="D.ProteinInfo.neighbor" label="HASH_KEY"><data key="moduleName">ProteinInfo</data></edge><edge id="1708" source="D.ProteinInfo.fid" target="D.ProteinInfo.orthologs" label="LIST_OF"><data key="moduleName">ProteinInfo</data></edge><edge id="1707" source="D.ProteinInfo.fid" target="D.ProteinInfo.operon" label="LIST_OF"><data key="moduleName">ProteinInfo</data></edge><edge id="1930" source="D.UserProfile.UserProfile" target="D.UserProfile.SetUserProfileParams" label="SUBTYPE"><data key="moduleName">UserProfile</data></edge><edge id="679" source="M.KBaseExpression.get_expression_sample_ids_by_experimental_unit_ids" target="D.KBaseExpression.sample_ids" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="468" source="D.GWAS.CalculateKinshipMatrixParams" target="M.GWAS.calculate_kinship_matrix" label="METHOD_PARAM"><data key="moduleName">GWAS</data></edge><edge id="2080" source="M.Workspace.list_objects" target="D.Workspace.object_info" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="986" source="D.KBaseFBA.TargetGeneProbabilities" target="D.KBaseFBA.TFtoTGmap" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1550" source="D.MOTranslation.genomeId" target="M.MOTranslation.moLocusIds_to_fid_in_genome_fast" label="METHOD_PARAM"><data key="moduleName">MOTranslation</data></edge><edge id="1540" source="D.MOTranslation.genomeId" target="M.MOTranslation.map_to_fid_fast" label="METHOD_PARAM"><data key="moduleName">MOTranslation</data></edge><edge id="1535" source="D.MOTranslation.genomeId" target="M.MOTranslation.map_to_fid" label="METHOD_PARAM"><data key="moduleName">MOTranslation</data></edge><edge id="1545" source="D.MOTranslation.genomeId" target="M.MOTranslation.moLocusIds_to_fid_in_genome" label="METHOD_PARAM"><data key="moduleName">MOTranslation</data></edge><edge id="1752" source="M.RDPTools.probematchSeqs" target="D.RDPTools.Handle" label="METHOD_RETURN"><data key="moduleName">RDPTools</data></edge><edge id="1171" source="M.KBaseNetworks.build_first_neighbor_network" target="D.KBaseNetworks.Network" label="METHOD_RETURN"><data key="moduleName">KBaseNetworks</data></edge><edge id="502" source="D.InvocationService.command_desc" target="D.InvocationService.command_group_desc" label="LIST_OF"><data key="moduleName">InvocationService</data></edge><edge id="1339" source="D.KBaseTrees.ws_tree_id" target="D.KBaseTrees.TreeDecoration" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1018" source="D.KBaseFile.singlelib_id" target="D.KBaseFile.AssemblyFile" label="LIST_OF"><data key="moduleName">KBaseFile</data></edge><edge id="469" source="D.GWAS.RunGWASParams" target="M.GWAS.run_gwas" label="METHOD_PARAM"><data key="moduleName">GWAS</data></edge><edge id="1160" source="M.KBaseNetworks.all_datasets" target="D.KBaseNetworks.Dataset" label="METHOD_RETURN"><data key="moduleName">KBaseNetworks</data></edge><edge id="146" source="D.ExpressionServices.person_id" target="D.ExpressionServices.person_ids" label="LIST_OF"><data key="moduleName">ExpressionServices</data></edge><edge id="1032" source="D.KBaseGeneFamilies.DomainModel" target="D.KBaseGeneFamilies.DomainLibrary" label="HASH_VALUE"><data key="moduleName">KBaseGeneFamilies</data></edge><edge id="979" source="D.KBaseFBA.fbamodel_ref" target="D.KBaseFBA.ReactionSensitivityAnalysis" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="941" source="D.KBaseFBA.fbamodel_ref" target="D.KBaseFBA.Gapfilling" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="930" source="D.KBaseFBA.fbamodel_ref" target="D.KBaseFBA.Gapgeneration" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="999" source="D.KBaseFBA.fbamodel_ref" target="D.KBaseFBA.FBAModelSetElement" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="896" source="D.KBaseFBA.fbamodel_ref" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="200" source="D.ExpressionServices.gse_errors" target="D.ExpressionServices.GseObject" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="639" source="D.KBaseExpression.expression_data_samples_map" target="D.KBaseExpression.ontology_expression_data_sample_mapping" label="HASH_VALUE"><data key="moduleName">KBaseExpression</data></edge><edge id="635" source="D.KBaseExpression.expression_data_samples_map" target="D.KBaseExpression.strain_expression_data_samples_mapping" label="HASH_VALUE"><data key="moduleName">KBaseExpression</data></edge><edge id="631" source="D.KBaseExpression.expression_data_samples_map" target="D.KBaseExpression.experimental_unit_expression_data_samples_mapping" label="HASH_VALUE"><data key="moduleName">KBaseExpression</data></edge><edge id="629" source="D.KBaseExpression.expression_data_samples_map" target="D.KBaseExpression.series_expression_data_samples_mapping" label="HASH_VALUE"><data key="moduleName">KBaseExpression</data></edge><edge id="1873" source="M.UserAndJobState.create_and_start_job" target="D.UserAndJobState.job_id" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="1642" source="D.ProbabilisticAnnotation.CalculateParams" target="M.ProbabilisticAnnotation.calculate" label="METHOD_PARAM"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="257" source="M.ExpressionServices.get_top_changers" target="D.ExpressionServices.sample_comparison_mapping" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="1322" source="D.KBaseSearch.FeatureSetElement" target="D.KBaseSearch.FeatureSet" label="HASH_VALUE"><data key="moduleName">KBaseSearch</data></edge><edge id="144" source="D.ExpressionServices.SampleAnnotation" target="D.ExpressionServices.sample_annotations" label="LIST_OF"><data key="moduleName">ExpressionServices</data></edge><edge id="1196" source="D.KBaseOntology.evidence_code" target="D.KBaseOntology.OntologyTermAnnotation" label="LIST_OF"><data key="moduleName">KBaseOntology</data></edge><edge id="1193" source="D.KBaseOntology.evidence_code" target="D.KBaseOntology.Ontology" label="LIST_OF"><data key="moduleName">KBaseOntology</data></edge><edge id="532" source="D.KBaseBiochem.source_id" target="D.KBaseBiochem.Media" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="866" source="D.KBaseFBA.gapfillsol_id" target="D.KBaseFBA.GapfillingSolution" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="907" source="D.KBaseFBA.FBACompoundBound" target="D.KBaseFBA.FBA" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1209" source="D.KBasePhenotypes.phenotypeset_id" target="D.KBasePhenotypes.PhenotypeSet" label="SUBTYPE"><data key="moduleName">KBasePhenotypes</data></edge><edge id="384" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_features_CDS_glimmer3" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="382" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_RNAs" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="450" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.run_pipeline" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="380" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_features_tRNA_trnascan" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="435" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.update_functions" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="417" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_features_ProtoCDS_kmer_v2" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="365" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.annotate_genome" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="433" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_features_crispr" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="363" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.assign_functions_to_CDSs" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="389" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_features_CDS_genemark" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="431" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_features_strep_pneumo_repeat" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="369" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_pyrrolysoproteins" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="387" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_features_CDS_prodigal" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="367" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_selenoproteins" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="414" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_features_ProtoCDS_kmer_v1" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="438" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.renumber_features" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="411" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.resolve_overlapping_features" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="349" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.add_contigs_from_handle" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="391" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_features_CDS_SEED_projection" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="393" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_features_CDS_FragGeneScan" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="395" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_features_repeat_region_SEED" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="371" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_features_selenoprotein" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="343" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.set_metadata" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="373" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_features_pyrrolysoprotein" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="346" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.add_contigs" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="427" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.find_close_neighbors" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="426" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.estimate_crude_phylogenetic_position_kmer" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="408" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.annotate_proteins_kmer_v2" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="352" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.add_features" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="429" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_features_strep_suis_repeat" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="355" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.genomeTO_to_reconstructionTO" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="440" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.export_genome" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="405" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.annotate_proteins_kmer_v1" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="357" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.genomeTO_to_feature_data" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="375" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_features_insertion_sequences" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="377" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_features_rRNA_SEED" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="400" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_features_scan_for_matches" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="398" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.call_features_prophage_phispy" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="420" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.compute_special_proteins" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="402" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.annotate_proteins_similarity" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="422" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.compute_cdd" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="424" source="D.GenomeAnnotation.genomeTO" target="M.GenomeAnnotation.annotate_proteins" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1109" source="D.KBaseGwasData.shock_ref" target="D.KBaseGwasData.VariationSample" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="1112" source="D.KBaseGwasData.shock_ref" target="D.KBaseGwasData.VariantCall" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="727" source="M.KBaseExpression.get_expression_samples_descriptions" target="D.KBaseExpression.samples_string_map" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="494" source="D.Inferelator.cmonkey_run_result_ref" target="D.Inferelator.InferelatorRunParameters" label="SUBTYPE"><data key="moduleName">Inferelator</data></edge><edge id="1582" source="D.Ontology.Domain" target="D.Ontology.GoTermInfo" label="SUBTYPE"><data key="moduleName">Ontology</data></edge><edge id="1579" source="D.Ontology.Domain" target="D.Ontology.DomainList" label="LIST_OF"><data key="moduleName">Ontology</data></edge><edge id="538" source="D.KBaseBiochem.compoundset_id" target="D.KBaseBiochem.CompoundSet" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="1166" source="M.KBaseNetworks.taxon2datasets" target="D.KBaseNetworks.Dataset" label="METHOD_RETURN"><data key="moduleName">KBaseNetworks</data></edge><edge id="1247" source="D.KBaseProteinStructure.md5_ids_t" target="M.KBaseProteinStructure.lookup_pdb_by_md5" label="METHOD_PARAM"><data key="moduleName">KBaseProteinStructure</data></edge><edge id="1025" source="D.KBaseGeneFamilies.model_type" target="D.KBaseGeneFamilies.DomainModel" label="SUBTYPE"><data key="moduleName">KBaseGeneFamilies</data></edge><edge id="1206" source="D.KBasePhenotypes.media_ref" target="D.KBasePhenotypes.Phenotype" label="SUBTYPE"><data key="moduleName">KBasePhenotypes</data></edge><edge id="2133" source="M.Workspace.list_modules" target="D.Workspace.modulename" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="1653" source="D.ProbabilisticAnnotation.GetProbannoParams" target="M.ProbabilisticAnnotation.get_probanno" label="METHOD_PARAM"><data key="moduleName">ProbabilisticAnnotation</data></edge><edge id="1805" source="D.Tree.newick_tree" target="M.Tree.get_leaf_count" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1804" source="D.Tree.newick_tree" target="M.Tree.get_node_count" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1840" source="D.Tree.newick_tree" target="M.Tree.draw_html_tree" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1802" source="D.Tree.newick_tree" target="M.Tree.extract_node_names" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1791" source="D.Tree.newick_tree" target="M.Tree.replace_node_names" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1800" source="D.Tree.newick_tree" target="M.Tree.extract_leaf_node_names" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1798" source="D.Tree.newick_tree" target="M.Tree.merge_zero_distance_leaves" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1795" source="D.Tree.newick_tree" target="M.Tree.remove_node_names_and_simplify" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="1841" source="M.Tree.draw_html_tree" target="D.Tree.html_file" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="291" source="D.ExpressionServices.expression_sample_ids" target="D.ExpressionServices.genome_expression_sample_ids_map" label="HASH_VALUE"><data key="moduleName">ExpressionServices</data></edge><edge id="304" source="D.ExpressionServices.expression_sample_ids" target="D.ExpressionServices.ExpressionReplicateGroup" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="299" source="D.ExpressionServices.expression_sample_ids" target="D.ExpressionServices.ExpressionSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="1091" source="D.KBaseGenomes.MetagenomeAnnotationOTUFunction" target="D.KBaseGenomes.MetagenomeAnnotationOTU" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="1571" source="M.NarrativeJobService.status" target="D.NarrativeJobService.Status" label="METHOD_RETURN"><data key="moduleName">NarrativeJobService</data></edge><edge id="46" source="D.Cmonkey.gene_id" target="D.Cmonkey.CmonkeyCluster" label="LIST_OF"><data key="moduleName">Cmonkey</data></edge><edge id="1688" source="D.PROM.genome_id" target="M.PROM.get_regulatory_network_by_genome" label="METHOD_PARAM"><data key="moduleName">PROM</data></edge><edge id="1670" source="D.PROM.genome_id" target="M.PROM.get_expression_data_by_genome" label="METHOD_PARAM"><data key="moduleName">PROM</data></edge><edge id="958" source="D.KBaseFBA.compartment_ref" target="D.KBaseFBA.TemplateBiomassComponent" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="863" source="D.KBaseFBA.compartment_ref" target="D.KBaseFBA.GapfillingReaction" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="964" source="D.KBaseFBA.compartment_ref" target="D.KBaseFBA.TemplateReaction" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="793" source="D.KBaseFBA.compartment_ref" target="D.KBaseFBA.ModelCompartment" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="953" source="D.KBaseFBA.compartment_ref" target="D.KBaseFBA.Gapfilling" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="430" source="M.GenomeAnnotation.call_features_strep_suis_repeat" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="227" source="M.ExpressionServices.get_expression_samples_data_by_genome_ids" target="D.ExpressionServices.genome_expression_data_samples_mapping" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="386" source="M.GenomeAnnotation.call_features_CDS_glimmer3" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1065" source="D.KBaseGenomes.co_occurring_fid" target="D.KBaseGenomes.Feature" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="1807" source="M.Tree.get_tree" target="D.Tree.tree" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="1228" source="D.KBasePPI.InteractionDetectionType" target="D.KBasePPI.Interaction" label="SUBTYPE"><data key="moduleName">KBasePPI</data></edge><edge id="1038" source="D.KBaseGeneFamilies.annotation_element" target="D.KBaseGeneFamilies.DomainAnnotation" label="LIST_OF"><data key="moduleName">KBaseGeneFamilies</data></edge><edge id="145" source="D.ExpressionServices.external_source_id" target="D.ExpressionServices.external_source_ids" label="LIST_OF"><data key="moduleName">ExpressionServices</data></edge><edge id="662" source="D.KBaseExpression.gsm_errors" target="D.KBaseExpression.GsmObject" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="1144" source="D.KBaseGwasData.topvariationGenelistUnit" target="D.KBaseGwasData.GwasPopulationSummary" label="LIST_OF"><data key="moduleName">KBaseGwasData</data></edge><edge id="510" source="D.KBaseAssembly.bool" target="D.KBaseAssembly.PairedEndLibrary" label="SUBTYPE"><data key="moduleName">KBaseAssembly</data></edge><edge id="509" source="D.KBaseAssembly.bool" target="D.KBaseAssembly.PairedEndLibrary" label="SUBTYPE"><data key="moduleName">KBaseAssembly</data></edge><edge id="552" source="D.KBaseBiochem.biochemstruct_id" target="D.KBaseBiochem.BiochemistryStructures" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="1084" source="D.KBaseGenomes.Fasta_ref" target="D.KBaseGenomes.ProteinSet" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1048" source="D.KBaseGenomes.Fasta_ref" target="D.KBaseGenomes.ContigSet" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1127" source="D.KBaseGwasData.GwasPopulationTrait_obj_id" target="D.KBaseGwasData.GwasTopVariations" label="SUBTYPE"><data key="moduleName">KBaseGwasData</data></edge><edge id="1246" source="D.KBaseProteinStructure.PDBMatches" target="D.KBaseProteinStructure.fid_to_pdb_matches" label="HASH_VALUE"><data key="moduleName">KBaseProteinStructure</data></edge><edge id="1244" source="D.KBaseProteinStructure.PDBMatches" target="D.KBaseProteinStructure.md5_to_pdb_matches" label="HASH_VALUE"><data key="moduleName">KBaseProteinStructure</data></edge><edge id="737" source="M.KBaseExpression.get_expression_series_titles" target="D.KBaseExpression.series_string_map" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="1560" source="D.NarrativeJobService.service_method" target="D.NarrativeJobService.step" label="SUBTYPE"><data key="moduleName">NarrativeJobService</data></edge><edge id="20" source="M.AbstractHandle.ids_to_handles" target="D.AbstractHandle.Handle" label="METHOD_RETURN"><data key="moduleName">AbstractHandle</data></edge><edge id="13" source="M.AbstractHandle.ids_to_handles" target="D.AbstractHandle.Handle" label="METHOD_RETURN"><data key="moduleName">AbstractHandle</data></edge><edge id="215" source="M.ExpressionServices.get_expression_samples_data_by_experiment_meta_ids" target="D.ExpressionServices.experiment_meta_expression_data_samples_mapping" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="1908" source="D.UserAndJobState.service_name" target="M.UserAndJobState.list_jobs" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1844" source="D.UserAndJobState.service_name" target="M.UserAndJobState.get_state" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1842" source="D.UserAndJobState.service_name" target="M.UserAndJobState.set_state" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1849" source="D.UserAndJobState.service_name" target="M.UserAndJobState.get_has_state" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1854" source="D.UserAndJobState.service_name" target="M.UserAndJobState.list_state" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1852" source="D.UserAndJobState.service_name" target="M.UserAndJobState.remove_state" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1846" source="D.UserAndJobState.service_name" target="M.UserAndJobState.has_state" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="42" source="M.BAMBI.find_motifs" target="D.BAMBI.bambi_job_id" label="METHOD_RETURN"><data key="moduleName">BAMBI</data></edge><edge id="711" source="M.KBaseExpression.get_expression_data_by_feature_ids" target="D.KBaseExpression.feature_sample_measurement_mapping" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="1207" source="D.KBasePhenotypes.feature_ref" target="D.KBasePhenotypes.Phenotype" label="LIST_OF"><data key="moduleName">KBasePhenotypes</data></edge><edge id="874" source="D.KBaseFBA.ActivatedReaction" target="D.KBaseFBA.GapfillingSolution" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="221" source="D.ExpressionServices.strain_ids" target="M.ExpressionServices.get_expression_sample_ids_by_strain_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="218" source="D.ExpressionServices.strain_ids" target="M.ExpressionServices.get_expression_samples_data_by_strain_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="1541" source="M.MOTranslation.map_to_fid_fast" target="D.MOTranslation.protein_id" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="1542" source="M.MOTranslation.map_to_fid_fast" target="D.MOTranslation.result" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="1543" source="M.MOTranslation.map_to_fid_fast" target="D.MOTranslation.status" label="METHOD_RETURN"><data key="moduleName">MOTranslation</data></edge><edge id="197" source="D.ExpressionServices.GsmObject" target="D.ExpressionServices.gse_samples" label="HASH_VALUE"><data key="moduleName">ExpressionServices</data></edge><edge id="1211" source="D.KBasePhenotypes.genome_ref" target="D.KBasePhenotypes.PhenotypeSet" label="SUBTYPE"><data key="moduleName">KBasePhenotypes</data></edge><edge id="498" source="D.Inferelator.InferelatorHit" target="D.Inferelator.InferelatorRunResult" label="LIST_OF"><data key="moduleName">Inferelator</data></edge><edge id="1089" source="D.KBaseGenomes.function_probability" target="D.KBaseGenomes.ProbabilisticAnnotation" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="805" source="D.KBaseFBA.modelcompartment_ref" target="D.KBaseFBA.ModelReaction" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="796" source="D.KBaseFBA.modelcompartment_ref" target="D.KBaseFBA.ModelCompound" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="1951" source="D.Workspace.object_path" target="D.Workspace.SubObjectIdentity" label="LIST_OF"><data key="moduleName">Workspace</data></edge><edge id="59" source="D.Communities.DataType" target="D.Communities.Data" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="65" source="D.Communities.DataType" target="D.Communities.Collection" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="61" source="D.Communities.DataType" target="D.Communities.DataHandle" label="SUBTYPE"><data key="moduleName">Communities</data></edge><edge id="913" source="D.KBaseFBA.FBATintleResult" target="D.KBaseFBA.FBA" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="178" source="D.ExpressionServices.contact_first_name" target="D.ExpressionServices.ContactPerson" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="113" source="D.ERDB_Service.filterClause" target="M.ERDB_Service.GetAll" label="METHOD_PARAM"><data key="moduleName">ERDB_Service</data></edge><edge id="1229" source="D.KBasePPI.Publication" target="D.KBasePPI.Interaction" label="SUBTYPE"><data key="moduleName">KBasePPI</data></edge><edge id="2106" source="M.Workspace.revert_object" target="D.Workspace.object_info" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="1539" source="D.MOTranslation.query_md5" target="M.MOTranslation.map_to_fid_fast" label="METHOD_PARAM"><data key="moduleName">MOTranslation</data></edge><edge id="1231" source="D.KBasePPI.DatasetSource" target="D.KBasePPI.InteractionDataset" label="SUBTYPE"><data key="moduleName">KBasePPI</data></edge><edge id="403" source="D.GenomeAnnotation.similarity_parameters" target="M.GenomeAnnotation.annotate_proteins_similarity" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="446" source="D.GenomeAnnotation.similarity_parameters" target="D.GenomeAnnotation.pipeline_stage" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="664" source="D.KBaseExpression.gse_samples" target="D.KBaseExpression.GseObject" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="1877" source="D.UserAndJobState.progress" target="M.UserAndJobState.update_job_progress" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1293" source="D.KBaseSearch.location" target="D.KBaseSearch.Feature" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="1357" source="D.KBaseTrees.label" target="D.KBaseTrees.MSA" label="HASH_VALUE"><data key="moduleName">KBaseTrees</data></edge><edge id="1331" source="D.KBaseTrees.label" target="D.KBaseTrees.Tree" label="HASH_VALUE"><data key="moduleName">KBaseTrees</data></edge><edge id="1857" source="M.UserAndJobState.list_state_services" target="D.UserAndJobState.service_name" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="1860" source="D.UserAndJobState.Result" target="D.UserAndJobState.Results" label="LIST_OF"><data key="moduleName">UserAndJobState</data></edge><edge id="1910" source="M.UserAndJobState.list_jobs" target="D.UserAndJobState.job_info" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="1425" source="D.KBaseTrees.abundance_profile" target="D.KBaseTrees.abundance_data" label="HASH_VALUE"><data key="moduleName">KBaseTrees</data></edge><edge id="465" source="D.GenomeComparison.blast_proteomes_params" target="M.GenomeComparison.blast_proteomes" label="METHOD_PARAM"><data key="moduleName">GenomeComparison</data></edge><edge id="652" source="D.KBaseExpression.gsm_data_errors" target="D.KBaseExpression.GenomeDataGSM" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="1320" source="D.KBaseSearch.feature_ref" target="D.KBaseSearch.FeatureSetElement" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="1502" source="M.MEME.find_sites_with_mast" target="D.MEME.MastRunResult" label="METHOD_RETURN"><data key="moduleName">MEME</data></edge><edge id="993" source="D.KBaseFBA.WorkspaceGenomeClassData" target="D.KBaseFBA.ClassifierTrainingSet" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1821" source="M.Tree.get_alignment_ids_by_feature" target="D.Tree.kbase_id" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="276" source="D.ExpressionServices.series_ids" target="M.ExpressionServices.get_expression_series_external_source_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="270" source="D.ExpressionServices.series_ids" target="M.ExpressionServices.get_expression_series_titles" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="272" source="D.ExpressionServices.series_ids" target="M.ExpressionServices.get_expression_series_summaries" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="206" source="D.ExpressionServices.series_ids" target="M.ExpressionServices.get_expression_samples_data_by_series_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="274" source="D.ExpressionServices.series_ids" target="M.ExpressionServices.get_expression_series_designs" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="208" source="D.ExpressionServices.series_ids" target="M.ExpressionServices.get_expression_sample_ids_by_series_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="156" source="D.ExpressionServices.series_ids" target="D.ExpressionServices.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="1668" source="D.PROM.TFMap" target="D.PROM.PromConstraint" label="LIST_OF"><data key="moduleName">PROM</data></edge><edge id="1303" source="D.KBaseSearch.coexpressed_fid" target="D.KBaseSearch.Feature" label="LIST_OF"><data key="moduleName">KBaseSearch</data></edge><edge id="697" source="M.KBaseExpression.get_expression_sample_ids_by_genome_ids" target="D.KBaseExpression.sample_ids" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="1198" source="D.KBaseOntology.OntologyTermAnnotation" target="D.KBaseOntology.ontology_term_annotation_map" label="HASH_VALUE"><data key="moduleName">KBaseOntology</data></edge><edge id="2086" source="D.Workspace.boolean" target="M.Workspace.get_object_info" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2090" source="D.Workspace.boolean" target="D.Workspace.GetObjectInfoNewParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2055" source="D.Workspace.boolean" target="D.Workspace.ListWorkspaceInfoParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2056" source="D.Workspace.boolean" target="D.Workspace.ListWorkspaceInfoParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2120" source="D.Workspace.boolean" target="D.Workspace.RegisterTypespecParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2062" source="D.Workspace.boolean" target="D.Workspace.list_workspace_objects_params" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2005" source="D.Workspace.boolean" target="D.Workspace.ObjectSaveData" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2033" source="D.Workspace.boolean" target="D.Workspace.ObjectData" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2074" source="D.Workspace.boolean" target="D.Workspace.ListObjectsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2073" source="D.Workspace.boolean" target="D.Workspace.ListObjectsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2089" source="D.Workspace.boolean" target="D.Workspace.GetObjectInfoNewParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2076" source="D.Workspace.boolean" target="D.Workspace.ListObjectsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2075" source="D.Workspace.boolean" target="D.Workspace.ListObjectsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2078" source="D.Workspace.boolean" target="D.Workspace.ListObjectsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2077" source="D.Workspace.boolean" target="D.Workspace.ListObjectsParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2192" source="D.Workspace.boolean" target="D.Workspace.ListAllTypesParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2187" source="D.Workspace.boolean" target="D.Workspace.GrantModuleOwnershipParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2151" source="D.Workspace.boolean" target="D.Workspace.ModuleInfo" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2022" source="D.Workspace.boolean" target="D.Workspace.ObjectProvenanceInfo" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2047" source="D.Workspace.boolean" target="D.Workspace.list_workspaces_params" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2057" source="D.Workspace.boolean" target="D.Workspace.ListWorkspaceInfoParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="326" source="D.GenomeAnnotation.feature" target="D.GenomeAnnotation.genomeTO" label="LIST_OF"><data key="moduleName">GenomeAnnotation</data></edge><edge id="2013" source="D.Workspace.object_metadata" target="D.Workspace.get_object_output" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="524" source="D.KBaseBiochem.reaction_ref" target="D.KBaseBiochem.Reaction" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="541" source="D.KBaseBiochem.reaction_ref" target="D.KBaseBiochem.ReactionSet" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="1838" source="D.Tree.FilterParams" target="M.Tree.filter_abundance_profile" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="184" source="D.ExpressionServices.FullMeasurement" target="D.ExpressionServices.gsm_data_set" label="HASH_VALUE"><data key="moduleName">ExpressionServices</data></edge><edge id="828" source="D.KBaseFBA.metagenome_ref" target="D.KBaseFBA.FBAModel" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="762" source="D.KBaseExpression.expression_ontology_terms" target="D.KBaseExpression.ExpressionSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="619" source="D.KBaseExpression.experimental_unit_id" target="D.KBaseExpression.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="630" source="D.KBaseExpression.experimental_unit_id" target="D.KBaseExpression.experimental_unit_expression_data_samples_mapping" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="592" source="D.KBaseExpression.experimental_unit_id" target="D.KBaseExpression.experimental_unit_ids" label="LIST_OF"><data key="moduleName">KBaseExpression</data></edge><edge id="153" source="D.ExpressionServices.experimental_unit_id" target="D.ExpressionServices.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="164" source="D.ExpressionServices.experimental_unit_id" target="D.ExpressionServices.experimental_unit_expression_data_samples_mapping" label="HASH_KEY"><data key="moduleName">ExpressionServices</data></edge><edge id="126" source="D.ExpressionServices.experimental_unit_id" target="D.ExpressionServices.experimental_unit_ids" label="LIST_OF"><data key="moduleName">ExpressionServices</data></edge><edge id="1534" source="D.MOTranslation.query_sequence" target="M.MOTranslation.map_to_fid" label="METHOD_PARAM"><data key="moduleName">MOTranslation</data></edge><edge id="1960" source="D.Workspace.CreateWorkspaceParams" target="M.Workspace.create_workspace" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="1468" source="D.MAK.FloatDataTable" target="D.MAK.FloatDataTableContainer" label="LIST_OF"><data key="moduleName">MAK</data></edge><edge id="735" source="M.KBaseExpression.get_expression_samples_original_log2_medians" target="D.KBaseExpression.samples_float_map" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="1343" source="D.KBaseTrees.viz_val_int" target="D.KBaseTrees.TreeDecoration" label="LIST_OF"><data key="moduleName">KBaseTrees</data></edge><edge id="1512" source="D.MOTranslation.fid" target="M.MOTranslation.fids_to_moLocusIds" label="METHOD_PARAM"><data key="moduleName">MOTranslation</data></edge><edge id="1532" source="D.MOTranslation.fid" target="D.MOTranslation.result" label="SUBTYPE"><data key="moduleName">MOTranslation</data></edge><edge id="689" source="M.KBaseExpression.get_expression_sample_ids_by_strain_ids" target="D.KBaseExpression.sample_ids" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="1995" source="D.Workspace.obj_name" target="D.Workspace.save_object_params" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1947" source="D.Workspace.obj_name" target="D.Workspace.SubObjectIdentity" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2081" source="D.Workspace.obj_name" target="D.Workspace.get_objectmeta_params" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2098" source="D.Workspace.obj_name" target="D.Workspace.RenameObjectParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2011" source="D.Workspace.obj_name" target="D.Workspace.get_object_params" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1940" source="D.Workspace.obj_name" target="D.Workspace.ObjectIdentity" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2001" source="D.Workspace.obj_name" target="D.Workspace.ObjectSaveData" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="790" source="D.KBaseFBA.biomass_id" target="D.KBaseFBA.Biomass" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="841" source="D.KBaseFBA.biomass_id" target="D.KBaseFBA.FBAConstraint" label="HASH_KEY"><data key="moduleName">KBaseFBA</data></edge><edge id="889" source="D.KBaseFBA.biomass_id" target="D.KBaseFBA.FBA" label="HASH_KEY"><data key="moduleName">KBaseFBA</data></edge><edge id="1146" source="D.KBaseNarrative.Cell" target="D.KBaseNarrative.Worksheet" label="LIST_OF"><data key="moduleName">KBaseNarrative</data></edge><edge id="731" source="M.KBaseExpression.get_expression_samples_types" target="D.KBaseExpression.samples_string_map" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="478" source="M.IDServerAPI.kbase_ids_to_external_ids" target="D.IDServerAPI.kbase_id" label="METHOD_RETURN"><data key="moduleName">IDServerAPI</data></edge><edge id="305" source="D.GenomeAnnotation.md5" target="D.GenomeAnnotation.md5s" label="LIST_OF"><data key="moduleName">GenomeAnnotation</data></edge><edge id="824" source="D.KBaseFBA.QuantOptSolution" target="D.KBaseFBA.ModelQuantOpt" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="825" source="D.KBaseFBA.fbamodel_id" target="D.KBaseFBA.FBAModel" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="1366" source="D.KBaseTrees.MSA" target="D.KBaseTrees.MSASetElement" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1457" source="M.KmerEval.call_prot_with_kmers" target="D.KmerEval.id" label="METHOD_RETURN"><data key="moduleName">KmerEval</data></edge><edge id="1455" source="M.KmerEval.call_dna_with_kmers" target="D.KmerEval.contig_data" label="METHOD_RETURN"><data key="moduleName">KmerEval</data></edge><edge id="1454" source="M.KmerEval.call_dna_with_kmers" target="D.KmerEval.contig" label="METHOD_RETURN"><data key="moduleName">KmerEval</data></edge><edge id="1489" source="D.MEME.MemePSPM" target="M.MEME.compare_motifs_with_tomtom" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1499" source="D.MEME.MemePSPM" target="M.MEME.find_sites_with_mast" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1475" source="D.MEME.MemePSPM" target="D.MEME.MemePSPMCollection" label="LIST_OF"><data key="moduleName">MEME</data></edge><edge id="1676" source="D.PROM.auth_token" target="M.PROM.create_expression_data_collection" label="METHOD_PARAM"><data key="moduleName">PROM</data></edge><edge id="1695" source="D.PROM.auth_token" target="M.PROM.change_regulatory_network_namespace" label="METHOD_PARAM"><data key="moduleName">PROM</data></edge><edge id="1672" source="D.PROM.auth_token" target="M.PROM.get_expression_data_by_genome" label="METHOD_PARAM"><data key="moduleName">PROM</data></edge><edge id="1686" source="D.PROM.auth_token" target="M.PROM.change_expression_data_namespace" label="METHOD_PARAM"><data key="moduleName">PROM</data></edge><edge id="1682" source="D.PROM.auth_token" target="M.PROM.add_expression_data_to_collection" label="METHOD_PARAM"><data key="moduleName">PROM</data></edge><edge id="1690" source="D.PROM.auth_token" target="M.PROM.get_regulatory_network_by_genome" label="METHOD_PARAM"><data key="moduleName">PROM</data></edge><edge id="1702" source="D.PROM.auth_token" target="D.PROM.CreatePromConstraintsParameters" label="SUBTYPE"><data key="moduleName">PROM</data></edge><edge id="745" source="M.KBaseExpression.get_expression_sample_ids_by_sample_external_source_ids" target="D.KBaseExpression.sample_ids" label="METHOD_RETURN"><data key="moduleName">KBaseExpression</data></edge><edge id="318" source="D.GenomeAnnotation.analysis_event_id" target="D.GenomeAnnotation.feature" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="307" source="D.GenomeAnnotation.analysis_event_id" target="D.GenomeAnnotation.analysis_event" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="960" source="D.KBaseFBA.templatebiomass_id" target="D.KBaseFBA.TemplateBiomass" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="273" source="M.ExpressionServices.get_expression_series_summaries" target="D.ExpressionServices.series_string_map" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="1837" source="D.Tree.abundance_data" target="M.Tree.filter_abundance_profile" label="METHOD_PARAM"><data key="moduleName">Tree</data></edge><edge id="792" source="D.KBaseFBA.modelcompartment_id" target="D.KBaseFBA.ModelCompartment" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="644" source="D.KBaseExpression.contact_first_name" target="D.KBaseExpression.ContactPerson" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="823" source="D.KBaseFBA.bool" target="D.KBaseFBA.ModelQuantOpt" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="945" source="D.KBaseFBA.bool" target="D.KBaseFBA.Gapfilling" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="981" source="D.KBaseFBA.bool" target="D.KBaseFBA.ReactionSensitivityAnalysis" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="946" source="D.KBaseFBA.bool" target="D.KBaseFBA.Gapfilling" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="980" source="D.KBaseFBA.bool" target="D.KBaseFBA.ReactionSensitivityAnalysis" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="943" source="D.KBaseFBA.bool" target="D.KBaseFBA.Gapfilling" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="925" source="D.KBaseFBA.bool" target="D.KBaseFBA.GapgenerationSolution" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="944" source="D.KBaseFBA.bool" target="D.KBaseFBA.Gapfilling" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="926" source="D.KBaseFBA.bool" target="D.KBaseFBA.GapgenerationSolution" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="949" source="D.KBaseFBA.bool" target="D.KBaseFBA.Gapfilling" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="820" source="D.KBaseFBA.bool" target="D.KBaseFBA.QuantOptSolution" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="947" source="D.KBaseFBA.bool" target="D.KBaseFBA.Gapfilling" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="948" source="D.KBaseFBA.bool" target="D.KBaseFBA.Gapfilling" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="884" source="D.KBaseFBA.bool" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="885" source="D.KBaseFBA.bool" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="886" source="D.KBaseFBA.bool" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="880" source="D.KBaseFBA.bool" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="881" source="D.KBaseFBA.bool" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="882" source="D.KBaseFBA.bool" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="883" source="D.KBaseFBA.bool" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="812" source="D.KBaseFBA.bool" target="D.KBaseFBA.ModelGapfill" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="890" source="D.KBaseFBA.bool" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="931" source="D.KBaseFBA.bool" target="D.KBaseFBA.Gapgeneration" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="853" source="D.KBaseFBA.bool" target="D.KBaseFBA.FBAMinimalReactionsResult" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="818" source="D.KBaseFBA.bool" target="D.KBaseFBA.ModelGapgen" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="932" source="D.KBaseFBA.bool" target="D.KBaseFBA.Gapgeneration" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="799" source="D.KBaseFBA.bool" target="D.KBaseFBA.ModelReactionProteinSubunit" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="933" source="D.KBaseFBA.bool" target="D.KBaseFBA.Gapgeneration" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="798" source="D.KBaseFBA.bool" target="D.KBaseFBA.ModelReactionProteinSubunit" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="934" source="D.KBaseFBA.bool" target="D.KBaseFBA.Gapgeneration" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="859" source="D.KBaseFBA.bool" target="D.KBaseFBA.QuantOptBoundMod" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="975" source="D.KBaseFBA.bool" target="D.KBaseFBA.ReactionSensitivityAnalysisReaction" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="974" source="D.KBaseFBA.bool" target="D.KBaseFBA.ReactionSensitivityAnalysisReaction" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="879" source="D.KBaseFBA.bool" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="877" source="D.KBaseFBA.bool" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="878" source="D.KBaseFBA.bool" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="893" source="D.KBaseFBA.bool" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="894" source="D.KBaseFBA.bool" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="891" source="D.KBaseFBA.bool" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="892" source="D.KBaseFBA.bool" target="D.KBaseFBA.FBA" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="871" source="D.KBaseFBA.bool" target="D.KBaseFBA.GapfillingSolution" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="870" source="D.KBaseFBA.bool" target="D.KBaseFBA.GapfillingSolution" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="1223" source="D.KBasePPI.ProteinID" target="D.KBasePPI.InteractionProtein" label="SUBTYPE"><data key="moduleName">KBasePPI</data></edge><edge id="1432" source="M.KBaseTrees.draw_html_tree" target="D.KBaseTrees.html_file" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="2172" source="M.Workspace.get_type_info" target="D.Workspace.TypeInfo" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="167" source="D.ExpressionServices.experimental_unit_expression_data_samples_mapping" target="D.ExpressionServices.experiment_meta_expression_data_samples_mapping" label="HASH_VALUE"><data key="moduleName">ExpressionServices</data></edge><edge id="401" source="M.GenomeAnnotation.call_features_scan_for_matches" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="794" source="D.KBaseFBA.modelcompound_id" target="D.KBaseFBA.ModelCompound" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="887" source="D.KBaseFBA.modelcompound_id" target="D.KBaseFBA.FBA" label="HASH_KEY"><data key="moduleName">KBaseFBA</data></edge><edge id="839" source="D.KBaseFBA.modelcompound_id" target="D.KBaseFBA.FBAConstraint" label="HASH_KEY"><data key="moduleName">KBaseFBA</data></edge><edge id="976" source="D.KBaseFBA.modelcompound_id" target="D.KBaseFBA.ReactionSensitivityAnalysisReaction" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1139" source="D.KBaseGwasData.populationUnit" target="D.KBaseGwasData.GwasPopulationSummary" label="LIST_OF"><data key="moduleName">KBaseGwasData</data></edge><edge id="617" source="D.KBaseExpression.strain_id" target="D.KBaseExpression.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="634" source="D.KBaseExpression.strain_id" target="D.KBaseExpression.strain_expression_data_samples_mapping" label="HASH_KEY"><data key="moduleName">KBaseExpression</data></edge><edge id="613" source="D.KBaseExpression.strain_id" target="D.KBaseExpression.strain_ids" label="LIST_OF"><data key="moduleName">KBaseExpression</data></edge><edge id="161" source="D.ExpressionServices.ExpressionDataSample" target="D.ExpressionServices.expression_data_samples_map" label="HASH_VALUE"><data key="moduleName">ExpressionServices</data></edge><edge id="1081" source="D.KBaseGenomes.annotation" target="D.KBaseGenomes.Protein" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="1060" source="D.KBaseGenomes.annotation" target="D.KBaseGenomes.Feature" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="1790" source="D.Tree.timestamp" target="D.Tree.AlignmentMetaData" label="SUBTYPE"><data key="moduleName">Tree</data></edge><edge id="1788" source="D.Tree.timestamp" target="D.Tree.TreeMetaData" label="SUBTYPE"><data key="moduleName">Tree</data></edge><edge id="1834" source="D.Tree.abundance_profile" target="D.Tree.abundance_data" label="HASH_VALUE"><data key="moduleName">Tree</data></edge><edge id="118" source="D.ERDB_Service.SQLstring" target="M.ERDB_Service.runSQL" label="METHOD_PARAM"><data key="moduleName">ERDB_Service</data></edge><edge id="1803" source="M.Tree.extract_node_names" target="D.Tree.node_name" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="580" source="D.KBaseCommunities.URI" target="D.KBaseCommunities.Metagenome" label="SUBTYPE"><data key="moduleName">KBaseCommunities</data></edge><edge id="583" source="D.KBaseCommunities.URI" target="D.KBaseCommunities.Metagenome" label="SUBTYPE"><data key="moduleName">KBaseCommunities</data></edge><edge id="575" source="D.KBaseCommunities.URI" target="D.KBaseCommunities.Sample" label="SUBTYPE"><data key="moduleName">KBaseCommunities</data></edge><edge id="579" source="D.KBaseCommunities.URI" target="D.KBaseCommunities.Project" label="SUBTYPE"><data key="moduleName">KBaseCommunities</data></edge><edge id="584" source="D.KBaseCommunities.URI" target="D.KBaseCommunities.Metagenome" label="LIST_OF"><data key="moduleName">KBaseCommunities</data></edge><edge id="1510" source="M.MEME.get_pspm_collection_from_meme_result" target="D.MEME.MemePSPMCollection" label="METHOD_RETURN"><data key="moduleName">MEME</data></edge><edge id="342" source="M.GenomeAnnotation.create_genome_from_RAST" target="D.GenomeAnnotation.genomeTO" label="METHOD_RETURN"><data key="moduleName">GenomeAnnotation</data></edge><edge id="1354" source="D.KBaseTrees.trim_info" target="D.KBaseTrees.MSA" label="HASH_VALUE"><data key="moduleName">KBaseTrees</data></edge><edge id="912" source="D.KBaseFBA.FBAPromResult" target="D.KBaseFBA.FBA" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1704" source="M.PROM.create_prom_constraints" target="D.PROM.status" label="METHOD_RETURN"><data key="moduleName">PROM</data></edge><edge id="1705" source="M.PROM.create_prom_constraints" target="D.PROM.prom_constraints_id" label="METHOD_RETURN"><data key="moduleName">PROM</data></edge><edge id="1718" source="D.ProteinInfo.domains" target="M.ProteinInfo.domains_to_fids" label="METHOD_PARAM"><data key="moduleName">ProteinInfo</data></edge><edge id="1721" source="D.ProteinInfo.domains" target="M.ProteinInfo.domains_to_domain_annotations" label="METHOD_PARAM"><data key="moduleName">ProteinInfo</data></edge><edge id="1317" source="D.KBaseSearch.genome_ref" target="D.KBaseSearch.GenomeSetElement" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="1321" source="D.KBaseGenomes.Feature" target="D.KBaseSearch.FeatureSetElement" label="SUBTYPE"><data key="moduleName">KBaseSearch</data></edge><edge id="1074" source="D.KBaseGenomes.Feature" target="D.KBaseGenomes.Genome" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="262" source="D.ExpressionServices.sample_ids" target="M.ExpressionServices.get_expression_samples_molecules" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="203" source="D.ExpressionServices.sample_ids" target="M.ExpressionServices.get_expression_data_by_samples_and_features" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="260" source="D.ExpressionServices.sample_ids" target="M.ExpressionServices.get_expression_samples_descriptions" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="251" source="D.ExpressionServices.sample_ids" target="M.ExpressionServices.compare_samples_vs_the_average" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="252" source="D.ExpressionServices.sample_ids" target="M.ExpressionServices.compare_samples_vs_the_average" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="201" source="D.ExpressionServices.sample_ids" target="M.ExpressionServices.get_expression_samples_data" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="258" source="D.ExpressionServices.sample_ids" target="M.ExpressionServices.get_expression_samples_titles" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="268" source="D.ExpressionServices.sample_ids" target="M.ExpressionServices.get_expression_samples_original_log2_medians" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="249" source="D.ExpressionServices.sample_ids" target="M.ExpressionServices.compare_samples_vs_default_controls" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="266" source="D.ExpressionServices.sample_ids" target="M.ExpressionServices.get_expression_samples_external_source_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="264" source="D.ExpressionServices.sample_ids" target="M.ExpressionServices.get_expression_samples_types" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="1839" source="M.Tree.filter_abundance_profile" target="D.Tree.abundance_data" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="917" source="D.KBaseFBA.FBAMinimalReactionsResult" target="D.KBaseFBA.FBA" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="2095" source="D.Workspace.RenameWorkspaceParams" target="M.Workspace.rename_workspace" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="1349" source="D.KBaseTrees.substructure" target="D.KBaseTrees.TreeDecoration" label="HASH_VALUE"><data key="moduleName">KBaseTrees</data></edge><edge id="1268" source="D.KBaseRegulation.Effector" target="D.KBaseRegulation.Regulon" label="LIST_OF"><data key="moduleName">KBaseRegulation</data></edge><edge id="1253" source="D.KBaseRegulation.Effector" target="D.KBaseRegulation.EffectorCollection" label="LIST_OF"><data key="moduleName">KBaseRegulation</data></edge><edge id="1398" source="M.KBaseTrees.get_tree_ids_by_feature" target="D.KBaseTrees.kbase_id" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="562" source="D.KBaseBiochem.MapReaction" target="D.KBaseBiochem.MetabolicMap" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="132" source="D.ExpressionServices.data_expression_levels_for_sample" target="D.ExpressionServices.label_data_mapping" label="HASH_VALUE"><data key="moduleName">ExpressionServices</data></edge><edge id="294" source="D.ExpressionServices.data_expression_levels_for_sample" target="D.ExpressionServices.ExpressionSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="159" source="D.ExpressionServices.data_expression_levels_for_sample" target="D.ExpressionServices.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="1467" source="M.MAK.search_MAK_results_from_cds" target="D.MAK.MAKBiclusterSet" label="METHOD_RETURN"><data key="moduleName">MAK</data></edge><edge id="643" source="D.KBaseExpression.sample_measurement_mapping" target="D.KBaseExpression.feature_sample_measurement_mapping" label="HASH_VALUE"><data key="moduleName">KBaseExpression</data></edge><edge id="1585" source="D.Ontology.GoTermInfo" target="D.Ontology.GoTermInfoList" label="LIST_OF"><data key="moduleName">Ontology</data></edge><edge id="540" source="D.KBaseBiochem.reactionset_id" target="D.KBaseBiochem.ReactionSet" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="1062" source="D.KBaseGenomes.regulon_data" target="D.KBaseGenomes.Feature" label="LIST_OF"><data key="moduleName">KBaseGenomes</data></edge><edge id="556" source="D.KBaseBiochem.MapReactionReactant" target="D.KBaseBiochem.MapReaction" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="557" source="D.KBaseBiochem.MapReactionReactant" target="D.KBaseBiochem.MapReaction" label="LIST_OF"><data key="moduleName">KBaseBiochem</data></edge><edge id="241" source="M.ExpressionServices.get_expression_sample_ids_by_ontology_ids" target="D.ExpressionServices.sample_ids" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="991" source="D.KBaseFBA.Trainingset_ref" target="D.KBaseFBA.Classifier" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="1920" source="D.UserAndJobState.job_id" target="M.UserAndJobState.delete_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1889" source="D.UserAndJobState.job_id" target="M.UserAndJobState.get_job_status" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1879" source="D.UserAndJobState.job_id" target="M.UserAndJobState.update_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1897" source="D.UserAndJobState.job_id" target="M.UserAndJobState.complete_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1918" source="D.UserAndJobState.job_id" target="M.UserAndJobState.get_job_shared" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1862" source="D.UserAndJobState.job_id" target="M.UserAndJobState.start_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1902" source="D.UserAndJobState.job_id" target="M.UserAndJobState.get_results" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1874" source="D.UserAndJobState.job_id" target="M.UserAndJobState.update_job_progress" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1916" source="D.UserAndJobState.job_id" target="M.UserAndJobState.get_job_owner" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1922" source="D.UserAndJobState.job_id" target="M.UserAndJobState.force_delete_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1904" source="D.UserAndJobState.job_id" target="M.UserAndJobState.get_detailed_error" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1914" source="D.UserAndJobState.job_id" target="M.UserAndJobState.unshare_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1906" source="D.UserAndJobState.job_id" target="M.UserAndJobState.get_job_info" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1883" source="D.UserAndJobState.job_id" target="M.UserAndJobState.get_job_description" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="1912" source="D.UserAndJobState.job_id" target="M.UserAndJobState.share_job" label="METHOD_PARAM"><data key="moduleName">UserAndJobState</data></edge><edge id="2084" source="M.Workspace.get_objectmeta" target="D.Workspace.object_metadata" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="1415" source="D.KBaseTrees.boolean" target="D.KBaseTrees.CdsImportTreeParameters" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1414" source="D.KBaseTrees.boolean" target="D.KBaseTrees.CdsImportTreeParameters" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1426" source="D.KBaseTrees.boolean" target="D.KBaseTrees.FilterParams" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1413" source="D.KBaseTrees.boolean" target="D.KBaseTrees.CdsImportTreeParameters" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1419" source="D.KBaseTrees.boolean" target="D.KBaseTrees.CdsImportTreeParameters" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1427" source="D.KBaseTrees.boolean" target="D.KBaseTrees.FilterParams" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1418" source="D.KBaseTrees.boolean" target="D.KBaseTrees.CdsImportTreeParameters" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1417" source="D.KBaseTrees.boolean" target="D.KBaseTrees.CdsImportTreeParameters" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1416" source="D.KBaseTrees.boolean" target="D.KBaseTrees.CdsImportTreeParameters" label="SUBTYPE"><data key="moduleName">KBaseTrees</data></edge><edge id="1491" source="D.MEME.TomtomRunParameters" target="M.MEME.compare_motifs_with_tomtom" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1497" source="D.MEME.TomtomRunParameters" target="M.MEME.compare_motifs_with_tomtom_by_collection_from_ws" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1495" source="D.MEME.TomtomRunParameters" target="M.MEME.compare_motifs_with_tomtom_by_collection" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1498" source="D.MEME.TomtomRunParameters" target="M.MEME.compare_motifs_with_tomtom_job_by_collection_from_ws" label="METHOD_PARAM"><data key="moduleName">MEME</data></edge><edge id="1478" source="D.MEME.TomtomRunParameters" target="D.MEME.TomtomRunResult" label="SUBTYPE"><data key="moduleName">MEME</data></edge><edge id="1833" source="M.Tree.compute_abundance_profile" target="D.Tree.AbundanceResult" label="METHOD_RETURN"><data key="moduleName">Tree</data></edge><edge id="1390" source="M.KBaseTrees.get_alignment" target="D.KBaseTrees.alignment" label="METHOD_RETURN"><data key="moduleName">KBaseTrees</data></edge><edge id="490" source="D.IDServerAPI.external_db" target="M.IDServerAPI.register_allocated_ids" label="METHOD_PARAM"><data key="moduleName">IDServerAPI</data></edge><edge id="484" source="D.IDServerAPI.external_db" target="M.IDServerAPI.register_ids" label="METHOD_PARAM"><data key="moduleName">IDServerAPI</data></edge><edge id="479" source="D.IDServerAPI.external_db" target="M.IDServerAPI.external_ids_to_kbase_ids" label="METHOD_PARAM"><data key="moduleName">IDServerAPI</data></edge><edge id="1754" source="M.RDPTools.probematch_check" target="D.RDPTools.Handle" label="METHOD_RETURN"><data key="moduleName">RDPTools</data></edge><edge id="1592" source="D.Ontology.Enrichment" target="D.Ontology.EnrichmentList" label="LIST_OF"><data key="moduleName">Ontology</data></edge><edge id="722" source="D.KBaseExpression.sample_comparison_mapping" target="M.KBaseExpression.get_top_changers" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="720" source="D.KBaseExpression.sample_comparison_mapping" target="M.KBaseExpression.get_on_off_calls" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="916" source="D.KBaseFBA.FBAMetaboliteProductionResult" target="D.KBaseFBA.FBA" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1168" source="M.KBaseNetworks.network_type2datasets" target="D.KBaseNetworks.Dataset" label="METHOD_RETURN"><data key="moduleName">KBaseNetworks</data></edge><edge id="551" source="D.KBaseBiochem.structure_id" target="D.KBaseBiochem.CompoundStructure" label="SUBTYPE"><data key="moduleName">KBaseBiochem</data></edge><edge id="483" source="D.IDServerAPI.kbase_id_prefix" target="M.IDServerAPI.register_ids" label="METHOD_PARAM"><data key="moduleName">IDServerAPI</data></edge><edge id="489" source="D.IDServerAPI.kbase_id_prefix" target="M.IDServerAPI.register_allocated_ids" label="METHOD_PARAM"><data key="moduleName">IDServerAPI</data></edge><edge id="488" source="D.IDServerAPI.kbase_id_prefix" target="M.IDServerAPI.allocate_id_range" label="METHOD_PARAM"><data key="moduleName">IDServerAPI</data></edge><edge id="21" source="D.AskKB.row" target="D.AskKB.rows" label="LIST_OF"><data key="moduleName">AskKB</data></edge><edge id="1277" source="D.KBaseRegulation.regulog_id" target="D.KBaseRegulation.Regulog" label="SUBTYPE"><data key="moduleName">KBaseRegulation</data></edge><edge id="782" source="D.KBaseExpression.shock_ref" target="D.KBaseExpression.RNASeqDifferentialExpressionFile" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="776" source="D.KBaseExpression.shock_ref" target="D.KBaseExpression.RNASeqSample" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="779" source="D.KBaseExpression.shock_ref" target="D.KBaseExpression.RNASeqSampleAlignment" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="254" source="D.ExpressionServices.sample_comparison_mapping" target="M.ExpressionServices.get_on_off_calls" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="256" source="D.ExpressionServices.sample_comparison_mapping" target="M.ExpressionServices.get_top_changers" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="784" source="D.KBaseExpression.RNASeqDifferentialExpressionSet" target="D.KBaseExpression.RNASeqDifferentialExpression" label="SUBTYPE"><data key="moduleName">KBaseExpression</data></edge><edge id="216" source="D.ExpressionServices.experiment_meta_ids" target="M.ExpressionServices.get_expression_sample_ids_by_experiment_meta_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="214" source="D.ExpressionServices.experiment_meta_ids" target="M.ExpressionServices.get_expression_samples_data_by_experiment_meta_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="202" source="M.ExpressionServices.get_expression_samples_data" target="D.ExpressionServices.expression_data_samples_map" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="2015" source="M.Workspace.get_object" target="D.Workspace.get_object_output" label="METHOD_RETURN"><data key="moduleName">Workspace</data></edge><edge id="1861" source="M.UserAndJobState.create_job" target="D.UserAndJobState.job_id" label="METHOD_RETURN"><data key="moduleName">UserAndJobState</data></edge><edge id="217" source="M.ExpressionServices.get_expression_sample_ids_by_experiment_meta_ids" target="D.ExpressionServices.sample_ids" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="285" source="D.ExpressionServices.ExpressionOntologyTerm" target="D.ExpressionServices.expression_ontology_terms" label="LIST_OF"><data key="moduleName">ExpressionServices</data></edge><edge id="271" source="M.ExpressionServices.get_expression_series_titles" target="D.ExpressionServices.series_string_map" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="1971" source="D.Workspace.WorkspaceIdentity" target="M.Workspace.lock_workspace" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2111" source="D.Workspace.WorkspaceIdentity" target="M.Workspace.delete_workspace" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="1992" source="D.Workspace.WorkspaceIdentity" target="M.Workspace.get_permissions" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="2112" source="D.Workspace.WorkspaceIdentity" target="M.Workspace.undelete_workspace" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="1977" source="D.Workspace.WorkspaceIdentity" target="M.Workspace.get_workspace_info" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="1979" source="D.Workspace.WorkspaceIdentity" target="M.Workspace.get_workspace_description" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="1962" source="D.Workspace.WorkspaceIdentity" target="D.Workspace.AlterWorkspaceMetadataParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1965" source="D.Workspace.WorkspaceIdentity" target="D.Workspace.CloneWorkspaceParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="2093" source="D.Workspace.WorkspaceIdentity" target="D.Workspace.RenameWorkspaceParams" label="SUBTYPE"><data key="moduleName">Workspace</data></edge><edge id="1724" source="M.ProteinInfo.fids_to_ipr" target="D.ProteinInfo.fid" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="1725" source="M.ProteinInfo.fids_to_ipr" target="D.ProteinInfo.ipr" label="METHOD_RETURN"><data key="moduleName">ProteinInfo</data></edge><edge id="179" source="D.ExpressionServices.contact_last_name" target="D.ExpressionServices.ContactPerson" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="1576" source="D.Ontology.ontology_description" target="D.Ontology.ontology_description_list" label="LIST_OF"><data key="moduleName">Ontology</data></edge><edge id="696" source="D.KBaseExpression.wild_type_only" target="M.KBaseExpression.get_expression_sample_ids_by_genome_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="701" source="D.KBaseExpression.wild_type_only" target="M.KBaseExpression.get_expression_samples_data_by_ontology_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="710" source="D.KBaseExpression.wild_type_only" target="M.KBaseExpression.get_expression_data_by_feature_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="692" source="D.KBaseExpression.wild_type_only" target="M.KBaseExpression.get_expression_samples_data_by_genome_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="706" source="D.KBaseExpression.wild_type_only" target="M.KBaseExpression.get_expression_sample_ids_by_ontology_ids" label="METHOD_PARAM"><data key="moduleName">KBaseExpression</data></edge><edge id="250" source="M.ExpressionServices.compare_samples_vs_default_controls" target="D.ExpressionServices.sample_comparison_mapping" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="396" source="D.GenomeAnnotation.repeat_region_SEED_parameters" target="M.GenomeAnnotation.call_features_repeat_region_SEED" label="METHOD_PARAM"><data key="moduleName">GenomeAnnotation</data></edge><edge id="442" source="D.GenomeAnnotation.repeat_region_SEED_parameters" target="D.GenomeAnnotation.pipeline_stage" label="SUBTYPE"><data key="moduleName">GenomeAnnotation</data></edge><edge id="239" source="D.ExpressionServices.sample_type" target="M.ExpressionServices.get_expression_sample_ids_by_ontology_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="222" source="D.ExpressionServices.sample_type" target="M.ExpressionServices.get_expression_sample_ids_by_strain_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="225" source="D.ExpressionServices.sample_type" target="M.ExpressionServices.get_expression_samples_data_by_genome_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="219" source="D.ExpressionServices.sample_type" target="M.ExpressionServices.get_expression_samples_data_by_strain_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="229" source="D.ExpressionServices.sample_type" target="M.ExpressionServices.get_expression_sample_ids_by_genome_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="243" source="D.ExpressionServices.sample_type" target="M.ExpressionServices.get_expression_data_by_feature_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="234" source="D.ExpressionServices.sample_type" target="M.ExpressionServices.get_expression_samples_data_by_ontology_ids" label="METHOD_PARAM"><data key="moduleName">ExpressionServices</data></edge><edge id="150" source="D.ExpressionServices.sample_type" target="D.ExpressionServices.ExpressionDataSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="293" source="D.ExpressionServices.sample_type" target="D.ExpressionServices.ExpressionSample" label="SUBTYPE"><data key="moduleName">ExpressionServices</data></edge><edge id="40" source="D.BAMBI.ws_sequence_set_ref" target="M.BAMBI.find_motifs" label="METHOD_PARAM"><data key="moduleName">BAMBI</data></edge><edge id="36" source="D.BAMBI.ws_sequence_set_ref" target="D.BAMBI.BambiRunResult" label="SUBTYPE"><data key="moduleName">BAMBI</data></edge><edge id="2079" source="D.Workspace.ListObjectsParams" target="M.Workspace.list_objects" label="METHOD_PARAM"><data key="moduleName">Workspace</data></edge><edge id="803" source="D.KBaseFBA.modelreaction_id" target="D.KBaseFBA.ModelReaction" label="SUBTYPE"><data key="moduleName">KBaseFBA</data></edge><edge id="840" source="D.KBaseFBA.modelreaction_id" target="D.KBaseFBA.FBAConstraint" label="HASH_KEY"><data key="moduleName">KBaseFBA</data></edge><edge id="888" source="D.KBaseFBA.modelreaction_id" target="D.KBaseFBA.FBA" label="HASH_KEY"><data key="moduleName">KBaseFBA</data></edge><edge id="904" source="D.KBaseFBA.modelreaction_id" target="D.KBaseFBA.FBA" label="HASH_KEY"><data key="moduleName">KBaseFBA</data></edge><edge id="977" source="D.KBaseFBA.modelreaction_id" target="D.KBaseFBA.ReactionSensitivityAnalysisReaction" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="972" source="D.KBaseFBA.modelreaction_id" target="D.KBaseFBA.ReactionSensitivityAnalysisCorrectedReaction" label="LIST_OF"><data key="moduleName">KBaseFBA</data></edge><edge id="1068" source="D.KBaseGenomes.Genome_id" target="D.KBaseGenomes.Close_genome" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1069" source="D.KBaseGenomes.Genome_id" target="D.KBaseGenomes.Genome" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="1093" source="D.KBaseGenomes.Genome_id" target="D.KBaseGenomes.GenomeDomainData" label="SUBTYPE"><data key="moduleName">KBaseGenomes</data></edge><edge id="253" source="M.ExpressionServices.compare_samples_vs_the_average" target="D.ExpressionServices.sample_comparison_mapping" label="METHOD_RETURN"><data key="moduleName">ExpressionServices</data></edge><edge id="1037" source="D.KBaseGeneFamilies.contig_id" target="D.KBaseGeneFamilies.DomainAnnotation" label="HASH_KEY"><data key="moduleName">KBaseGeneFamilies</data></edge><edge id="1039" source="D.KBaseGeneFamilies.contig_id" target="D.KBaseGeneFamilies.DomainAnnotation" label="HASH_KEY"><data key="moduleName">KBaseGeneFamilies</data></edge></graph></graphml>